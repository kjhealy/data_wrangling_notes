[
  {
    "objectID": "course_notes.html",
    "href": "course_notes.html",
    "title": "Course Notes",
    "section": "",
    "text": "This is a quarto file. Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "course_notes.html#quarto",
    "href": "course_notes.html#quarto",
    "title": "Course Notes",
    "section": "",
    "text": "This is a quarto file. Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "course_notes.html#setup",
    "href": "course_notes.html#setup",
    "title": "Course Notes",
    "section": "Setup",
    "text": "Setup\nHere we load some packages that we’ll be using.\n\nlibrary(here)\n\nhere() starts at /Users/kjhealy/Documents/courses/data_wrangling\n\nlibrary(socviz)\nlibrary(gapminder)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nhere::i_am(\"course_notes.qmd\") # relative to the course packet.\n\nhere() starts at /Users/kjhealy/Documents/courses/data_wrangling"
  },
  {
    "objectID": "course_notes.html#running-code",
    "href": "course_notes.html#running-code",
    "title": "Course Notes",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#load-our-libraries",
    "href": "slides/03a-dplyr-basics.html#load-our-libraries",
    "title": "Manipulating tables with dplyr",
    "section": "Load our libraries",
    "text": "Load our libraries\n\nlibrary(here)      # manage file paths\nlibrary(socviz)    # data and some useful functions\nlibrary(tidyverse) # your friend and mine"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#tidyverse-components-again",
    "href": "slides/03a-dplyr-basics.html#tidyverse-components-again",
    "title": "Manipulating tables with dplyr",
    "section": "Tidyverse components, again",
    "text": "Tidyverse components, again\n\n\n\nlibrary(tidyverse)\nLoading tidyverse: ggplot2\nLoading tidyverse: tibble\nLoading tidyverse: tidyr\nLoading tidyverse: readr\nLoading tidyverse: purrr\nLoading tidyverse: dplyr\n\n\n\nCall the package and …\n&lt;| Draw graphs\n&lt;| Nicer data tables\n&lt;| Tidy your data\n&lt;| Get data into R\n&lt;| Fancy Iteration\n&lt;| Action verbs for tables"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#other-tidyverse-components",
    "href": "slides/03a-dplyr-basics.html#other-tidyverse-components",
    "title": "Manipulating tables with dplyr",
    "section": "Other tidyverse components",
    "text": "Other tidyverse components\n\n\n\nforcats\nhaven\nlubridate\nreadxl\nstringr\nreprex\n\n\n\n&lt;| Deal with factors\n&lt;| Import Stata, SPSS, etc\n&lt;| Dates, Durations, Times\n&lt;| Import from spreadsheets\n&lt;| Strings and Regular Expressions\n&lt;| Make reproducible examples\n\n\n\nNot all of these are attached when we do library(tidyverse)"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#dplyr-lets-you-work-with-tibbles",
    "href": "slides/03a-dplyr-basics.html#dplyr-lets-you-work-with-tibbles",
    "title": "Manipulating tables with dplyr",
    "section": "dplyr lets you work with tibbles",
    "text": "dplyr lets you work with tibbles\n\n\nRemember, tibbles are tables of data where the columns can be of different types, such as numeric, logical, character, factor, etc.\nWe’ll use dplyr to transform and summarize our data.\n\n\n\n\nWe’ll use the pipe operator, |&gt;, to chain together sequences of actions on our tables."
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#some-actions-to-take-on-a-single-table",
    "href": "slides/03a-dplyr-basics.html#some-actions-to-take-on-a-single-table",
    "title": "Manipulating tables with dplyr",
    "section": "Some actions to take on a single table",
    "text": "Some actions to take on a single table\n\n\nGroup the data at the level we want, such as “Religion by Region” or “Children by School”.\nSubset either the rows or columns of or table—i.e. remove them before doing anything.\nMutate the data. That is, change something at the current level of grouping. Mutating adds new columns to the table, or changes the content of an existing column. It never changes the number of rows.\nSummarize or aggregate the data. That is, make something new at a higher level of grouping. E.g., calculate means or counts by some grouping variable. This will generally result in a smaller, summary table. Usually this will have the same number of rows as there are groups being summarized."
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#for-each-action-theres-a-function",
    "href": "slides/03a-dplyr-basics.html#for-each-action-theres-a-function",
    "title": "Manipulating tables with dplyr",
    "section": "For each action there’s a function",
    "text": "For each action there’s a function\n\n\nGroup using group_by().\nSubset has one action for rows and one for columns. We filter() rows and select() columns.\nMutate tables (i.e. add new columns, or re-make existing ones) using mutate().\nSummarize tables (i.e. perform aggregating calculations) using summarize()."
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#general-social-survey-data-gss_sm",
    "href": "slides/03a-dplyr-basics.html#general-social-survey-data-gss_sm",
    "title": "Manipulating tables with dplyr",
    "section": "General Social Survey data: gss_sm",
    "text": "General Social Survey data: gss_sm\n\n## library(socviz) # if not loaded\ngss_sm\n\n# A tibble: 2,867 × 32\n    year    id ballot       age childs sibs   degree race  sex   region income16\n   &lt;dbl&gt; &lt;dbl&gt; &lt;labelled&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;labe&gt; &lt;fct&gt;  &lt;fct&gt; &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;   \n 1  2016     1 1             47      3 2      Bache… White Male  New E… $170000…\n 2  2016     2 2             61      0 3      High … White Male  New E… $50000 …\n 3  2016     3 3             72      2 3      Bache… White Male  New E… $75000 …\n 4  2016     4 1             43      4 3      High … White Fema… New E… $170000…\n 5  2016     5 3             55      2 2      Gradu… White Fema… New E… $170000…\n 6  2016     6 2             53      2 2      Junio… White Fema… New E… $60000 …\n 7  2016     7 1             50      2 2      High … White Male  New E… $170000…\n 8  2016     8 3             23      3 6      High … Other Fema… Middl… $30000 …\n 9  2016     9 1             45      3 5      High … Black Male  Middl… $60000 …\n10  2016    10 3             71      4 1      Junio… White Male  Middl… $60000 …\n# ℹ 2,857 more rows\n# ℹ 21 more variables: relig &lt;fct&gt;, marital &lt;fct&gt;, padeg &lt;fct&gt;, madeg &lt;fct&gt;,\n#   partyid &lt;fct&gt;, polviews &lt;fct&gt;, happy &lt;fct&gt;, partners &lt;fct&gt;, grass &lt;fct&gt;,\n#   zodiac &lt;fct&gt;, pres12 &lt;labelled&gt;, wtssall &lt;dbl&gt;, income_rc &lt;fct&gt;,\n#   agegrp &lt;fct&gt;, ageq &lt;fct&gt;, siblings &lt;fct&gt;, kids &lt;fct&gt;, religion &lt;fct&gt;,\n#   bigregion &lt;fct&gt;, partners_rc &lt;fct&gt;, obama &lt;dbl&gt;\n\n\n\nNotice how the tibble already tells us a lot."
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#summarizing-a-table",
    "href": "slides/03a-dplyr-basics.html#summarizing-a-table",
    "title": "Manipulating tables with dplyr",
    "section": "Summarizing a Table",
    "text": "Summarizing a Table\n\nHere’s what we’re going to do:\n\n]"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#summarizing-a-table-1",
    "href": "slides/03a-dplyr-basics.html#summarizing-a-table-1",
    "title": "Manipulating tables with dplyr",
    "section": "Summarizing a Table",
    "text": "Summarizing a Table\n\ngss_sm |&gt; \n  select(id, bigregion, religion)\n\n# A tibble: 2,867 × 3\n      id bigregion religion  \n   &lt;dbl&gt; &lt;fct&gt;     &lt;fct&gt;     \n 1     1 Northeast None      \n 2     2 Northeast None      \n 3     3 Northeast Catholic  \n 4     4 Northeast Catholic  \n 5     5 Northeast None      \n 6     6 Northeast None      \n 7     7 Northeast None      \n 8     8 Northeast Catholic  \n 9     9 Northeast Protestant\n10    10 Northeast None      \n# ℹ 2,857 more rows\n\n\nWe’re just taking a look at the relevant columns here."
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#group-by-one-column-or-variable",
    "href": "slides/03a-dplyr-basics.html#group-by-one-column-or-variable",
    "title": "Manipulating tables with dplyr",
    "section": "Group by one column or variable",
    "text": "Group by one column or variable\n\ngss_sm |&gt; \n  group_by(bigregion)\n\n# A tibble: 2,867 × 32\n# Groups:   bigregion [4]\n    year    id ballot       age childs sibs   degree race  sex   region income16\n   &lt;dbl&gt; &lt;dbl&gt; &lt;labelled&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;labe&gt; &lt;fct&gt;  &lt;fct&gt; &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;   \n 1  2016     1 1             47      3 2      Bache… White Male  New E… $170000…\n 2  2016     2 2             61      0 3      High … White Male  New E… $50000 …\n 3  2016     3 3             72      2 3      Bache… White Male  New E… $75000 …\n 4  2016     4 1             43      4 3      High … White Fema… New E… $170000…\n 5  2016     5 3             55      2 2      Gradu… White Fema… New E… $170000…\n 6  2016     6 2             53      2 2      Junio… White Fema… New E… $60000 …\n 7  2016     7 1             50      2 2      High … White Male  New E… $170000…\n 8  2016     8 3             23      3 6      High … Other Fema… Middl… $30000 …\n 9  2016     9 1             45      3 5      High … Black Male  Middl… $60000 …\n10  2016    10 3             71      4 1      Junio… White Male  Middl… $60000 …\n# ℹ 2,857 more rows\n# ℹ 21 more variables: relig &lt;fct&gt;, marital &lt;fct&gt;, padeg &lt;fct&gt;, madeg &lt;fct&gt;,\n#   partyid &lt;fct&gt;, polviews &lt;fct&gt;, happy &lt;fct&gt;, partners &lt;fct&gt;, grass &lt;fct&gt;,\n#   zodiac &lt;fct&gt;, pres12 &lt;labelled&gt;, wtssall &lt;dbl&gt;, income_rc &lt;fct&gt;,\n#   agegrp &lt;fct&gt;, ageq &lt;fct&gt;, siblings &lt;fct&gt;, kids &lt;fct&gt;, religion &lt;fct&gt;,\n#   bigregion &lt;fct&gt;, partners_rc &lt;fct&gt;, obama &lt;dbl&gt;\n\n\nGrouping just changes the logical structure of the tibble."
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#group-and-summarize-by-one-column",
    "href": "slides/03a-dplyr-basics.html#group-and-summarize-by-one-column",
    "title": "Manipulating tables with dplyr",
    "section": "Group and summarize by one column",
    "text": "Group and summarize by one column\n\n\n\ngss_sm\n\n\n\n\n# A tibble: 2,867 × 32\n    year    id ballot       age childs sibs   degree race  sex   region income16\n   &lt;dbl&gt; &lt;dbl&gt; &lt;labelled&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;labe&gt; &lt;fct&gt;  &lt;fct&gt; &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;   \n 1  2016     1 1             47      3 2      Bache… White Male  New E… $170000…\n 2  2016     2 2             61      0 3      High … White Male  New E… $50000 …\n 3  2016     3 3             72      2 3      Bache… White Male  New E… $75000 …\n 4  2016     4 1             43      4 3      High … White Fema… New E… $170000…\n 5  2016     5 3             55      2 2      Gradu… White Fema… New E… $170000…\n 6  2016     6 2             53      2 2      Junio… White Fema… New E… $60000 …\n 7  2016     7 1             50      2 2      High … White Male  New E… $170000…\n 8  2016     8 3             23      3 6      High … Other Fema… Middl… $30000 …\n 9  2016     9 1             45      3 5      High … Black Male  Middl… $60000 …\n10  2016    10 3             71      4 1      Junio… White Male  Middl… $60000 …\n# ℹ 2,857 more rows\n# ℹ 21 more variables: relig &lt;fct&gt;, marital &lt;fct&gt;, padeg &lt;fct&gt;, madeg &lt;fct&gt;,\n#   partyid &lt;fct&gt;, polviews &lt;fct&gt;, happy &lt;fct&gt;, partners &lt;fct&gt;, grass &lt;fct&gt;,\n#   zodiac &lt;fct&gt;, pres12 &lt;labelled&gt;, wtssall &lt;dbl&gt;, income_rc &lt;fct&gt;,\n#   agegrp &lt;fct&gt;, ageq &lt;fct&gt;, siblings &lt;fct&gt;, kids &lt;fct&gt;, religion &lt;fct&gt;,\n#   bigregion &lt;fct&gt;, partners_rc &lt;fct&gt;, obama &lt;dbl&gt;"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#group-and-summarize-by-one-column-1",
    "href": "slides/03a-dplyr-basics.html#group-and-summarize-by-one-column-1",
    "title": "Manipulating tables with dplyr",
    "section": "Group and summarize by one column",
    "text": "Group and summarize by one column\n\n\n\ngss_sm |&gt;\n  group_by(bigregion)\n\n\n\n\n# A tibble: 2,867 × 32\n# Groups:   bigregion [4]\n    year    id ballot       age childs sibs   degree race  sex   region income16\n   &lt;dbl&gt; &lt;dbl&gt; &lt;labelled&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;labe&gt; &lt;fct&gt;  &lt;fct&gt; &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;   \n 1  2016     1 1             47      3 2      Bache… White Male  New E… $170000…\n 2  2016     2 2             61      0 3      High … White Male  New E… $50000 …\n 3  2016     3 3             72      2 3      Bache… White Male  New E… $75000 …\n 4  2016     4 1             43      4 3      High … White Fema… New E… $170000…\n 5  2016     5 3             55      2 2      Gradu… White Fema… New E… $170000…\n 6  2016     6 2             53      2 2      Junio… White Fema… New E… $60000 …\n 7  2016     7 1             50      2 2      High … White Male  New E… $170000…\n 8  2016     8 3             23      3 6      High … Other Fema… Middl… $30000 …\n 9  2016     9 1             45      3 5      High … Black Male  Middl… $60000 …\n10  2016    10 3             71      4 1      Junio… White Male  Middl… $60000 …\n# ℹ 2,857 more rows\n# ℹ 21 more variables: relig &lt;fct&gt;, marital &lt;fct&gt;, padeg &lt;fct&gt;, madeg &lt;fct&gt;,\n#   partyid &lt;fct&gt;, polviews &lt;fct&gt;, happy &lt;fct&gt;, partners &lt;fct&gt;, grass &lt;fct&gt;,\n#   zodiac &lt;fct&gt;, pres12 &lt;labelled&gt;, wtssall &lt;dbl&gt;, income_rc &lt;fct&gt;,\n#   agegrp &lt;fct&gt;, ageq &lt;fct&gt;, siblings &lt;fct&gt;, kids &lt;fct&gt;, religion &lt;fct&gt;,\n#   bigregion &lt;fct&gt;, partners_rc &lt;fct&gt;, obama &lt;dbl&gt;"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#group-and-summarize-by-one-column-2",
    "href": "slides/03a-dplyr-basics.html#group-and-summarize-by-one-column-2",
    "title": "Manipulating tables with dplyr",
    "section": "Group and summarize by one column",
    "text": "Group and summarize by one column\n\n\n\ngss_sm |&gt;\n  group_by(bigregion) |&gt;\n  summarize(total = n())\n\n\n\n\n# A tibble: 4 × 2\n  bigregion total\n  &lt;fct&gt;     &lt;int&gt;\n1 Northeast   488\n2 Midwest     695\n3 South      1052\n4 West        632\n\n\n\n\n\nThe function n() counts up the rows within each group.\n\nAll the other columns are dropped in the summary operation\nYour original gss_sm table is untouched"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#group-and-summarize-by-two-columns",
    "href": "slides/03a-dplyr-basics.html#group-and-summarize-by-two-columns",
    "title": "Manipulating tables with dplyr",
    "section": "Group and summarize by two columns",
    "text": "Group and summarize by two columns\n\n\n\ngss_sm\n\n\n\n\n# A tibble: 2,867 × 32\n    year    id ballot       age childs sibs   degree race  sex   region income16\n   &lt;dbl&gt; &lt;dbl&gt; &lt;labelled&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;labe&gt; &lt;fct&gt;  &lt;fct&gt; &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;   \n 1  2016     1 1             47      3 2      Bache… White Male  New E… $170000…\n 2  2016     2 2             61      0 3      High … White Male  New E… $50000 …\n 3  2016     3 3             72      2 3      Bache… White Male  New E… $75000 …\n 4  2016     4 1             43      4 3      High … White Fema… New E… $170000…\n 5  2016     5 3             55      2 2      Gradu… White Fema… New E… $170000…\n 6  2016     6 2             53      2 2      Junio… White Fema… New E… $60000 …\n 7  2016     7 1             50      2 2      High … White Male  New E… $170000…\n 8  2016     8 3             23      3 6      High … Other Fema… Middl… $30000 …\n 9  2016     9 1             45      3 5      High … Black Male  Middl… $60000 …\n10  2016    10 3             71      4 1      Junio… White Male  Middl… $60000 …\n# ℹ 2,857 more rows\n# ℹ 21 more variables: relig &lt;fct&gt;, marital &lt;fct&gt;, padeg &lt;fct&gt;, madeg &lt;fct&gt;,\n#   partyid &lt;fct&gt;, polviews &lt;fct&gt;, happy &lt;fct&gt;, partners &lt;fct&gt;, grass &lt;fct&gt;,\n#   zodiac &lt;fct&gt;, pres12 &lt;labelled&gt;, wtssall &lt;dbl&gt;, income_rc &lt;fct&gt;,\n#   agegrp &lt;fct&gt;, ageq &lt;fct&gt;, siblings &lt;fct&gt;, kids &lt;fct&gt;, religion &lt;fct&gt;,\n#   bigregion &lt;fct&gt;, partners_rc &lt;fct&gt;, obama &lt;dbl&gt;"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#group-and-summarize-by-two-columns-1",
    "href": "slides/03a-dplyr-basics.html#group-and-summarize-by-two-columns-1",
    "title": "Manipulating tables with dplyr",
    "section": "Group and summarize by two columns",
    "text": "Group and summarize by two columns\n\n\n\ngss_sm |&gt;\n  group_by(bigregion, religion)\n\n\n\n\n# A tibble: 2,867 × 32\n# Groups:   bigregion, religion [24]\n    year    id ballot       age childs sibs   degree race  sex   region income16\n   &lt;dbl&gt; &lt;dbl&gt; &lt;labelled&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;labe&gt; &lt;fct&gt;  &lt;fct&gt; &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;   \n 1  2016     1 1             47      3 2      Bache… White Male  New E… $170000…\n 2  2016     2 2             61      0 3      High … White Male  New E… $50000 …\n 3  2016     3 3             72      2 3      Bache… White Male  New E… $75000 …\n 4  2016     4 1             43      4 3      High … White Fema… New E… $170000…\n 5  2016     5 3             55      2 2      Gradu… White Fema… New E… $170000…\n 6  2016     6 2             53      2 2      Junio… White Fema… New E… $60000 …\n 7  2016     7 1             50      2 2      High … White Male  New E… $170000…\n 8  2016     8 3             23      3 6      High … Other Fema… Middl… $30000 …\n 9  2016     9 1             45      3 5      High … Black Male  Middl… $60000 …\n10  2016    10 3             71      4 1      Junio… White Male  Middl… $60000 …\n# ℹ 2,857 more rows\n# ℹ 21 more variables: relig &lt;fct&gt;, marital &lt;fct&gt;, padeg &lt;fct&gt;, madeg &lt;fct&gt;,\n#   partyid &lt;fct&gt;, polviews &lt;fct&gt;, happy &lt;fct&gt;, partners &lt;fct&gt;, grass &lt;fct&gt;,\n#   zodiac &lt;fct&gt;, pres12 &lt;labelled&gt;, wtssall &lt;dbl&gt;, income_rc &lt;fct&gt;,\n#   agegrp &lt;fct&gt;, ageq &lt;fct&gt;, siblings &lt;fct&gt;, kids &lt;fct&gt;, religion &lt;fct&gt;,\n#   bigregion &lt;fct&gt;, partners_rc &lt;fct&gt;, obama &lt;dbl&gt;"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#group-and-summarize-by-two-columns-2",
    "href": "slides/03a-dplyr-basics.html#group-and-summarize-by-two-columns-2",
    "title": "Manipulating tables with dplyr",
    "section": "Group and summarize by two columns",
    "text": "Group and summarize by two columns\n\n\n\ngss_sm |&gt;\n  group_by(bigregion, religion) |&gt;\n  summarize(total = n())\n\n\n\n\n# A tibble: 24 × 3\n# Groups:   bigregion [4]\n   bigregion religion   total\n   &lt;fct&gt;     &lt;fct&gt;      &lt;int&gt;\n 1 Northeast Protestant   158\n 2 Northeast Catholic     162\n 3 Northeast Jewish        27\n 4 Northeast None         112\n 5 Northeast Other         28\n 6 Northeast &lt;NA&gt;           1\n 7 Midwest   Protestant   325\n 8 Midwest   Catholic     172\n 9 Midwest   Jewish         3\n10 Midwest   None         157\n# ℹ 14 more rows\n\n\n\n\n\nThe function n() counts up the rows within the innermost (i.e. the rightmost) group."
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#calculate-frequencies",
    "href": "slides/03a-dplyr-basics.html#calculate-frequencies",
    "title": "Manipulating tables with dplyr",
    "section": "Calculate frequencies",
    "text": "Calculate frequencies\n\n\n\ngss_sm\n\n\n\n\n# A tibble: 2,867 × 32\n    year    id ballot       age childs sibs   degree race  sex   region income16\n   &lt;dbl&gt; &lt;dbl&gt; &lt;labelled&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;labe&gt; &lt;fct&gt;  &lt;fct&gt; &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;   \n 1  2016     1 1             47      3 2      Bache… White Male  New E… $170000…\n 2  2016     2 2             61      0 3      High … White Male  New E… $50000 …\n 3  2016     3 3             72      2 3      Bache… White Male  New E… $75000 …\n 4  2016     4 1             43      4 3      High … White Fema… New E… $170000…\n 5  2016     5 3             55      2 2      Gradu… White Fema… New E… $170000…\n 6  2016     6 2             53      2 2      Junio… White Fema… New E… $60000 …\n 7  2016     7 1             50      2 2      High … White Male  New E… $170000…\n 8  2016     8 3             23      3 6      High … Other Fema… Middl… $30000 …\n 9  2016     9 1             45      3 5      High … Black Male  Middl… $60000 …\n10  2016    10 3             71      4 1      Junio… White Male  Middl… $60000 …\n# ℹ 2,857 more rows\n# ℹ 21 more variables: relig &lt;fct&gt;, marital &lt;fct&gt;, padeg &lt;fct&gt;, madeg &lt;fct&gt;,\n#   partyid &lt;fct&gt;, polviews &lt;fct&gt;, happy &lt;fct&gt;, partners &lt;fct&gt;, grass &lt;fct&gt;,\n#   zodiac &lt;fct&gt;, pres12 &lt;labelled&gt;, wtssall &lt;dbl&gt;, income_rc &lt;fct&gt;,\n#   agegrp &lt;fct&gt;, ageq &lt;fct&gt;, siblings &lt;fct&gt;, kids &lt;fct&gt;, religion &lt;fct&gt;,\n#   bigregion &lt;fct&gt;, partners_rc &lt;fct&gt;, obama &lt;dbl&gt;"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#calculate-frequencies-1",
    "href": "slides/03a-dplyr-basics.html#calculate-frequencies-1",
    "title": "Manipulating tables with dplyr",
    "section": "Calculate frequencies",
    "text": "Calculate frequencies\n\n\n\ngss_sm |&gt;\n  group_by(bigregion, religion)\n\n\n\n\n# A tibble: 2,867 × 32\n# Groups:   bigregion, religion [24]\n    year    id ballot       age childs sibs   degree race  sex   region income16\n   &lt;dbl&gt; &lt;dbl&gt; &lt;labelled&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;labe&gt; &lt;fct&gt;  &lt;fct&gt; &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;   \n 1  2016     1 1             47      3 2      Bache… White Male  New E… $170000…\n 2  2016     2 2             61      0 3      High … White Male  New E… $50000 …\n 3  2016     3 3             72      2 3      Bache… White Male  New E… $75000 …\n 4  2016     4 1             43      4 3      High … White Fema… New E… $170000…\n 5  2016     5 3             55      2 2      Gradu… White Fema… New E… $170000…\n 6  2016     6 2             53      2 2      Junio… White Fema… New E… $60000 …\n 7  2016     7 1             50      2 2      High … White Male  New E… $170000…\n 8  2016     8 3             23      3 6      High … Other Fema… Middl… $30000 …\n 9  2016     9 1             45      3 5      High … Black Male  Middl… $60000 …\n10  2016    10 3             71      4 1      Junio… White Male  Middl… $60000 …\n# ℹ 2,857 more rows\n# ℹ 21 more variables: relig &lt;fct&gt;, marital &lt;fct&gt;, padeg &lt;fct&gt;, madeg &lt;fct&gt;,\n#   partyid &lt;fct&gt;, polviews &lt;fct&gt;, happy &lt;fct&gt;, partners &lt;fct&gt;, grass &lt;fct&gt;,\n#   zodiac &lt;fct&gt;, pres12 &lt;labelled&gt;, wtssall &lt;dbl&gt;, income_rc &lt;fct&gt;,\n#   agegrp &lt;fct&gt;, ageq &lt;fct&gt;, siblings &lt;fct&gt;, kids &lt;fct&gt;, religion &lt;fct&gt;,\n#   bigregion &lt;fct&gt;, partners_rc &lt;fct&gt;, obama &lt;dbl&gt;"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#calculate-frequencies-2",
    "href": "slides/03a-dplyr-basics.html#calculate-frequencies-2",
    "title": "Manipulating tables with dplyr",
    "section": "Calculate frequencies",
    "text": "Calculate frequencies\n\n\n\ngss_sm |&gt;\n  group_by(bigregion, religion) |&gt;\n  summarize(total = n())\n\n\n\n\n# A tibble: 24 × 3\n# Groups:   bigregion [4]\n   bigregion religion   total\n   &lt;fct&gt;     &lt;fct&gt;      &lt;int&gt;\n 1 Northeast Protestant   158\n 2 Northeast Catholic     162\n 3 Northeast Jewish        27\n 4 Northeast None         112\n 5 Northeast Other         28\n 6 Northeast &lt;NA&gt;           1\n 7 Midwest   Protestant   325\n 8 Midwest   Catholic     172\n 9 Midwest   Jewish         3\n10 Midwest   None         157\n# ℹ 14 more rows"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#calculate-frequencies-3",
    "href": "slides/03a-dplyr-basics.html#calculate-frequencies-3",
    "title": "Manipulating tables with dplyr",
    "section": "Calculate frequencies",
    "text": "Calculate frequencies\n\n\n\ngss_sm |&gt;\n  group_by(bigregion, religion) |&gt;\n  summarize(total = n()) |&gt;\n  mutate(freq = total / sum(total),\n           pct = round((freq*100), 1))\n\n\n\n\n# A tibble: 24 × 5\n# Groups:   bigregion [4]\n   bigregion religion   total    freq   pct\n   &lt;fct&gt;     &lt;fct&gt;      &lt;int&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1 Northeast Protestant   158 0.324    32.4\n 2 Northeast Catholic     162 0.332    33.2\n 3 Northeast Jewish        27 0.0553    5.5\n 4 Northeast None         112 0.230    23  \n 5 Northeast Other         28 0.0574    5.7\n 6 Northeast &lt;NA&gt;           1 0.00205   0.2\n 7 Midwest   Protestant   325 0.468    46.8\n 8 Midwest   Catholic     172 0.247    24.7\n 9 Midwest   Jewish         3 0.00432   0.4\n10 Midwest   None         157 0.226    22.6\n# ℹ 14 more rows\n\n\n\n\n\nThe function n() counts up the rows\nWhich rows? The ones fed down the pipeline\nThe innermost (i.e. the rightmost) group."
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#pipelines-carry-assumptions-forward",
    "href": "slides/03a-dplyr-basics.html#pipelines-carry-assumptions-forward",
    "title": "Manipulating tables with dplyr",
    "section": "Pipelines carry assumptions forward",
    "text": "Pipelines carry assumptions forward\n\ngss_sm |&gt; \n  group_by(bigregion, religion) |&gt; \n  summarize(total = n()) |&gt; \n  mutate(freq = total / sum(total),\n           pct = round((freq*100), 1))\n\n# A tibble: 24 × 5\n# Groups:   bigregion [4]\n   bigregion religion   total    freq   pct\n   &lt;fct&gt;     &lt;fct&gt;      &lt;int&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1 Northeast Protestant   158 0.324    32.4\n 2 Northeast Catholic     162 0.332    33.2\n 3 Northeast Jewish        27 0.0553    5.5\n 4 Northeast None         112 0.230    23  \n 5 Northeast Other         28 0.0574    5.7\n 6 Northeast &lt;NA&gt;           1 0.00205   0.2\n 7 Midwest   Protestant   325 0.468    46.8\n 8 Midwest   Catholic     172 0.247    24.7\n 9 Midwest   Jewish         3 0.00432   0.4\n10 Midwest   None         157 0.226    22.6\n# ℹ 14 more rows\n\n\n\n\nGroups are carried forward till summarized or explicitly ungrouped\nSummary calculations are done on the innermost group, which then “disappears”."
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#pipelines-carry-assumptions-forward-1",
    "href": "slides/03a-dplyr-basics.html#pipelines-carry-assumptions-forward-1",
    "title": "Manipulating tables with dplyr",
    "section": "Pipelines carry assumptions forward",
    "text": "Pipelines carry assumptions forward\n\ngss_sm |&gt; \n  group_by(bigregion, religion) |&gt; \n  summarize(total = n()) |&gt; \n  mutate(freq = total / sum(total),\n           pct = round((freq*100), 1)) \n\n# A tibble: 24 × 5\n# Groups:   bigregion [4]\n   bigregion religion   total    freq   pct\n   &lt;fct&gt;     &lt;fct&gt;      &lt;int&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1 Northeast Protestant   158 0.324    32.4\n 2 Northeast Catholic     162 0.332    33.2\n 3 Northeast Jewish        27 0.0553    5.5\n 4 Northeast None         112 0.230    23  \n 5 Northeast Other         28 0.0574    5.7\n 6 Northeast &lt;NA&gt;           1 0.00205   0.2\n 7 Midwest   Protestant   325 0.468    46.8\n 8 Midwest   Catholic     172 0.247    24.7\n 9 Midwest   Jewish         3 0.00432   0.4\n10 Midwest   None         157 0.226    22.6\n# ℹ 14 more rows\n\n\nmutate() is quite clever. See how we can immediately use freq, even though we are creating it in the same mutate() expression."
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#convenience-functions",
    "href": "slides/03a-dplyr-basics.html#convenience-functions",
    "title": "Manipulating tables with dplyr",
    "section": "Convenience functions",
    "text": "Convenience functions\n\ngss_sm |&gt; \n  group_by(bigregion, religion) |&gt; \n  summarize(total = n()) |&gt; \n  mutate(freq = total / sum(total),\n           pct = round((freq*100), 1)) \n\n# A tibble: 24 × 5\n# Groups:   bigregion [4]\n   bigregion religion   total    freq   pct\n   &lt;fct&gt;     &lt;fct&gt;      &lt;int&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1 Northeast Protestant   158 0.324    32.4\n 2 Northeast Catholic     162 0.332    33.2\n 3 Northeast Jewish        27 0.0553    5.5\n 4 Northeast None         112 0.230    23  \n 5 Northeast Other         28 0.0574    5.7\n 6 Northeast &lt;NA&gt;           1 0.00205   0.2\n 7 Midwest   Protestant   325 0.468    46.8\n 8 Midwest   Catholic     172 0.247    24.7\n 9 Midwest   Jewish         3 0.00432   0.4\n10 Midwest   None         157 0.226    22.6\n# ℹ 14 more rows\n\n\nWe’re going to be doing this group_by() … n() step a lot. Some shorthand for it would be useful."
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#three-options-for-counting-up-rows",
    "href": "slides/03a-dplyr-basics.html#three-options-for-counting-up-rows",
    "title": "Manipulating tables with dplyr",
    "section": "Three options for counting up rows",
    "text": "Three options for counting up rows\n\n\n\nUse n()\n\n\n\ngss_sm |&gt; \n  group_by(bigregion, religion) |&gt; \n  summarize(n = n()) \n\n# A tibble: 24 × 3\n# Groups:   bigregion [4]\n   bigregion religion       n\n   &lt;fct&gt;     &lt;fct&gt;      &lt;int&gt;\n 1 Northeast Protestant   158\n 2 Northeast Catholic     162\n 3 Northeast Jewish        27\n 4 Northeast None         112\n 5 Northeast Other         28\n 6 Northeast &lt;NA&gt;           1\n 7 Midwest   Protestant   325\n 8 Midwest   Catholic     172\n 9 Midwest   Jewish         3\n10 Midwest   None         157\n# ℹ 14 more rows\n\n\n\n\nGroup it yourself; result is grouped.\n\n\n\nUse tally()\n\n\n\ngss_sm |&gt; \n  group_by(bigregion, religion) |&gt; \n  tally() \n\n# A tibble: 24 × 3\n# Groups:   bigregion [4]\n   bigregion religion       n\n   &lt;fct&gt;     &lt;fct&gt;      &lt;int&gt;\n 1 Northeast Protestant   158\n 2 Northeast Catholic     162\n 3 Northeast Jewish        27\n 4 Northeast None         112\n 5 Northeast Other         28\n 6 Northeast &lt;NA&gt;           1\n 7 Midwest   Protestant   325\n 8 Midwest   Catholic     172\n 9 Midwest   Jewish         3\n10 Midwest   None         157\n# ℹ 14 more rows\n\n\n\n\nMore compact; result is grouped.\n\n\n\nUse count()\n\n\n\ngss_sm |&gt; \n  count(bigregion, religion) \n\n# A tibble: 24 × 3\n   bigregion religion       n\n   &lt;fct&gt;     &lt;fct&gt;      &lt;int&gt;\n 1 Northeast Protestant   158\n 2 Northeast Catholic     162\n 3 Northeast Jewish        27\n 4 Northeast None         112\n 5 Northeast Other         28\n 6 Northeast &lt;NA&gt;           1\n 7 Midwest   Protestant   325\n 8 Midwest   Catholic     172\n 9 Midwest   Jewish         3\n10 Midwest   None         157\n# ℹ 14 more rows\n\n\n\n\nOne step; result is not grouped."
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#pass-results-on-to-a-table",
    "href": "slides/03a-dplyr-basics.html#pass-results-on-to-a-table",
    "title": "Manipulating tables with dplyr",
    "section": "Pass results on to … a table",
    "text": "Pass results on to … a table\n\ngss_sm |&gt; \n  count(bigregion, religion) |&gt; \n  pivot_wider(names_from = bigregion, values_from = n) |&gt;  \n  knitr::kable()  \n\n\n\n\n\n\nreligion\nNortheast\nMidwest\nSouth\nWest\n\n\n\n\nProtestant\n158\n325\n650\n238\n\n\nCatholic\n162\n172\n160\n155\n\n\nJewish\n27\n3\n11\n10\n\n\nNone\n112\n157\n170\n180\n\n\nOther\n28\n33\n50\n48\n\n\nNA\n1\n5\n11\n1\n\n\n\n\n\n\nMore on pivot_wider() and kable() soon …"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#pass-results-on-to-a-graph",
    "href": "slides/03a-dplyr-basics.html#pass-results-on-to-a-graph",
    "title": "Manipulating tables with dplyr",
    "section": "Pass results on to … a graph",
    "text": "Pass results on to … a graph\n\ngss_sm |&gt; \n  group_by(bigregion, religion) |&gt; \n  tally() |&gt; \n  mutate(pct = round((n/sum(n))*100), 1) |&gt; \n  drop_na() |&gt; \n  ggplot(mapping = aes(x = pct, y = reorder(religion, -pct), fill = religion)) + \n  geom_col() + \n    labs(x = \"Percent\", y = NULL) +\n    guides(fill = \"none\") + \n    facet_wrap(~ bigregion, nrow = 1)"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#pass-results-on-to-an-object",
    "href": "slides/03a-dplyr-basics.html#pass-results-on-to-an-object",
    "title": "Manipulating tables with dplyr",
    "section": "Pass results on to … an object",
    "text": "Pass results on to … an object\n\n\n\nYou can do it like this …\n\n\nrel_by_region &lt;- gss_sm |&gt; \n  count(bigregion, religion) |&gt; \n  mutate(pct = round((n/sum(n))*100, 1)) \n\nrel_by_region\n\n# A tibble: 24 × 4\n   bigregion religion       n   pct\n   &lt;fct&gt;     &lt;fct&gt;      &lt;int&gt; &lt;dbl&gt;\n 1 Northeast Protestant   158   5.5\n 2 Northeast Catholic     162   5.7\n 3 Northeast Jewish        27   0.9\n 4 Northeast None         112   3.9\n 5 Northeast Other         28   1  \n 6 Northeast &lt;NA&gt;           1   0  \n 7 Midwest   Protestant   325  11.3\n 8 Midwest   Catholic     172   6  \n 9 Midwest   Jewish         3   0.1\n10 Midwest   None         157   5.5\n# ℹ 14 more rows"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#pass-results-on-to-an-object-1",
    "href": "slides/03a-dplyr-basics.html#pass-results-on-to-an-object-1",
    "title": "Manipulating tables with dplyr",
    "section": "Pass results on to … an object",
    "text": "Pass results on to … an object\n\n\n\nYou can do it like this …\n\n\nrel_by_region &lt;- gss_sm |&gt; \n  count(bigregion, religion) |&gt; \n  mutate(pct = round((n/sum(n))*100, 1)) \n\nrel_by_region\n\n# A tibble: 24 × 4\n   bigregion religion       n   pct\n   &lt;fct&gt;     &lt;fct&gt;      &lt;int&gt; &lt;dbl&gt;\n 1 Northeast Protestant   158   5.5\n 2 Northeast Catholic     162   5.7\n 3 Northeast Jewish        27   0.9\n 4 Northeast None         112   3.9\n 5 Northeast Other         28   1  \n 6 Northeast &lt;NA&gt;           1   0  \n 7 Midwest   Protestant   325  11.3\n 8 Midwest   Catholic     172   6  \n 9 Midwest   Jewish         3   0.1\n10 Midwest   None         157   5.5\n# ℹ 14 more rows\n\n\n\n\nOr like this!\n\n\ngss_sm |&gt; \n  count(bigregion, religion) |&gt; \n  mutate(pct = round((n/sum(n))*100, 1)) -&gt; \nrel_by_region \n\nrel_by_region\n\n# A tibble: 24 × 4\n   bigregion religion       n   pct\n   &lt;fct&gt;     &lt;fct&gt;      &lt;int&gt; &lt;dbl&gt;\n 1 Northeast Protestant   158   5.5\n 2 Northeast Catholic     162   5.7\n 3 Northeast Jewish        27   0.9\n 4 Northeast None         112   3.9\n 5 Northeast Other         28   1  \n 6 Northeast &lt;NA&gt;           1   0  \n 7 Midwest   Protestant   325  11.3\n 8 Midwest   Catholic     172   6  \n 9 Midwest   Jewish         3   0.1\n10 Midwest   None         157   5.5\n# ℹ 14 more rows"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#right-assignmment-is-a-thing-like-left",
    "href": "slides/03a-dplyr-basics.html#right-assignmment-is-a-thing-like-left",
    "title": "Manipulating tables with dplyr",
    "section": "Right assignmment is a thing, like Left",
    "text": "Right assignmment is a thing, like Left\n\n\n\nLeft assignment is standard\n\n\ngss_tab &lt;- gss_sm |&gt; \n  count(bigregion, religion) \n\n\nThis may feel awkward with a pipe: “gss_tab gets the output of the following pipeline.”\n\n\n\nRight assignment also works!\n\n\ngss_sm |&gt; \n  count(bigregion, religion) -&gt; gss_tab  \n\n\nWithout any authority, I assert that right-assignment should be read as, e.g., “This pipeline begets gss_tab”"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#check-by-summarizing",
    "href": "slides/03a-dplyr-basics.html#check-by-summarizing",
    "title": "Manipulating tables with dplyr",
    "section": "Check by summarizing",
    "text": "Check by summarizing\n\n\n\nrel_by_region &lt;- gss_sm |&gt; \n  count(bigregion, religion) |&gt; \n  mutate(pct = round((n/sum(n))*100, 1)) \n\nrel_by_region\n\n# A tibble: 24 × 4\n   bigregion religion       n   pct\n   &lt;fct&gt;     &lt;fct&gt;      &lt;int&gt; &lt;dbl&gt;\n 1 Northeast Protestant   158   5.5\n 2 Northeast Catholic     162   5.7\n 3 Northeast Jewish        27   0.9\n 4 Northeast None         112   3.9\n 5 Northeast Other         28   1  \n 6 Northeast &lt;NA&gt;           1   0  \n 7 Midwest   Protestant   325  11.3\n 8 Midwest   Catholic     172   6  \n 9 Midwest   Jewish         3   0.1\n10 Midwest   None         157   5.5\n# ℹ 14 more rows\n\n\nHm, did I sum over right group?"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#check-by-summarizing-1",
    "href": "slides/03a-dplyr-basics.html#check-by-summarizing-1",
    "title": "Manipulating tables with dplyr",
    "section": "Check by summarizing",
    "text": "Check by summarizing\n\n\n\nrel_by_region &lt;- gss_sm |&gt; \n  count(bigregion, religion) |&gt; \n  mutate(pct = round((n/sum(n))*100, 1)) \n\nrel_by_region\n\n# A tibble: 24 × 4\n   bigregion religion       n   pct\n   &lt;fct&gt;     &lt;fct&gt;      &lt;int&gt; &lt;dbl&gt;\n 1 Northeast Protestant   158   5.5\n 2 Northeast Catholic     162   5.7\n 3 Northeast Jewish        27   0.9\n 4 Northeast None         112   3.9\n 5 Northeast Other         28   1  \n 6 Northeast &lt;NA&gt;           1   0  \n 7 Midwest   Protestant   325  11.3\n 8 Midwest   Catholic     172   6  \n 9 Midwest   Jewish         3   0.1\n10 Midwest   None         157   5.5\n# ℹ 14 more rows\n\n\nHm, did I sum over right group?\n\n\n## Each region should sum to ~100\nrel_by_region |&gt; \n  group_by(bigregion) |&gt; \n  summarize(total = sum(pct)) \n\n# A tibble: 4 × 2\n  bigregion total\n  &lt;fct&gt;     &lt;dbl&gt;\n1 Northeast  17  \n2 Midwest    24.3\n3 South      36.7\n4 West       22  \n\n\nNo! What has gone wrong here?"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#check-by-summarizing-2",
    "href": "slides/03a-dplyr-basics.html#check-by-summarizing-2",
    "title": "Manipulating tables with dplyr",
    "section": "Check by summarizing",
    "text": "Check by summarizing\n\n\n\nrel_by_region &lt;- gss_sm |&gt; \n  count(bigregion, religion) |&gt; \n  mutate(pct = round((n/sum(n))*100, 1)) \n\n\ncount() returns ungrouped results, so there are no groups carry forward to the mutate() step.\n\n\nrel_by_region |&gt; \n  summarize(total = sum(pct))\n\n# A tibble: 1 × 1\n  total\n  &lt;dbl&gt;\n1   100\n\n\n\nWith count(), the pct values here are the marginals for the whole table."
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#check-by-summarizing-3",
    "href": "slides/03a-dplyr-basics.html#check-by-summarizing-3",
    "title": "Manipulating tables with dplyr",
    "section": "Check by summarizing",
    "text": "Check by summarizing\n\n\n\nrel_by_region &lt;- gss_sm |&gt; \n  count(bigregion, religion) |&gt; \n  mutate(pct = round((n/sum(n))*100, 1)) \n\n\ncount() returns ungrouped results, so there are no groups carry forward to the mutate() step.\n\n\nrel_by_region |&gt; \n  summarize(total = sum(pct))\n\n# A tibble: 1 × 1\n  total\n  &lt;dbl&gt;\n1   100\n\n\n\nWith count(), the pct values here are the marginals for the whole table.\n\n\n\nrel_by_region &lt;- gss_sm |&gt; \n  group_by(bigregion, religion) |&gt; \n  tally() |&gt; \n  mutate(pct = round((n/sum(n))*100, 1)) \n\n\n# Check\nrel_by_region |&gt; \n  group_by(bigregion) |&gt; \n  summarize(total = sum(pct))\n\n# A tibble: 4 × 2\n  bigregion total\n  &lt;fct&gt;     &lt;dbl&gt;\n1 Northeast 100  \n2 Midwest    99.9\n3 South     100  \n4 West      100. \n\n\n\nWe get some rounding error because we used round() after summing originally."
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#two-lessons",
    "href": "slides/03a-dplyr-basics.html#two-lessons",
    "title": "Manipulating tables with dplyr",
    "section": "Two lessons",
    "text": "Two lessons\nCheck your tables!\n\n\nPipelines feed their content forward, so you need to make sure your results are not incorrect.\nOften, complex tables and graphs can be disturbingly plausible even when wrong.\nSo, figure out what the result should be and test it!\nStarting with simple or toy cases can help with this process."
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#two-lessons-1",
    "href": "slides/03a-dplyr-basics.html#two-lessons-1",
    "title": "Manipulating tables with dplyr",
    "section": "Two lessons",
    "text": "Two lessons\nInspect your pipes!\n\n\nUnderstand pipelines by running them forward or peeling them back a step at a time.\nThis is a very effective way to understand your own and other people’s code."
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#following-a-pipeline",
    "href": "slides/03a-dplyr-basics.html#following-a-pipeline",
    "title": "Manipulating tables with dplyr",
    "section": "Following a pipeline",
    "text": "Following a pipeline\n\ngss_sm |&gt; \n  group_by(race, sex, degree) |&gt; \n  summarize(n = n(), \n            mean_age = mean(age, na.rm = TRUE), \n            mean_kids = mean(childs, na.rm = TRUE)) |&gt; \n  mutate(pct = n/sum(n)*100) |&gt; \n  filter(race !=\"Other\") |&gt; \n  drop_na() |&gt; \n  ggplot(mapping = aes(x = mean_kids, y = degree)) + # Some ggplot ...\n  geom_col() + facet_grid(sex ~ race) + \n  labs(x = \"Average number of Children\", y = NULL)"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#following-a-pipeline-1",
    "href": "slides/03a-dplyr-basics.html#following-a-pipeline-1",
    "title": "Manipulating tables with dplyr",
    "section": "Following a pipeline",
    "text": "Following a pipeline\n\n\n\ngss_sm\n\n\n\n\n# A tibble: 2,867 × 32\n    year    id ballot       age childs sibs   degree race  sex   region income16\n   &lt;dbl&gt; &lt;dbl&gt; &lt;labelled&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;labe&gt; &lt;fct&gt;  &lt;fct&gt; &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;   \n 1  2016     1 1             47      3 2      Bache… White Male  New E… $170000…\n 2  2016     2 2             61      0 3      High … White Male  New E… $50000 …\n 3  2016     3 3             72      2 3      Bache… White Male  New E… $75000 …\n 4  2016     4 1             43      4 3      High … White Fema… New E… $170000…\n 5  2016     5 3             55      2 2      Gradu… White Fema… New E… $170000…\n 6  2016     6 2             53      2 2      Junio… White Fema… New E… $60000 …\n 7  2016     7 1             50      2 2      High … White Male  New E… $170000…\n 8  2016     8 3             23      3 6      High … Other Fema… Middl… $30000 …\n 9  2016     9 1             45      3 5      High … Black Male  Middl… $60000 …\n10  2016    10 3             71      4 1      Junio… White Male  Middl… $60000 …\n# ℹ 2,857 more rows\n# ℹ 21 more variables: relig &lt;fct&gt;, marital &lt;fct&gt;, padeg &lt;fct&gt;, madeg &lt;fct&gt;,\n#   partyid &lt;fct&gt;, polviews &lt;fct&gt;, happy &lt;fct&gt;, partners &lt;fct&gt;, grass &lt;fct&gt;,\n#   zodiac &lt;fct&gt;, pres12 &lt;labelled&gt;, wtssall &lt;dbl&gt;, income_rc &lt;fct&gt;,\n#   agegrp &lt;fct&gt;, ageq &lt;fct&gt;, siblings &lt;fct&gt;, kids &lt;fct&gt;, religion &lt;fct&gt;,\n#   bigregion &lt;fct&gt;, partners_rc &lt;fct&gt;, obama &lt;dbl&gt;"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#following-a-pipeline-2",
    "href": "slides/03a-dplyr-basics.html#following-a-pipeline-2",
    "title": "Manipulating tables with dplyr",
    "section": "Following a pipeline",
    "text": "Following a pipeline\n\n\n\ngss_sm |&gt;\n  group_by(race, sex, degree)\n\n\n\n\n# A tibble: 2,867 × 32\n# Groups:   race, sex, degree [34]\n    year    id ballot       age childs sibs   degree race  sex   region income16\n   &lt;dbl&gt; &lt;dbl&gt; &lt;labelled&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;labe&gt; &lt;fct&gt;  &lt;fct&gt; &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;   \n 1  2016     1 1             47      3 2      Bache… White Male  New E… $170000…\n 2  2016     2 2             61      0 3      High … White Male  New E… $50000 …\n 3  2016     3 3             72      2 3      Bache… White Male  New E… $75000 …\n 4  2016     4 1             43      4 3      High … White Fema… New E… $170000…\n 5  2016     5 3             55      2 2      Gradu… White Fema… New E… $170000…\n 6  2016     6 2             53      2 2      Junio… White Fema… New E… $60000 …\n 7  2016     7 1             50      2 2      High … White Male  New E… $170000…\n 8  2016     8 3             23      3 6      High … Other Fema… Middl… $30000 …\n 9  2016     9 1             45      3 5      High … Black Male  Middl… $60000 …\n10  2016    10 3             71      4 1      Junio… White Male  Middl… $60000 …\n# ℹ 2,857 more rows\n# ℹ 21 more variables: relig &lt;fct&gt;, marital &lt;fct&gt;, padeg &lt;fct&gt;, madeg &lt;fct&gt;,\n#   partyid &lt;fct&gt;, polviews &lt;fct&gt;, happy &lt;fct&gt;, partners &lt;fct&gt;, grass &lt;fct&gt;,\n#   zodiac &lt;fct&gt;, pres12 &lt;labelled&gt;, wtssall &lt;dbl&gt;, income_rc &lt;fct&gt;,\n#   agegrp &lt;fct&gt;, ageq &lt;fct&gt;, siblings &lt;fct&gt;, kids &lt;fct&gt;, religion &lt;fct&gt;,\n#   bigregion &lt;fct&gt;, partners_rc &lt;fct&gt;, obama &lt;dbl&gt;"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#following-a-pipeline-3",
    "href": "slides/03a-dplyr-basics.html#following-a-pipeline-3",
    "title": "Manipulating tables with dplyr",
    "section": "Following a pipeline",
    "text": "Following a pipeline\n\n\n\ngss_sm |&gt;\n  group_by(race, sex, degree) |&gt;\n  summarize(n = n(),\n    mean_age = mean(age, na.rm = TRUE),\n    mean_kids = mean(childs, na.rm = TRUE))\n\n\n\n\n# A tibble: 34 × 6\n# Groups:   race, sex [6]\n   race  sex    degree             n mean_age mean_kids\n   &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;          &lt;int&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 White Male   Lt High School    96     52.9      2.45\n 2 White Male   High School      470     48.8      1.61\n 3 White Male   Junior College    65     47.1      1.54\n 4 White Male   Bachelor         208     48.6      1.35\n 5 White Male   Graduate         112     56.0      1.71\n 6 White Female Lt High School   101     55.4      2.81\n 7 White Female High School      587     51.9      1.98\n 8 White Female Junior College   101     48.2      1.91\n 9 White Female Bachelor         218     49.2      1.44\n10 White Female Graduate         138     53.6      1.38\n# ℹ 24 more rows"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#following-a-pipeline-4",
    "href": "slides/03a-dplyr-basics.html#following-a-pipeline-4",
    "title": "Manipulating tables with dplyr",
    "section": "Following a pipeline",
    "text": "Following a pipeline\n\n\n\ngss_sm |&gt;\n  group_by(race, sex, degree) |&gt;\n  summarize(n = n(),\n    mean_age = mean(age, na.rm = TRUE),\n    mean_kids = mean(childs, na.rm = TRUE)) |&gt;\n  mutate(pct = n/sum(n)*100)\n\n\n\n\n# A tibble: 34 × 7\n# Groups:   race, sex [6]\n   race  sex    degree             n mean_age mean_kids   pct\n   &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;          &lt;int&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;\n 1 White Male   Lt High School    96     52.9      2.45 10.1 \n 2 White Male   High School      470     48.8      1.61 49.4 \n 3 White Male   Junior College    65     47.1      1.54  6.83\n 4 White Male   Bachelor         208     48.6      1.35 21.9 \n 5 White Male   Graduate         112     56.0      1.71 11.8 \n 6 White Female Lt High School   101     55.4      2.81  8.79\n 7 White Female High School      587     51.9      1.98 51.1 \n 8 White Female Junior College   101     48.2      1.91  8.79\n 9 White Female Bachelor         218     49.2      1.44 19.0 \n10 White Female Graduate         138     53.6      1.38 12.0 \n# ℹ 24 more rows"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#following-a-pipeline-5",
    "href": "slides/03a-dplyr-basics.html#following-a-pipeline-5",
    "title": "Manipulating tables with dplyr",
    "section": "Following a pipeline",
    "text": "Following a pipeline\n\n\n\ngss_sm |&gt;\n  group_by(race, sex, degree) |&gt;\n  summarize(n = n(),\n    mean_age = mean(age, na.rm = TRUE),\n    mean_kids = mean(childs, na.rm = TRUE)) |&gt;\n  mutate(pct = n/sum(n)*100) |&gt;\n  filter(race !=\"Other\")\n\n\n\n\n# A tibble: 23 × 7\n# Groups:   race, sex [4]\n   race  sex    degree             n mean_age mean_kids   pct\n   &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;          &lt;int&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;\n 1 White Male   Lt High School    96     52.9      2.45 10.1 \n 2 White Male   High School      470     48.8      1.61 49.4 \n 3 White Male   Junior College    65     47.1      1.54  6.83\n 4 White Male   Bachelor         208     48.6      1.35 21.9 \n 5 White Male   Graduate         112     56.0      1.71 11.8 \n 6 White Female Lt High School   101     55.4      2.81  8.79\n 7 White Female High School      587     51.9      1.98 51.1 \n 8 White Female Junior College   101     48.2      1.91  8.79\n 9 White Female Bachelor         218     49.2      1.44 19.0 \n10 White Female Graduate         138     53.6      1.38 12.0 \n# ℹ 13 more rows"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#following-a-pipeline-6",
    "href": "slides/03a-dplyr-basics.html#following-a-pipeline-6",
    "title": "Manipulating tables with dplyr",
    "section": "Following a pipeline",
    "text": "Following a pipeline\n\n\n\ngss_sm |&gt;\n  group_by(race, sex, degree) |&gt;\n  summarize(n = n(),\n    mean_age = mean(age, na.rm = TRUE),\n    mean_kids = mean(childs, na.rm = TRUE)) |&gt;\n  mutate(pct = n/sum(n)*100) |&gt;\n  filter(race !=\"Other\") |&gt;\n  drop_na()\n\n\n\n\n# A tibble: 20 × 7\n# Groups:   race, sex [4]\n   race  sex    degree             n mean_age mean_kids   pct\n   &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;          &lt;int&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;\n 1 White Male   Lt High School    96     52.9      2.45 10.1 \n 2 White Male   High School      470     48.8      1.61 49.4 \n 3 White Male   Junior College    65     47.1      1.54  6.83\n 4 White Male   Bachelor         208     48.6      1.35 21.9 \n 5 White Male   Graduate         112     56.0      1.71 11.8 \n 6 White Female Lt High School   101     55.4      2.81  8.79\n 7 White Female High School      587     51.9      1.98 51.1 \n 8 White Female Junior College   101     48.2      1.91  8.79\n 9 White Female Bachelor         218     49.2      1.44 19.0 \n10 White Female Graduate         138     53.6      1.38 12.0 \n11 Black Male   Lt High School    17     56.1      3     8.21\n12 Black Male   High School      142     43.6      1.96 68.6 \n13 Black Male   Junior College    16     47.1      1.31  7.73\n14 Black Male   Bachelor          22     41.6      1.14 10.6 \n15 Black Male   Graduate           8     53.1      1.88  3.86\n16 Black Female Lt High School    43     51.0      2.91 15.2 \n17 Black Female High School      150     43.1      2.14 53.0 \n18 Black Female Junior College    17     45.8      1.82  6.01\n19 Black Female Bachelor          49     47.0      1.76 17.3 \n20 Black Female Graduate          23     51.2      1.74  8.13"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#following-a-pipeline-7",
    "href": "slides/03a-dplyr-basics.html#following-a-pipeline-7",
    "title": "Manipulating tables with dplyr",
    "section": "Following a pipeline",
    "text": "Following a pipeline\n\n\n\ngss_sm |&gt;\n  group_by(race, sex, degree) |&gt;\n  summarize(n = n(),\n    mean_age = mean(age, na.rm = TRUE),\n    mean_kids = mean(childs, na.rm = TRUE)) |&gt;\n  mutate(pct = n/sum(n)*100) |&gt;\n  filter(race !=\"Other\") |&gt;\n  drop_na() |&gt;\n  summarize(grp_totpct = sum(pct))\n\n\n\n\n# A tibble: 4 × 3\n# Groups:   race [2]\n  race  sex    grp_totpct\n  &lt;fct&gt; &lt;fct&gt;       &lt;dbl&gt;\n1 White Male        100  \n2 White Female       99.7\n3 Black Male         99.0\n4 Black Female       99.6"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#conditionals-in-select-filter",
    "href": "slides/03a-dplyr-basics.html#conditionals-in-select-filter",
    "title": "Manipulating tables with dplyr",
    "section": "Conditionals in select() & filter()",
    "text": "Conditionals in select() & filter()\n\nSome new data, this time on national rates of cadaveric organ donation:\n\n\n# library(socviz)\norgandata\n\n# A tibble: 238 × 21\n   country   year       donors   pop pop_dens   gdp gdp_lag health health_lag\n   &lt;chr&gt;     &lt;date&gt;      &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;int&gt;   &lt;int&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n 1 Australia NA          NA    17065    0.220 16774   16591   1300       1224\n 2 Australia 1991-01-01  12.1  17284    0.223 17171   16774   1379       1300\n 3 Australia 1992-01-01  12.4  17495    0.226 17914   17171   1455       1379\n 4 Australia 1993-01-01  12.5  17667    0.228 18883   17914   1540       1455\n 5 Australia 1994-01-01  10.2  17855    0.231 19849   18883   1626       1540\n 6 Australia 1995-01-01  10.2  18072    0.233 21079   19849   1737       1626\n 7 Australia 1996-01-01  10.6  18311    0.237 21923   21079   1846       1737\n 8 Australia 1997-01-01  10.3  18518    0.239 22961   21923   1948       1846\n 9 Australia 1998-01-01  10.5  18711    0.242 24148   22961   2077       1948\n10 Australia 1999-01-01   8.67 18926    0.244 25445   24148   2231       2077\n# ℹ 228 more rows\n# ℹ 12 more variables: pubhealth &lt;dbl&gt;, roads &lt;dbl&gt;, cerebvas &lt;int&gt;,\n#   assault &lt;int&gt;, external &lt;int&gt;, txp_pop &lt;dbl&gt;, world &lt;chr&gt;, opt &lt;chr&gt;,\n#   consent_law &lt;chr&gt;, consent_practice &lt;chr&gt;, consistent &lt;chr&gt;, ccode &lt;chr&gt;"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#conditionals-in-select-filter-1",
    "href": "slides/03a-dplyr-basics.html#conditionals-in-select-filter-1",
    "title": "Manipulating tables with dplyr",
    "section": "Conditionals in select() & filter()",
    "text": "Conditionals in select() & filter()\n\norgandata |&gt; \n  filter(consent_law == \"Informed\" & donors &gt; 15) \n\n# A tibble: 30 × 21\n   country year       donors   pop pop_dens   gdp gdp_lag health health_lag\n   &lt;chr&gt;   &lt;date&gt;      &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;int&gt;   &lt;int&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n 1 Canada  2000-01-01   15.3 30770    0.309 28472   26658   2541       2400\n 2 Denmark 1992-01-01   16.1  5171   12.0   19644   19126   1660       1603\n 3 Ireland 1991-01-01   19    3534    5.03  13495   12917    884        791\n 4 Ireland 1992-01-01   19.5  3558    5.06  14241   13495   1005        884\n 5 Ireland 1993-01-01   17.1  3576    5.09  14927   14241   1041       1005\n 6 Ireland 1994-01-01   20.3  3590    5.11  15990   14927   1119       1041\n 7 Ireland 1995-01-01   24.6  3609    5.14  17789   15990   1208       1119\n 8 Ireland 1996-01-01   16.8  3636    5.17  19245   17789   1269       1208\n 9 Ireland 1997-01-01   20.9  3673    5.23  22017   19245   1417       1269\n10 Ireland 1998-01-01   23.8  3715    5.29  23995   22017   1487       1417\n# ℹ 20 more rows\n# ℹ 12 more variables: pubhealth &lt;dbl&gt;, roads &lt;dbl&gt;, cerebvas &lt;int&gt;,\n#   assault &lt;int&gt;, external &lt;int&gt;, txp_pop &lt;dbl&gt;, world &lt;chr&gt;, opt &lt;chr&gt;,\n#   consent_law &lt;chr&gt;, consent_practice &lt;chr&gt;, consistent &lt;chr&gt;, ccode &lt;chr&gt;"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#conditionals-in-select-filter-2",
    "href": "slides/03a-dplyr-basics.html#conditionals-in-select-filter-2",
    "title": "Manipulating tables with dplyr",
    "section": "Conditionals in select() & filter()",
    "text": "Conditionals in select() & filter()\n\norgandata |&gt; \n  select(country, year, where(is.integer)) \n\n# A tibble: 238 × 8\n   country   year         pop   gdp gdp_lag cerebvas assault external\n   &lt;chr&gt;     &lt;date&gt;     &lt;int&gt; &lt;int&gt;   &lt;int&gt;    &lt;int&gt;   &lt;int&gt;    &lt;int&gt;\n 1 Australia NA         17065 16774   16591      682      21      444\n 2 Australia 1991-01-01 17284 17171   16774      647      19      425\n 3 Australia 1992-01-01 17495 17914   17171      630      17      406\n 4 Australia 1993-01-01 17667 18883   17914      611      18      376\n 5 Australia 1994-01-01 17855 19849   18883      631      17      387\n 6 Australia 1995-01-01 18072 21079   19849      592      16      371\n 7 Australia 1996-01-01 18311 21923   21079      576      17      395\n 8 Australia 1997-01-01 18518 22961   21923      525      17      385\n 9 Australia 1998-01-01 18711 24148   22961      516      16      410\n10 Australia 1999-01-01 18926 25445   24148      493      15      409\n# ℹ 228 more rows\n\n\nUse where() to test columns."
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#conditionals-in-select-filter-3",
    "href": "slides/03a-dplyr-basics.html#conditionals-in-select-filter-3",
    "title": "Manipulating tables with dplyr",
    "section": "Conditionals in select() & filter()",
    "text": "Conditionals in select() & filter()\nWhen telling where() to use is.integer() to test each column, we don’t put parentheses at the end of its name. If we did, R would try to evaluate is.integer() right then, and fail:\n&gt; organdata |&gt; \n+   select(country, year, where(is.integer()))\nError: 0 arguments passed to 'is.integer' which requires 1\nRun `rlang::last_error()` to see where the error occurred.\nThis is true in similar situations elsewhere as well."
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#conditionals-in-select-filter-4",
    "href": "slides/03a-dplyr-basics.html#conditionals-in-select-filter-4",
    "title": "Manipulating tables with dplyr",
    "section": "Conditionals in select() & filter()",
    "text": "Conditionals in select() & filter()\n\norgandata |&gt; \n  select(country, year, where(is.character))\n\n# A tibble: 238 × 8\n   country  year       world opt   consent_law consent_practice consistent ccode\n   &lt;chr&gt;    &lt;date&gt;     &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt;            &lt;chr&gt;      &lt;chr&gt;\n 1 Austral… NA         Libe… In    Informed    Informed         Yes        Oz   \n 2 Austral… 1991-01-01 Libe… In    Informed    Informed         Yes        Oz   \n 3 Austral… 1992-01-01 Libe… In    Informed    Informed         Yes        Oz   \n 4 Austral… 1993-01-01 Libe… In    Informed    Informed         Yes        Oz   \n 5 Austral… 1994-01-01 Libe… In    Informed    Informed         Yes        Oz   \n 6 Austral… 1995-01-01 Libe… In    Informed    Informed         Yes        Oz   \n 7 Austral… 1996-01-01 Libe… In    Informed    Informed         Yes        Oz   \n 8 Austral… 1997-01-01 Libe… In    Informed    Informed         Yes        Oz   \n 9 Austral… 1998-01-01 Libe… In    Informed    Informed         Yes        Oz   \n10 Austral… 1999-01-01 Libe… In    Informed    Informed         Yes        Oz   \n# ℹ 228 more rows\n\n\nWe have functions like e.g. is.character(), is.numeric(), is.logical(), is.factor(), etc. All return either TRUE or FALSE."
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#conditionals-in-select-filter-5",
    "href": "slides/03a-dplyr-basics.html#conditionals-in-select-filter-5",
    "title": "Manipulating tables with dplyr",
    "section": "Conditionals in select() & filter()",
    "text": "Conditionals in select() & filter()\nSometimes we don’t pass a function, but do want to use the result of one:\n\norgandata |&gt; \n  select(country, year, starts_with(\"gdp\")) \n\n# A tibble: 238 × 4\n   country   year         gdp gdp_lag\n   &lt;chr&gt;     &lt;date&gt;     &lt;int&gt;   &lt;int&gt;\n 1 Australia NA         16774   16591\n 2 Australia 1991-01-01 17171   16774\n 3 Australia 1992-01-01 17914   17171\n 4 Australia 1993-01-01 18883   17914\n 5 Australia 1994-01-01 19849   18883\n 6 Australia 1995-01-01 21079   19849\n 7 Australia 1996-01-01 21923   21079\n 8 Australia 1997-01-01 22961   21923\n 9 Australia 1998-01-01 24148   22961\n10 Australia 1999-01-01 25445   24148\n# ℹ 228 more rows\n\n\n\nWe have starts_with(), ends_with(), contains(), matches(), and num_range(). Collectively these are “tidy selectors”."
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#conditionals-in-select-filter-6",
    "href": "slides/03a-dplyr-basics.html#conditionals-in-select-filter-6",
    "title": "Manipulating tables with dplyr",
    "section": "Conditionals in select() & filter()",
    "text": "Conditionals in select() & filter()\n\norgandata |&gt; \n  filter(country == \"Australia\" | country == \"Canada\") \n\n# A tibble: 28 × 21\n   country   year       donors   pop pop_dens   gdp gdp_lag health health_lag\n   &lt;chr&gt;     &lt;date&gt;      &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;int&gt;   &lt;int&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n 1 Australia NA          NA    17065    0.220 16774   16591   1300       1224\n 2 Australia 1991-01-01  12.1  17284    0.223 17171   16774   1379       1300\n 3 Australia 1992-01-01  12.4  17495    0.226 17914   17171   1455       1379\n 4 Australia 1993-01-01  12.5  17667    0.228 18883   17914   1540       1455\n 5 Australia 1994-01-01  10.2  17855    0.231 19849   18883   1626       1540\n 6 Australia 1995-01-01  10.2  18072    0.233 21079   19849   1737       1626\n 7 Australia 1996-01-01  10.6  18311    0.237 21923   21079   1846       1737\n 8 Australia 1997-01-01  10.3  18518    0.239 22961   21923   1948       1846\n 9 Australia 1998-01-01  10.5  18711    0.242 24148   22961   2077       1948\n10 Australia 1999-01-01   8.67 18926    0.244 25445   24148   2231       2077\n# ℹ 18 more rows\n# ℹ 12 more variables: pubhealth &lt;dbl&gt;, roads &lt;dbl&gt;, cerebvas &lt;int&gt;,\n#   assault &lt;int&gt;, external &lt;int&gt;, txp_pop &lt;dbl&gt;, world &lt;chr&gt;, opt &lt;chr&gt;,\n#   consent_law &lt;chr&gt;, consent_practice &lt;chr&gt;, consistent &lt;chr&gt;, ccode &lt;chr&gt;\n\n\nThis could get cumbersome fast."
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#use-in-for-multiple-selections",
    "href": "slides/03a-dplyr-basics.html#use-in-for-multiple-selections",
    "title": "Manipulating tables with dplyr",
    "section": "Use %in% for multiple selections",
    "text": "Use %in% for multiple selections\n\nmy_countries &lt;- c(\"Australia\", \"Canada\", \"United States\", \"Ireland\")\n\norgandata |&gt; \n  filter(country %in% my_countries) \n\n# A tibble: 56 × 21\n   country   year       donors   pop pop_dens   gdp gdp_lag health health_lag\n   &lt;chr&gt;     &lt;date&gt;      &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;int&gt;   &lt;int&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n 1 Australia NA          NA    17065    0.220 16774   16591   1300       1224\n 2 Australia 1991-01-01  12.1  17284    0.223 17171   16774   1379       1300\n 3 Australia 1992-01-01  12.4  17495    0.226 17914   17171   1455       1379\n 4 Australia 1993-01-01  12.5  17667    0.228 18883   17914   1540       1455\n 5 Australia 1994-01-01  10.2  17855    0.231 19849   18883   1626       1540\n 6 Australia 1995-01-01  10.2  18072    0.233 21079   19849   1737       1626\n 7 Australia 1996-01-01  10.6  18311    0.237 21923   21079   1846       1737\n 8 Australia 1997-01-01  10.3  18518    0.239 22961   21923   1948       1846\n 9 Australia 1998-01-01  10.5  18711    0.242 24148   22961   2077       1948\n10 Australia 1999-01-01   8.67 18926    0.244 25445   24148   2231       2077\n# ℹ 46 more rows\n# ℹ 12 more variables: pubhealth &lt;dbl&gt;, roads &lt;dbl&gt;, cerebvas &lt;int&gt;,\n#   assault &lt;int&gt;, external &lt;int&gt;, txp_pop &lt;dbl&gt;, world &lt;chr&gt;, opt &lt;chr&gt;,\n#   consent_law &lt;chr&gt;, consent_practice &lt;chr&gt;, consistent &lt;chr&gt;, ccode &lt;chr&gt;"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#negating-in",
    "href": "slides/03a-dplyr-basics.html#negating-in",
    "title": "Manipulating tables with dplyr",
    "section": "Negating %in%",
    "text": "Negating %in%\n\nmy_countries &lt;- c(\"Australia\", \"Canada\", \"United States\", \"Ireland\")\n\norgandata |&gt; \n  filter(!(country %in% my_countries)) \n\n# A tibble: 182 × 21\n   country year       donors   pop pop_dens   gdp gdp_lag health health_lag\n   &lt;chr&gt;   &lt;date&gt;      &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;int&gt;   &lt;int&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n 1 Austria NA           NA    7678     9.16 18914   17425   1344       1255\n 2 Austria 1991-01-01   27.6  7755     9.25 19860   18914   1419       1344\n 3 Austria 1992-01-01   23.1  7841     9.35 20601   19860   1551       1419\n 4 Austria 1993-01-01   26.2  7906     9.43 21119   20601   1674       1551\n 5 Austria 1994-01-01   21.4  7936     9.46 21940   21119   1739       1674\n 6 Austria 1995-01-01   21.5  7948     9.48 22817   21940   1865       1739\n 7 Austria 1996-01-01   24.7  7959     9.49 23798   22817   1986       1865\n 8 Austria 1997-01-01   19.5  7968     9.50 24364   23798   1848       1986\n 9 Austria 1998-01-01   20.7  7977     9.51 25423   24364   1953       1848\n10 Austria 1999-01-01   25.9  7992     9.53 26513   25423   2069       1953\n# ℹ 172 more rows\n# ℹ 12 more variables: pubhealth &lt;dbl&gt;, roads &lt;dbl&gt;, cerebvas &lt;int&gt;,\n#   assault &lt;int&gt;, external &lt;int&gt;, txp_pop &lt;dbl&gt;, world &lt;chr&gt;, opt &lt;chr&gt;,\n#   consent_law &lt;chr&gt;, consent_practice &lt;chr&gt;, consistent &lt;chr&gt;, ccode &lt;chr&gt;\n\n\nAlso a bit awkward. There’s no built-in “Not in” operator."
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#a-custom-operator",
    "href": "slides/03a-dplyr-basics.html#a-custom-operator",
    "title": "Manipulating tables with dplyr",
    "section": "A custom operator",
    "text": "A custom operator\n\n`%nin%` &lt;- Negate(`%in%`) # this operator is included in the socviz package\n\n\n\norgandata |&gt; \n  filter(country %nin% my_countries) \n\n# A tibble: 182 × 21\n   country year       donors   pop pop_dens   gdp gdp_lag health health_lag\n   &lt;chr&gt;   &lt;date&gt;      &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;int&gt;   &lt;int&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n 1 Austria NA           NA    7678     9.16 18914   17425   1344       1255\n 2 Austria 1991-01-01   27.6  7755     9.25 19860   18914   1419       1344\n 3 Austria 1992-01-01   23.1  7841     9.35 20601   19860   1551       1419\n 4 Austria 1993-01-01   26.2  7906     9.43 21119   20601   1674       1551\n 5 Austria 1994-01-01   21.4  7936     9.46 21940   21119   1739       1674\n 6 Austria 1995-01-01   21.5  7948     9.48 22817   21940   1865       1739\n 7 Austria 1996-01-01   24.7  7959     9.49 23798   22817   1986       1865\n 8 Austria 1997-01-01   19.5  7968     9.50 24364   23798   1848       1986\n 9 Austria 1998-01-01   20.7  7977     9.51 25423   24364   1953       1848\n10 Austria 1999-01-01   25.9  7992     9.53 26513   25423   2069       1953\n# ℹ 172 more rows\n# ℹ 12 more variables: pubhealth &lt;dbl&gt;, roads &lt;dbl&gt;, cerebvas &lt;int&gt;,\n#   assault &lt;int&gt;, external &lt;int&gt;, txp_pop &lt;dbl&gt;, world &lt;chr&gt;, opt &lt;chr&gt;,\n#   consent_law &lt;chr&gt;, consent_practice &lt;chr&gt;, consistent &lt;chr&gt;, ccode &lt;chr&gt;\n\n\n\nThe backticks are special here because we need to name an operator."
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#do-more-than-one-thing",
    "href": "slides/03a-dplyr-basics.html#do-more-than-one-thing",
    "title": "Manipulating tables with dplyr",
    "section": "Do more than one thing",
    "text": "Do more than one thing\nEarlier we saw this:\n\ngss_sm |&gt; \n  group_by(race, sex, degree) |&gt; \n  summarize(n = n(), \n            mean_age = mean(age, na.rm = TRUE), \n            mean_kids = mean(childs, na.rm = TRUE))\n\n# A tibble: 34 × 6\n# Groups:   race, sex [6]\n   race  sex    degree             n mean_age mean_kids\n   &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;          &lt;int&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 White Male   Lt High School    96     52.9      2.45\n 2 White Male   High School      470     48.8      1.61\n 3 White Male   Junior College    65     47.1      1.54\n 4 White Male   Bachelor         208     48.6      1.35\n 5 White Male   Graduate         112     56.0      1.71\n 6 White Female Lt High School   101     55.4      2.81\n 7 White Female High School      587     51.9      1.98\n 8 White Female Junior College   101     48.2      1.91\n 9 White Female Bachelor         218     49.2      1.44\n10 White Female Graduate         138     53.6      1.38\n# ℹ 24 more rows"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#do-more-than-one-thing-1",
    "href": "slides/03a-dplyr-basics.html#do-more-than-one-thing-1",
    "title": "Manipulating tables with dplyr",
    "section": "Do more than one thing",
    "text": "Do more than one thing\nSimilarly for organdata we might want to do:\n\norgandata |&gt;  \n  group_by(consent_law, country) |&gt;\n  summarize(donors_mean = mean(donors, na.rm = TRUE),\n            donors_sd = sd(donors, na.rm = TRUE),\n            gdp_mean = mean(gdp, na.rm = TRUE),\n            health_mean = mean(health, na.rm = TRUE),\n            roads_mean = mean(roads, na.rm = TRUE))\n\n# A tibble: 17 × 7\n# Groups:   consent_law [2]\n   consent_law country     donors_mean donors_sd gdp_mean health_mean roads_mean\n   &lt;chr&gt;       &lt;chr&gt;             &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;\n 1 Informed    Australia          10.6     1.14    22179.       1958.      105. \n 2 Informed    Canada             14.0     0.751   23711.       2272.      109. \n 3 Informed    Denmark            13.1     1.47    23722.       2054.      102. \n 4 Informed    Germany            13.0     0.611   22163.       2349.      113. \n 5 Informed    Ireland            19.8     2.48    20824.       1480.      118. \n 6 Informed    Netherlands        13.7     1.55    23013.       1993.       76.1\n 7 Informed    United Kin…        13.5     0.775   21359.       1561.       67.9\n 8 Informed    United Sta…        20.0     1.33    29212.       3988.      155. \n 9 Presumed    Austria            23.5     2.42    23876.       1875.      150. \n10 Presumed    Belgium            21.9     1.94    22500.       1958.      155. \n11 Presumed    Finland            18.4     1.53    21019.       1615.       93.6\n12 Presumed    France             16.8     1.60    22603.       2160.      156. \n13 Presumed    Italy              11.1     4.28    21554.       1757       122. \n14 Presumed    Norway             15.4     1.11    26448.       2217.       70.0\n15 Presumed    Spain              28.1     4.96    16933        1289.      161. \n16 Presumed    Sweden             13.1     1.75    22415.       1951.       72.3\n17 Presumed    Switzerland        14.2     1.71    27233        2776.       96.4\n\n\nThis works, but it’s really tedious. Also error-prone."
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#use-across",
    "href": "slides/03a-dplyr-basics.html#use-across",
    "title": "Manipulating tables with dplyr",
    "section": "Use across()",
    "text": "Use across()\nInstead, use across() to apply a function to more than one column.\n\nmy_vars &lt;- c(\"gdp\", \"donors\", \"roads\")\n\n## nested parens again, but it's worth it\norgandata |&gt; \n  group_by(consent_law, country) |&gt;\n  summarize(across(all_of(my_vars),           \n                   list(avg = \\(x) mean(x, na.rm = TRUE))\n                  )\n           )     \n\n# A tibble: 17 × 5\n# Groups:   consent_law [2]\n   consent_law country        gdp_avg donors_avg roads_avg\n   &lt;chr&gt;       &lt;chr&gt;            &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;\n 1 Informed    Australia       22179.       10.6     105. \n 2 Informed    Canada          23711.       14.0     109. \n 3 Informed    Denmark         23722.       13.1     102. \n 4 Informed    Germany         22163.       13.0     113. \n 5 Informed    Ireland         20824.       19.8     118. \n 6 Informed    Netherlands     23013.       13.7      76.1\n 7 Informed    United Kingdom  21359.       13.5      67.9\n 8 Informed    United States   29212.       20.0     155. \n 9 Presumed    Austria         23876.       23.5     150. \n10 Presumed    Belgium         22500.       21.9     155. \n11 Presumed    Finland         21019.       18.4      93.6\n12 Presumed    France          22603.       16.8     156. \n13 Presumed    Italy           21554.       11.1     122. \n14 Presumed    Norway          26448.       15.4      70.0\n15 Presumed    Spain           16933        28.1     161. \n16 Presumed    Sweden          22415.       13.1      72.3\n17 Presumed    Switzerland     27233        14.2      96.4"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#lets-look-at-that-again",
    "href": "slides/03a-dplyr-basics.html#lets-look-at-that-again",
    "title": "Manipulating tables with dplyr",
    "section": "Let’s look at that again",
    "text": "Let’s look at that again\n\n\n\nmy_vars &lt;- c(\"gdp\", \"donors\", \"roads\")"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#lets-look-at-that-again-1",
    "href": "slides/03a-dplyr-basics.html#lets-look-at-that-again-1",
    "title": "Manipulating tables with dplyr",
    "section": "Let’s look at that again",
    "text": "Let’s look at that again\n\n\n\nmy_vars &lt;- c(\"gdp\", \"donors\", \"roads\")\n\n## nested parens again, but it's worth it\norgandata\n\n\n\n\n# A tibble: 238 × 21\n   country   year       donors   pop pop_dens   gdp gdp_lag health health_lag\n   &lt;chr&gt;     &lt;date&gt;      &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;int&gt;   &lt;int&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n 1 Australia NA          NA    17065    0.220 16774   16591   1300       1224\n 2 Australia 1991-01-01  12.1  17284    0.223 17171   16774   1379       1300\n 3 Australia 1992-01-01  12.4  17495    0.226 17914   17171   1455       1379\n 4 Australia 1993-01-01  12.5  17667    0.228 18883   17914   1540       1455\n 5 Australia 1994-01-01  10.2  17855    0.231 19849   18883   1626       1540\n 6 Australia 1995-01-01  10.2  18072    0.233 21079   19849   1737       1626\n 7 Australia 1996-01-01  10.6  18311    0.237 21923   21079   1846       1737\n 8 Australia 1997-01-01  10.3  18518    0.239 22961   21923   1948       1846\n 9 Australia 1998-01-01  10.5  18711    0.242 24148   22961   2077       1948\n10 Australia 1999-01-01   8.67 18926    0.244 25445   24148   2231       2077\n# ℹ 228 more rows\n# ℹ 12 more variables: pubhealth &lt;dbl&gt;, roads &lt;dbl&gt;, cerebvas &lt;int&gt;,\n#   assault &lt;int&gt;, external &lt;int&gt;, txp_pop &lt;dbl&gt;, world &lt;chr&gt;, opt &lt;chr&gt;,\n#   consent_law &lt;chr&gt;, consent_practice &lt;chr&gt;, consistent &lt;chr&gt;, ccode &lt;chr&gt;"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#lets-look-at-that-again-2",
    "href": "slides/03a-dplyr-basics.html#lets-look-at-that-again-2",
    "title": "Manipulating tables with dplyr",
    "section": "Let’s look at that again",
    "text": "Let’s look at that again\n\n\n\nmy_vars &lt;- c(\"gdp\", \"donors\", \"roads\")\n\n## nested parens again, but it's worth it\norgandata |&gt;\n  group_by(consent_law, country)\n\n\n\n\n# A tibble: 238 × 21\n# Groups:   consent_law, country [17]\n   country   year       donors   pop pop_dens   gdp gdp_lag health health_lag\n   &lt;chr&gt;     &lt;date&gt;      &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;int&gt;   &lt;int&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n 1 Australia NA          NA    17065    0.220 16774   16591   1300       1224\n 2 Australia 1991-01-01  12.1  17284    0.223 17171   16774   1379       1300\n 3 Australia 1992-01-01  12.4  17495    0.226 17914   17171   1455       1379\n 4 Australia 1993-01-01  12.5  17667    0.228 18883   17914   1540       1455\n 5 Australia 1994-01-01  10.2  17855    0.231 19849   18883   1626       1540\n 6 Australia 1995-01-01  10.2  18072    0.233 21079   19849   1737       1626\n 7 Australia 1996-01-01  10.6  18311    0.237 21923   21079   1846       1737\n 8 Australia 1997-01-01  10.3  18518    0.239 22961   21923   1948       1846\n 9 Australia 1998-01-01  10.5  18711    0.242 24148   22961   2077       1948\n10 Australia 1999-01-01   8.67 18926    0.244 25445   24148   2231       2077\n# ℹ 228 more rows\n# ℹ 12 more variables: pubhealth &lt;dbl&gt;, roads &lt;dbl&gt;, cerebvas &lt;int&gt;,\n#   assault &lt;int&gt;, external &lt;int&gt;, txp_pop &lt;dbl&gt;, world &lt;chr&gt;, opt &lt;chr&gt;,\n#   consent_law &lt;chr&gt;, consent_practice &lt;chr&gt;, consistent &lt;chr&gt;, ccode &lt;chr&gt;"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#lets-look-at-that-again-3",
    "href": "slides/03a-dplyr-basics.html#lets-look-at-that-again-3",
    "title": "Manipulating tables with dplyr",
    "section": "Let’s look at that again",
    "text": "Let’s look at that again\n\n\n\nmy_vars &lt;- c(\"gdp\", \"donors\", \"roads\")\n\n## nested parens again, but it's worth it\norgandata |&gt;\n  group_by(consent_law, country) |&gt;\n  summarize(across(all_of(my_vars),\n                   list(avg = \\(x) mean(x, na.rm = TRUE))\n                  )\n           )\n\n\n\n\n# A tibble: 17 × 5\n# Groups:   consent_law [2]\n   consent_law country        gdp_avg donors_avg roads_avg\n   &lt;chr&gt;       &lt;chr&gt;            &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;\n 1 Informed    Australia       22179.       10.6     105. \n 2 Informed    Canada          23711.       14.0     109. \n 3 Informed    Denmark         23722.       13.1     102. \n 4 Informed    Germany         22163.       13.0     113. \n 5 Informed    Ireland         20824.       19.8     118. \n 6 Informed    Netherlands     23013.       13.7      76.1\n 7 Informed    United Kingdom  21359.       13.5      67.9\n 8 Informed    United States   29212.       20.0     155. \n 9 Presumed    Austria         23876.       23.5     150. \n10 Presumed    Belgium         22500.       21.9     155. \n11 Presumed    Finland         21019.       18.4      93.6\n12 Presumed    France          22603.       16.8     156. \n13 Presumed    Italy           21554.       11.1     122. \n14 Presumed    Norway          26448.       15.4      70.0\n15 Presumed    Spain           16933        28.1     161. \n16 Presumed    Sweden          22415.       13.1      72.3\n17 Presumed    Switzerland     27233        14.2      96.4\n\n\n\n\n\nmy_vars are selected by across()\nWe use all_of() or any_of() to be explicit\nlist() of the form result = function gives the new columns that will be calculated.\nThe thing inside the list is an anonymous function with the “waving person”"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#we-can-calculate-more-than-one-thing",
    "href": "slides/03a-dplyr-basics.html#we-can-calculate-more-than-one-thing",
    "title": "Manipulating tables with dplyr",
    "section": "We can calculate more than one thing",
    "text": "We can calculate more than one thing\n\nmy_vars &lt;- c(\"gdp\", \"donors\", \"roads\")\n\norgandata |&gt; \n  group_by(consent_law, country) |&gt;\n  summarize(across(all_of(my_vars),           \n                   list(avg = \\(x) mean(x, na.rm = TRUE), \n                        sd = \\(x) var(x, na.rm = TRUE), \n                        md = \\(x) median(x, na.rm = TRUE)) \n                  )\n           )\n\n# A tibble: 17 × 11\n# Groups:   consent_law [2]\n   consent_law country      gdp_avg gdp_sd gdp_md donors_avg donors_sd donors_md\n   &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt;  &lt;dbl&gt;  &lt;int&gt;      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1 Informed    Australia     22179. 1.57e7  21923       10.6     1.31       10.4\n 2 Informed    Canada        23711. 1.57e7  22764       14.0     0.564      14.0\n 3 Informed    Denmark       23722. 1.52e7  23548       13.1     2.16       12.9\n 4 Informed    Germany       22163. 6.26e6  22164       13.0     0.374      13  \n 5 Informed    Ireland       20824. 4.45e7  19245       19.8     6.14       19.2\n 6 Informed    Netherlands   23013. 1.42e7  22541       13.7     2.41       13.8\n 7 Informed    United King…  21359. 1.54e7  20839       13.5     0.601      13.5\n 8 Informed    United Stat…  29212. 2.09e7  28772       20.0     1.76       20.1\n 9 Presumed    Austria       23876. 1.12e7  23798       23.5     5.84       23.8\n10 Presumed    Belgium       22500. 1.01e7  22152       21.9     3.75       21.4\n11 Presumed    Finland       21019. 1.35e7  19842       18.4     2.33       19.4\n12 Presumed    France        22603. 1.06e7  21990       16.8     2.55       16.6\n13 Presumed    Italy         21554. 7.74e6  21396       11.1    18.3        11.3\n14 Presumed    Norway        26448. 4.21e7  26218       15.4     1.23       15.4\n15 Presumed    Spain         16933  8.34e6  16416       28.1    24.6        28  \n16 Presumed    Sweden        22415. 1.03e7  22029       13.1     3.07       12.7\n17 Presumed    Switzerland   27233  4.64e6  26304       14.2     2.92       14.4\n# ℹ 3 more variables: roads_avg &lt;dbl&gt;, roads_sd &lt;dbl&gt;, roads_md &lt;dbl&gt;"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#its-ok-to-use-the-function-names",
    "href": "slides/03a-dplyr-basics.html#its-ok-to-use-the-function-names",
    "title": "Manipulating tables with dplyr",
    "section": "It’s OK to use the function names",
    "text": "It’s OK to use the function names\n\nmy_vars &lt;- c(\"gdp\", \"donors\", \"roads\")\n\norgandata |&gt; \n  group_by(consent_law, country) |&gt;\n  summarize(across(all_of(my_vars),           \n                   list(mean = \\(x) mean(x, na.rm = TRUE), \n                        var = \\(x) var(x, na.rm = TRUE), \n                        median = \\(x) median(x, na.rm = TRUE)) \n                  )\n           )\n\n# A tibble: 17 × 11\n# Groups:   consent_law [2]\n   consent_law country        gdp_mean gdp_var gdp_median donors_mean donors_var\n   &lt;chr&gt;       &lt;chr&gt;             &lt;dbl&gt;   &lt;dbl&gt;      &lt;int&gt;       &lt;dbl&gt;      &lt;dbl&gt;\n 1 Informed    Australia        22179.  1.57e7      21923        10.6      1.31 \n 2 Informed    Canada           23711.  1.57e7      22764        14.0      0.564\n 3 Informed    Denmark          23722.  1.52e7      23548        13.1      2.16 \n 4 Informed    Germany          22163.  6.26e6      22164        13.0      0.374\n 5 Informed    Ireland          20824.  4.45e7      19245        19.8      6.14 \n 6 Informed    Netherlands      23013.  1.42e7      22541        13.7      2.41 \n 7 Informed    United Kingdom   21359.  1.54e7      20839        13.5      0.601\n 8 Informed    United States    29212.  2.09e7      28772        20.0      1.76 \n 9 Presumed    Austria          23876.  1.12e7      23798        23.5      5.84 \n10 Presumed    Belgium          22500.  1.01e7      22152        21.9      3.75 \n11 Presumed    Finland          21019.  1.35e7      19842        18.4      2.33 \n12 Presumed    France           22603.  1.06e7      21990        16.8      2.55 \n13 Presumed    Italy            21554.  7.74e6      21396        11.1     18.3  \n14 Presumed    Norway           26448.  4.21e7      26218        15.4      1.23 \n15 Presumed    Spain            16933   8.34e6      16416        28.1     24.6  \n16 Presumed    Sweden           22415.  1.03e7      22029        13.1      3.07 \n17 Presumed    Switzerland      27233   4.64e6      26304        14.2      2.92 \n# ℹ 4 more variables: donors_median &lt;dbl&gt;, roads_mean &lt;dbl&gt;, roads_var &lt;dbl&gt;,\n#   roads_median &lt;dbl&gt;"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#selection-with-acrosswhere",
    "href": "slides/03a-dplyr-basics.html#selection-with-acrosswhere",
    "title": "Manipulating tables with dplyr",
    "section": "Selection with across(where())",
    "text": "Selection with across(where())\n\norgandata |&gt; \n  group_by(consent_law, country) |&gt;\n  summarize(across(where(is.numeric),           \n                   list(mean = \\(x) mean(x, na.rm = TRUE), \n                        var = \\(x) var(x, na.rm = TRUE), \n                        median = \\(x) median(x, na.rm = TRUE)) \n                  )\n           ) |&gt; \n    print(n = 3) # just to save slide space\n\n# A tibble: 17 × 41\n# Groups:   consent_law [2]\n  consent_law country   donors_mean donors_var donors_median pop_mean  pop_var\n  &lt;chr&gt;       &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n1 Informed    Australia        10.6      1.31           10.4   18318.  690385.\n2 Informed    Canada           14.0      0.564          14.0   29608. 1422648.\n3 Informed    Denmark          13.1      2.16           12.9    5257.    6497.\n# ℹ 14 more rows\n# ℹ 34 more variables: pop_median &lt;int&gt;, pop_dens_mean &lt;dbl&gt;,\n#   pop_dens_var &lt;dbl&gt;, pop_dens_median &lt;dbl&gt;, gdp_mean &lt;dbl&gt;, gdp_var &lt;dbl&gt;,\n#   gdp_median &lt;int&gt;, gdp_lag_mean &lt;dbl&gt;, gdp_lag_var &lt;dbl&gt;,\n#   gdp_lag_median &lt;dbl&gt;, health_mean &lt;dbl&gt;, health_var &lt;dbl&gt;,\n#   health_median &lt;dbl&gt;, health_lag_mean &lt;dbl&gt;, health_lag_var &lt;dbl&gt;,\n#   health_lag_median &lt;dbl&gt;, pubhealth_mean &lt;dbl&gt;, pubhealth_var &lt;dbl&gt;, …"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#name-new-columns-with-.names",
    "href": "slides/03a-dplyr-basics.html#name-new-columns-with-.names",
    "title": "Manipulating tables with dplyr",
    "section": "Name new columns with .names",
    "text": "Name new columns with .names\n\norgandata |&gt; \n  group_by(consent_law, country) |&gt;\n  summarize(across(where(is.numeric),           \n                   list(mean = \\(x) mean(x, na.rm = TRUE), \n                        var = \\(x) var(x, na.rm = TRUE), \n                        median = \\(x) median(x, na.rm = TRUE)) \n                  ),\n            .names = \"{fn}_{col}\") |&gt; \n  print(n = 3) \n\n# A tibble: 17 × 42\n# Groups:   consent_law [2]\n  consent_law country   donors_mean donors_var donors_median pop_mean  pop_var\n  &lt;chr&gt;       &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n1 Informed    Australia        10.6      1.31           10.4   18318.  690385.\n2 Informed    Canada           14.0      0.564          14.0   29608. 1422648.\n3 Informed    Denmark          13.1      2.16           12.9    5257.    6497.\n# ℹ 14 more rows\n# ℹ 35 more variables: pop_median &lt;int&gt;, pop_dens_mean &lt;dbl&gt;,\n#   pop_dens_var &lt;dbl&gt;, pop_dens_median &lt;dbl&gt;, gdp_mean &lt;dbl&gt;, gdp_var &lt;dbl&gt;,\n#   gdp_median &lt;int&gt;, gdp_lag_mean &lt;dbl&gt;, gdp_lag_var &lt;dbl&gt;,\n#   gdp_lag_median &lt;dbl&gt;, health_mean &lt;dbl&gt;, health_var &lt;dbl&gt;,\n#   health_median &lt;dbl&gt;, health_lag_mean &lt;dbl&gt;, health_lag_var &lt;dbl&gt;,\n#   health_lag_median &lt;dbl&gt;, pubhealth_mean &lt;dbl&gt;, pubhealth_var &lt;dbl&gt;, …"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#name-new-columns-with-.names-1",
    "href": "slides/03a-dplyr-basics.html#name-new-columns-with-.names-1",
    "title": "Manipulating tables with dplyr",
    "section": "Name new columns with .names",
    "text": "Name new columns with .names\nIn tidyverse functions, arguments that begin with a “.” generally have it in order to avoid confusion with existing items, or are “pronouns” referring to e.g. “the name of the thing we’re currently talking about as we evaluate this function”."
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#this-all-works-with-mutate-too",
    "href": "slides/03a-dplyr-basics.html#this-all-works-with-mutate-too",
    "title": "Manipulating tables with dplyr",
    "section": "This all works with mutate(), too",
    "text": "This all works with mutate(), too\n\norgandata |&gt; \n  mutate(across(where(is.character), toupper)) |&gt; \n  select(where(is.character))\n\n# A tibble: 238 × 7\n   country   world   opt   consent_law consent_practice consistent ccode\n   &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt;            &lt;chr&gt;      &lt;chr&gt;\n 1 AUSTRALIA LIBERAL IN    INFORMED    INFORMED         YES        OZ   \n 2 AUSTRALIA LIBERAL IN    INFORMED    INFORMED         YES        OZ   \n 3 AUSTRALIA LIBERAL IN    INFORMED    INFORMED         YES        OZ   \n 4 AUSTRALIA LIBERAL IN    INFORMED    INFORMED         YES        OZ   \n 5 AUSTRALIA LIBERAL IN    INFORMED    INFORMED         YES        OZ   \n 6 AUSTRALIA LIBERAL IN    INFORMED    INFORMED         YES        OZ   \n 7 AUSTRALIA LIBERAL IN    INFORMED    INFORMED         YES        OZ   \n 8 AUSTRALIA LIBERAL IN    INFORMED    INFORMED         YES        OZ   \n 9 AUSTRALIA LIBERAL IN    INFORMED    INFORMED         YES        OZ   \n10 AUSTRALIA LIBERAL IN    INFORMED    INFORMED         YES        OZ   \n# ℹ 228 more rows"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#arrange-rows-and-columns",
    "href": "slides/03a-dplyr-basics.html#arrange-rows-and-columns",
    "title": "Manipulating tables with dplyr",
    "section": "Arrange rows and columns",
    "text": "Arrange rows and columns\nSort rows with arrange()\n\n\n\norgandata |&gt; \n  group_by(consent_law, country) |&gt;\n  summarize(donors = mean(donors, na.rm = TRUE)) |&gt; \n  arrange(donors) |&gt; ##&lt;\n  print(n = 5)\n\n# A tibble: 17 × 3\n# Groups:   consent_law [2]\n  consent_law country   donors\n  &lt;chr&gt;       &lt;chr&gt;      &lt;dbl&gt;\n1 Informed    Australia   10.6\n2 Presumed    Italy       11.1\n3 Informed    Germany     13.0\n4 Informed    Denmark     13.1\n5 Presumed    Sweden      13.1\n# ℹ 12 more rows"
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#arrange-rows-and-columns-1",
    "href": "slides/03a-dplyr-basics.html#arrange-rows-and-columns-1",
    "title": "Manipulating tables with dplyr",
    "section": "Arrange rows and columns",
    "text": "Arrange rows and columns\nSort rows with arrange()\n\n\n\norgandata |&gt; \n  group_by(consent_law, country) |&gt;\n  summarize(donors = mean(donors, na.rm = TRUE)) |&gt; \n  arrange(donors) |&gt; ##&lt;\n  print(n = 5)\n\n# A tibble: 17 × 3\n# Groups:   consent_law [2]\n  consent_law country   donors\n  &lt;chr&gt;       &lt;chr&gt;      &lt;dbl&gt;\n1 Informed    Australia   10.6\n2 Presumed    Italy       11.1\n3 Informed    Germany     13.0\n4 Informed    Denmark     13.1\n5 Presumed    Sweden      13.1\n# ℹ 12 more rows\n\n\n\n\norgandata |&gt; \n  group_by(consent_law, country) |&gt;\n  summarize(donors = mean(donors, na.rm = TRUE)) |&gt; \n  arrange(desc(donors)) |&gt;  ##&lt;\n  print(n = 5)\n\n# A tibble: 17 × 3\n# Groups:   consent_law [2]\n  consent_law country       donors\n  &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt;\n1 Presumed    Spain           28.1\n2 Presumed    Austria         23.5\n3 Presumed    Belgium         21.9\n4 Informed    United States   20.0\n5 Informed    Ireland         19.8\n# ℹ 12 more rows\n\n\nUsing arrange() to order rows in this way won’t respect groupings."
  },
  {
    "objectID": "slides/03a-dplyr-basics.html#more-generally",
    "href": "slides/03a-dplyr-basics.html#more-generally",
    "title": "Manipulating tables with dplyr",
    "section": "More generally …",
    "text": "More generally …\n\norgandata |&gt; \n  group_by(consent_law, country) |&gt;\n  summarize(donors = mean(donors, na.rm = TRUE)) |&gt; \n  slice_max(donors, n = 5) \n\n# A tibble: 10 × 3\n# Groups:   consent_law [2]\n   consent_law country        donors\n   &lt;chr&gt;       &lt;chr&gt;           &lt;dbl&gt;\n 1 Informed    United States    20.0\n 2 Informed    Ireland          19.8\n 3 Informed    Canada           14.0\n 4 Informed    Netherlands      13.7\n 5 Informed    United Kingdom   13.5\n 6 Presumed    Spain            28.1\n 7 Presumed    Austria          23.5\n 8 Presumed    Belgium          21.9\n 9 Presumed    Finland          18.4\n10 Presumed    France           16.8\n\n\n\nYou can see that slice_max() respects grouping.\nThere’s slice_min(), slice_head(), slice_tail(), slice_sample(), and the most general one, slice()."
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#load-the-packages-as-always",
    "href": "slides/08-making-tidy-easier.html#load-the-packages-as-always",
    "title": "Making tidy easier",
    "section": "Load the packages, as always",
    "text": "Load the packages, as always\n\nlibrary(here)      # manage file paths\nlibrary(socviz)    # data and some useful functions\nlibrary(tidyverse) # your friend and mine\nlibrary(haven)     # for Stata, SAS, and SPSS files\n\nlibrary(broom)     # tidy model summaries"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#the-rstudio-community",
    "href": "slides/08-making-tidy-easier.html#the-rstudio-community",
    "title": "Making tidy easier",
    "section": "The RStudio Community",
    "text": "The RStudio Community"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#the-reprex-package",
    "href": "slides/08-making-tidy-easier.html#the-reprex-package",
    "title": "Making tidy easier",
    "section": "The reprex package",
    "text": "The reprex package"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#best-demonstrated-live",
    "href": "slides/08-making-tidy-easier.html#best-demonstrated-live",
    "title": "Making tidy easier",
    "section": "Best demonstrated live",
    "text": "Best demonstrated live\nWhen asking for help, make a reproducible example\n\nlibrary(reprex)\n\n\nlibrary(tidyverse)\n\nstarwars |&gt; \n  count(homeworld, species) |&gt; \n  mutate(pct = n / sum(n) * 100) |&gt; \n  arrange(desc(pct))\n\n# A tibble: 57 × 4\n   homeworld species      n   pct\n   &lt;chr&gt;     &lt;chr&gt;    &lt;int&gt; &lt;dbl&gt;\n 1 Tatooine  Human        8  9.20\n 2 &lt;NA&gt;      Human        6  6.90\n 3 Naboo     Human        5  5.75\n 4 Alderaan  Human        3  3.45\n 5 Naboo     Gungan       3  3.45\n 6 &lt;NA&gt;      Droid        3  3.45\n 7 Corellia  Human        2  2.30\n 8 Coruscant Human        2  2.30\n 9 Kamino    Kaminoan     2  2.30\n10 Kashyyyk  Wookiee      2  2.30\n# ℹ 47 more rows"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#the-usethis-package",
    "href": "slides/08-making-tidy-easier.html#the-usethis-package",
    "title": "Making tidy easier",
    "section": "The usethis package",
    "text": "The usethis package"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#quarto",
    "href": "slides/08-making-tidy-easier.html#quarto",
    "title": "Making tidy easier",
    "section": "Quarto",
    "text": "Quarto\n\n\n\n\n\nreligion\nNortheast\nMidwest\nSouth\nWest\n\n\n\n\nProtestant\n158\n325\n650\n238\n\n\nCatholic\n162\n172\n160\n155\n\n\nJewish\n27\n3\n11\n10\n\n\nNone\n112\n157\n170\n180\n\n\nOther\n28\n33\n50\n48\n\n\nNA\n1\n5\n11\n1"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#tables-tables-tables",
    "href": "slides/08-making-tidy-easier.html#tables-tables-tables",
    "title": "Making tidy easier",
    "section": "Tables, tables, tables",
    "text": "Tables, tables, tables\nThe gtsummary package is very powerful. There are a number of other very good tidy table-making options too.\n\nlibrary(gtsummary)\n\ntrial\n\n# A tibble: 200 × 8\n   trt      age marker stage grade response death ttdeath\n   &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt;    &lt;int&gt; &lt;int&gt;   &lt;dbl&gt;\n 1 Drug A    23  0.16  T1    II           0     0    24  \n 2 Drug B     9  1.11  T2    I            1     0    24  \n 3 Drug A    31  0.277 T1    II           0     0    24  \n 4 Drug A    NA  2.07  T3    III          1     1    17.6\n 5 Drug A    51  2.77  T4    III          1     1    16.4\n 6 Drug B    39  0.613 T4    I            0     1    15.6\n 7 Drug A    37  0.354 T1    II           0     0    24  \n 8 Drug A    32  1.74  T1    I            0     1    18.4\n 9 Drug A    31  0.144 T1    II           0     0    24  \n10 Drug B    34  0.205 T3    I            0     1    10.5\n# ℹ 190 more rows"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#tables-tables-tables-1",
    "href": "slides/08-making-tidy-easier.html#tables-tables-tables-1",
    "title": "Making tidy easier",
    "section": "Tables, tables, tables",
    "text": "Tables, tables, tables\nThe gtsummary package is very powerful. There are a number of other very good tidy table-making options too.\n\ntrial |&gt; \n  tbl_summary(\n    include = c(age, grade, response),\n    by = trt, # split table by group\n    missing = \"no\" # don't list missing data separately\n  ) |&gt;\n  add_n() |&gt; # add column with total number of non-missing observations\n  add_p()"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#tables-tables-tables-2",
    "href": "slides/08-making-tidy-easier.html#tables-tables-tables-2",
    "title": "Making tidy easier",
    "section": "Tables, tables, tables",
    "text": "Tables, tables, tables\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nN\nDrug A N = 981\nDrug B N = 1021\np-value\n\n\n\n\nAge\n189\n46 (37, 60)\n48 (39, 56)\n\n\n\n\nGrade\n200\n\n\n\n\n\n\n\n\n    I\n\n\n35 (36%)\n33 (32%)\n\n\n\n\n    II\n\n\n32 (33%)\n36 (35%)\n\n\n\n\n    III\n\n\n31 (32%)\n33 (32%)\n\n\n\n\nTumor Response\n193\n28 (29%)\n33 (34%)\n\n\n\n\n\n1 Median (Q1, Q3); n (%)"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#tables-tables-tables-3",
    "href": "slides/08-making-tidy-easier.html#tables-tables-tables-3",
    "title": "Making tidy easier",
    "section": "Tables, tables, tables",
    "text": "Tables, tables, tables\ngtsummary() straight out of the box:\n\ngss_sm |&gt; \n  select(race, degree, marital) |&gt; \n  drop_na() |&gt; \n  tbl_summary(\n    by = race, # split table by group\n    missing = \"no\" # don't list missing data separately\n  ) |&gt;\n  bold_labels()"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#tables-tables-tables-4",
    "href": "slides/08-making-tidy-easier.html#tables-tables-tables-4",
    "title": "Making tidy easier",
    "section": "Tables, tables, tables",
    "text": "Tables, tables, tables\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nWhite N = 2,0961\nBlack N = 4871\nOther N = 2761\n\n\n\n\ndegree\n\n\n\n\n\n\n\n\n    Lt High School\n197 (9.4%)\n60 (12%)\n71 (26%)\n\n\n    High School\n1,057 (50%)\n292 (60%)\n112 (41%)\n\n\n    Junior College\n166 (7.9%)\n33 (6.8%)\n17 (6.2%)\n\n\n    Bachelor\n426 (20%)\n71 (15%)\n39 (14%)\n\n\n    Graduate\n250 (12%)\n31 (6.4%)\n37 (13%)\n\n\nmarital\n\n\n\n\n\n\n\n\n    Married\n979 (47%)\n121 (25%)\n110 (40%)\n\n\n    Widowed\n196 (9.4%)\n35 (7.2%)\n18 (6.5%)\n\n\n    Divorced\n363 (17%)\n93 (19%)\n39 (14%)\n\n\n    Separated\n55 (2.6%)\n27 (5.5%)\n20 (7.2%)\n\n\n    Never Married\n503 (24%)\n211 (43%)\n89 (32%)\n\n\n\n1 n (%)"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#tables-tables-tables-5",
    "href": "slides/08-making-tidy-easier.html#tables-tables-tables-5",
    "title": "Making tidy easier",
    "section": "Tables, tables, tables",
    "text": "Tables, tables, tables\nWith a bit more work …\n\ntrial |&gt;\n  select(trt, age, marker) |&gt;\n  tbl_summary(\n    by = trt,\n    type = all_continuous() ~ \"continuous2\",\n    statistic = all_continuous() ~ c(\"{N_nonmiss}\",\n                                     \"{mean} ({sd})\", \n                                     \"{median} ({p25}, {p75})\", \n                                     \"{min}, {max}\"),\n    missing = \"no\") |&gt;\n  italicize_levels()"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#tables-tables-tables-6",
    "href": "slides/08-making-tidy-easier.html#tables-tables-tables-6",
    "title": "Making tidy easier",
    "section": "Tables, tables, tables",
    "text": "Tables, tables, tables\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nDrug A N = 98\nDrug B N = 102\n\n\n\n\nAge\n\n\n\n\n\n\n    N Non-missing\n91\n98\n\n\n    Mean (SD)\n47 (15)\n47 (14)\n\n\n    Median (Q1, Q3)\n46 (37, 60)\n48 (39, 56)\n\n\n    Min, Max\n6, 78\n9, 83\n\n\nMarker Level (ng/mL)\n\n\n\n\n\n\n    N Non-missing\n92\n98\n\n\n    Mean (SD)\n1.02 (0.89)\n0.82 (0.83)\n\n\n    Median (Q1, Q3)\n0.84 (0.23, 1.60)\n0.52 (0.18, 1.21)\n\n\n    Min, Max\n0.00, 3.87\n0.01, 3.64"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#the-power-of-lists",
    "href": "slides/08-making-tidy-easier.html#the-power-of-lists",
    "title": "Making tidy easier",
    "section": "The power of lists",
    "text": "The power of lists\nSimilar to earlier, but simpler:\n\nlibrary(gapminder)\n\n## Fit as a function, for clarity\nfit_ols &lt;- function(df) {\n    lm(lifeExp ~ log(gdpPercap), data = df)\n}\n\n\nout_le &lt;- gapminder |&gt;\n  filter(continent %nin% \"Oceania\") |&gt; \n  group_by(continent) |&gt;\n  nest() |&gt;\n  mutate(model = map(data, fit_ols),\n         mod_sum = map(model, glance),\n         mod_terms = map(model, tidy, conf.int = TRUE),\n         ) |&gt;\n  unnest(cols = c(mod_terms))"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#the-power-of-lists-1",
    "href": "slides/08-making-tidy-easier.html#the-power-of-lists-1",
    "title": "Making tidy easier",
    "section": "The power of lists",
    "text": "The power of lists\n\nout_le\n\n# A tibble: 8 × 11\n# Groups:   continent [4]\n  continent data     model mod_sum  term  estimate std.error statistic   p.value\n  &lt;fct&gt;     &lt;list&gt;   &lt;lis&gt; &lt;list&gt;   &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 Asia      &lt;tibble&gt; &lt;lm&gt;  &lt;tibble&gt; (Int…     9.58     2.71       3.54 4.46e-  4\n2 Asia      &lt;tibble&gt; &lt;lm&gt;  &lt;tibble&gt; log(…     6.25     0.331     18.9  3.73e- 57\n3 Europe    &lt;tibble&gt; &lt;lm&gt;  &lt;tibble&gt; (Int…    13.0      1.92       6.76 5.52e- 11\n4 Europe    &lt;tibble&gt; &lt;lm&gt;  &lt;tibble&gt; log(…     6.31     0.205     30.8  8.06e-103\n5 Africa    &lt;tibble&gt; &lt;lm&gt;  &lt;tibble&gt; (Int…     7.60     2.63       2.89 4.03e-  3\n6 Africa    &lt;tibble&gt; &lt;lm&gt;  &lt;tibble&gt; log(…     5.69     0.361     15.8  1.86e- 47\n7 Americas  &lt;tibble&gt; &lt;lm&gt;  &lt;tibble&gt; (Int…   -19.1      4.82      -3.95 9.65e-  5\n8 Americas  &lt;tibble&gt; &lt;lm&gt;  &lt;tibble&gt; log(…     9.72     0.558     17.4  2.51e- 47\n# ℹ 2 more variables: conf.low &lt;dbl&gt;, conf.high &lt;dbl&gt;"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#the-power-of-lists-2",
    "href": "slides/08-making-tidy-easier.html#the-power-of-lists-2",
    "title": "Making tidy easier",
    "section": "The power of lists",
    "text": "The power of lists\n\n## Nice formatting of the numbers\n## There are many convenience packages\n## like this; it's not too hard to write your own, either\n# remotes::install_github(\"tjmahr/printy\")\n\ntext_ready &lt;- out_le |&gt;\n  mutate(\n    across(c(estimate, conf.low, conf.high),\n           printy::fmt_fix_digits, 2),\n    se = printy::fmt_fix_digits(std.error, 3),\n    ci = glue::glue(\"[{conf.low}, {conf.high}]\")\n  ) |&gt;\n  select(continent, term, estimate, se, ci)\n\n\n\nThe printy package is by T.J. Mahr"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#the-power-of-lists-3",
    "href": "slides/08-making-tidy-easier.html#the-power-of-lists-3",
    "title": "Making tidy easier",
    "section": "The power of lists",
    "text": "The power of lists\n\ntext_ready\n\n# A tibble: 8 × 5\n# Groups:   continent [4]\n  continent term           estimate se    ci             \n  &lt;fct&gt;     &lt;chr&gt;          &lt;chr&gt;    &lt;chr&gt; &lt;glue&gt;         \n1 Asia      (Intercept)    9.58     2.706 [4.26, 14.90]  \n2 Asia      log(gdpPercap) 6.25     0.331 [5.60, 6.90]   \n3 Europe    (Intercept)    12.97    1.917 [9.19, 16.74]  \n4 Europe    log(gdpPercap) 6.31     0.205 [5.91, 6.71]   \n5 Africa    (Intercept)    7.60     2.632 [2.43, 12.77]  \n6 Africa    log(gdpPercap) 5.69     0.361 [4.98, 6.40]   \n7 Americas  (Intercept)    -19.07   4.824 [-28.56, -9.58]\n8 Americas  log(gdpPercap) 9.72     0.558 [8.62, 10.82]"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#the-power-of-lists-4",
    "href": "slides/08-making-tidy-easier.html#the-power-of-lists-4",
    "title": "Making tidy easier",
    "section": "The power of lists",
    "text": "The power of lists\nNow …\n\nstats &lt;- text_ready |&gt; \n  mutate(term = janitor::make_clean_names(term)) |&gt;\n  printy::super_split(continent, term) # Thanks again, TJ Mahr"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#the-power-of-lists-5",
    "href": "slides/08-making-tidy-easier.html#the-power-of-lists-5",
    "title": "Making tidy easier",
    "section": "The power of lists",
    "text": "The power of lists\nWhy are we doing this?\n\nstats\n\n$Africa\n$Africa$intercept\n# A tibble: 1 × 5\n# Groups:   continent [1]\n  continent term      estimate se    ci           \n  &lt;fct&gt;     &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt; &lt;glue&gt;       \n1 Africa    intercept 7.60     2.632 [2.43, 12.77]\n\n$Africa$log_gdp_percap\n# A tibble: 1 × 5\n# Groups:   continent [1]\n  continent term           estimate se    ci          \n  &lt;fct&gt;     &lt;chr&gt;          &lt;chr&gt;    &lt;chr&gt; &lt;glue&gt;      \n1 Africa    log_gdp_percap 5.69     0.361 [4.98, 6.40]\n\n\n$Americas\n$Americas$intercept\n# A tibble: 1 × 5\n# Groups:   continent [1]\n  continent term      estimate se    ci             \n  &lt;fct&gt;     &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt; &lt;glue&gt;         \n1 Americas  intercept -19.07   4.824 [-28.56, -9.58]\n\n$Americas$log_gdp_percap\n# A tibble: 1 × 5\n# Groups:   continent [1]\n  continent term           estimate se    ci           \n  &lt;fct&gt;     &lt;chr&gt;          &lt;chr&gt;    &lt;chr&gt; &lt;glue&gt;       \n1 Americas  log_gdp_percap 9.72     0.558 [8.62, 10.82]\n\n\n$Asia\n$Asia$intercept\n# A tibble: 1 × 5\n# Groups:   continent [1]\n  continent term      estimate se    ci           \n  &lt;fct&gt;     &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt; &lt;glue&gt;       \n1 Asia      intercept 9.58     2.706 [4.26, 14.90]\n\n$Asia$log_gdp_percap\n# A tibble: 1 × 5\n# Groups:   continent [1]\n  continent term           estimate se    ci          \n  &lt;fct&gt;     &lt;chr&gt;          &lt;chr&gt;    &lt;chr&gt; &lt;glue&gt;      \n1 Asia      log_gdp_percap 6.25     0.331 [5.60, 6.90]\n\n\n$Europe\n$Europe$intercept\n# A tibble: 1 × 5\n# Groups:   continent [1]\n  continent term      estimate se    ci           \n  &lt;fct&gt;     &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt; &lt;glue&gt;       \n1 Europe    intercept 12.97    1.917 [9.19, 16.74]\n\n$Europe$log_gdp_percap\n# A tibble: 1 × 5\n# Groups:   continent [1]\n  continent term           estimate se    ci          \n  &lt;fct&gt;     &lt;chr&gt;          &lt;chr&gt;    &lt;chr&gt; &lt;glue&gt;      \n1 Europe    log_gdp_percap 6.31     0.205 [5.91, 6.71]\n\n\n$Oceania\nnamed list()"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#the-power-of-lists-6",
    "href": "slides/08-making-tidy-easier.html#the-power-of-lists-6",
    "title": "Making tidy easier",
    "section": "The power of lists",
    "text": "The power of lists\nThe Intercept term for Africa was 'r stats$Africa$intercept$estimate' 'r stats$Africa$intercept$ci'. \n\nFor Europe it was 'r stats$Europe$intercept$estimate' 'r stats$Europe$intercept$ci'\n\nThe Intercept term for Africa was 7.60 [2.43, 12.77].\nFor Europe it was 12.97 [9.19, 16.74].\nFor more, see this post by TJ Mahr:\nhttps://www.tjmahr.com/lists-knitr-secret-weapon/"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#test-the-output-of-your-functions",
    "href": "slides/08-making-tidy-easier.html#test-the-output-of-your-functions",
    "title": "Making tidy easier",
    "section": "Test the output of your functions",
    "text": "Test the output of your functions\n\ncountries &lt;- read_csv(here(\"data\", \"countries.csv\"))\n\ncountries\n\n# A tibble: 213 × 4\n   cname       iso3  iso2  continent    \n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;        \n 1 Afghanistan AFG   AF    Asia         \n 2 Algeria     DZA   DZ    Africa       \n 3 Armenia     ARM   AM    Asia         \n 4 Australia   AUS   AU    Oceania      \n 5 Austria     AUT   AT    Europe       \n 6 Azerbaijan  AZE   AZ    Asia         \n 7 Bahrain     BHR   BH    Asia         \n 8 Belarus     BLR   BY    Europe       \n 9 Belgium     BEL   BE    Europe       \n10 Brazil      BRA   BR    South America\n# ℹ 203 more rows"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#test-the-output-of-your-functions-1",
    "href": "slides/08-making-tidy-easier.html#test-the-output-of-your-functions-1",
    "title": "Making tidy easier",
    "section": "Test the output of your functions",
    "text": "Test the output of your functions\n\nget_stmf &lt;- function(url = \"https://www.mortality.org/File/GetDocument/Public/STMF/Outputs\",\n                     fname = \"stmf\",\n                     date = lubridate::today(),\n                     ext = \"csv\",\n                     dest = \"data-raw/data\",\n                     save_file = c(\"n\", \"y\"),\n                     ...) {\n  save_file &lt;- match.arg(save_file)\n  target &lt;-  fs::path(url, fname, ext = ext)\n  message(\"target: \", target)\n\n  destination &lt;- fs::path(here::here(\"data-raw/data\"),\n                          paste0(fname, \"_\", date), ext = ext)\n\n  tf &lt;- tempfile(fileext = ext)\n  curl::curl_download(target, tf)\n\n  switch(save_file,\n         y = fs::file_copy(tf, destination),\n         n = NULL)\n\n  janitor::clean_names(read_csv(tf, ...))\n}"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#test-the-output-of-your-functions-2",
    "href": "slides/08-making-tidy-easier.html#test-the-output-of-your-functions-2",
    "title": "Making tidy easier",
    "section": "Test the output of your functions",
    "text": "Test the output of your functions\n\nstmf_raw &lt;- read_csv(here(\"data\", \"stmf.csv\"), skip = 2) |&gt;\n  janitor::clean_names() |&gt; \n  rename(deaths_total = d_total, rate_total = r_total) |&gt;\n  select(country_code:sex, deaths_total, rate_total, split:forecast, everything()) |&gt;\n  pivot_longer(\n    cols = d0_14:r85p,\n    names_to = c(\"measure\", \"age_group\"),\n    names_pattern = \"(r|d)(.*)\"\n  ) |&gt;\n  pivot_wider(names_from = measure,\n              values_from = value) |&gt;\n  mutate(age_group = str_replace(age_group, \"_\", \"-\"),\n         age_group = str_replace(age_group, \"p\", \"+\")) |&gt;\n  rename(death_count = d, death_rate = r) |&gt;\n  mutate(approx_date = paste0(year, \"-\", \"W\", \n                              str_pad(week, width = 2, pad = \"0\"), \"-\", \"7\"),\n         approx_date = ISOweek::ISOweek2date(approx_date)) |&gt;\n  select(country_code:sex, split:forecast, approx_date, \n         age_group:death_rate, deaths_total, rate_total) |&gt;\n  mutate(country_code = replace(country_code, country_code == \"AUS2\", \"AUS\"),\n         country_code = replace(country_code, country_code == \"NZL_NP\", \"NZL\"))"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#test-the-output-of-your-functions-3",
    "href": "slides/08-making-tidy-easier.html#test-the-output-of-your-functions-3",
    "title": "Making tidy easier",
    "section": "Test the output of your functions",
    "text": "Test the output of your functions\n\nstmf_raw\n\n# A tibble: 576,840 × 13\n   country_code  year  week sex   split split_sex forecast approx_date age_group\n   &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;    \n 1 AUS           2015     1 m         1         0        0 2015-01-04  0-14     \n 2 AUS           2015     1 m         1         0        0 2015-01-04  15-64    \n 3 AUS           2015     1 m         1         0        0 2015-01-04  65-74    \n 4 AUS           2015     1 m         1         0        0 2015-01-04  75-84    \n 5 AUS           2015     1 m         1         0        0 2015-01-04  85+      \n 6 AUS           2015     1 f         1         0        0 2015-01-04  0-14     \n 7 AUS           2015     1 f         1         0        0 2015-01-04  15-64    \n 8 AUS           2015     1 f         1         0        0 2015-01-04  65-74    \n 9 AUS           2015     1 f         1         0        0 2015-01-04  75-84    \n10 AUS           2015     1 f         1         0        0 2015-01-04  85+      \n# ℹ 576,830 more rows\n# ℹ 4 more variables: death_count &lt;dbl&gt;, death_rate &lt;dbl&gt;, deaths_total &lt;dbl&gt;,\n#   rate_total &lt;dbl&gt;"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#test-the-output-of-your-functions-4",
    "href": "slides/08-making-tidy-easier.html#test-the-output-of-your-functions-4",
    "title": "Making tidy easier",
    "section": "Test the output of your functions",
    "text": "Test the output of your functions\n\nmd_ccodes &lt;- tibble(country_code = unique(stmf_raw$country_code)) |&gt;\n  left_join(countries, by = c(\"country_code\" = \"iso3\")) |&gt;\n  mutate(cname = replace(cname, country_code == \"DEUTNP\", \"Germany\"),\n         iso2 = replace(iso2, country_code == \"DEUTNP\", \"DE\"),\n         continent = replace(continent, country_code == \"DEU\", \"Europe\"),\n         cname = replace(cname, country_code == \"FRATNP\", \"France\"),\n         iso2 = replace(iso2, country_code == \"FRATNP\", \"FR\"),\n         continent = replace(continent, country_code == \"FRA\", \"Europe\"),\n         cname = replace(cname, country_code == \"GBRTENW\", \"England and Wales\"),\n         cname = replace(cname, country_code == \"GBR_SCO\", \"Scotland\"),\n         cname = replace(cname, country_code == \"GBR_NIR\", \"Northern Ireland\"),\n         continent = replace(continent, country_code %in% c(\"GBRTENW\", \"GBR_SCO\", \"GBR_NIR\"), \"Europe\")\n         ) |&gt;\n  left_join(countries)\n\n\nstmf &lt;- left_join(stmf_raw, md_ccodes) |&gt;\n  select(country_code, cname:iso3, everything()) |&gt;\n  mutate(iso3 = replace(iso3, iso2 == \"DE\", \"DEU\"),\n         iso3 = replace(iso3, iso2 == \"FR\", \"FRA\"))"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#test-the-output-of-your-functions-5",
    "href": "slides/08-making-tidy-easier.html#test-the-output-of-your-functions-5",
    "title": "Making tidy easier",
    "section": "Test the output of your functions",
    "text": "Test the output of your functions\n\nstmf\n\n# A tibble: 576,840 × 17\n   country_code cname    iso2  continent iso3   year  week sex   split split_sex\n   &lt;chr&gt;        &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;     &lt;dbl&gt;\n 1 AUS          Austral… AU    Oceania   AUS    2015     1 m         1         0\n 2 AUS          Austral… AU    Oceania   AUS    2015     1 m         1         0\n 3 AUS          Austral… AU    Oceania   AUS    2015     1 m         1         0\n 4 AUS          Austral… AU    Oceania   AUS    2015     1 m         1         0\n 5 AUS          Austral… AU    Oceania   AUS    2015     1 m         1         0\n 6 AUS          Austral… AU    Oceania   AUS    2015     1 f         1         0\n 7 AUS          Austral… AU    Oceania   AUS    2015     1 f         1         0\n 8 AUS          Austral… AU    Oceania   AUS    2015     1 f         1         0\n 9 AUS          Austral… AU    Oceania   AUS    2015     1 f         1         0\n10 AUS          Austral… AU    Oceania   AUS    2015     1 f         1         0\n# ℹ 576,830 more rows\n# ℹ 7 more variables: forecast &lt;dbl&gt;, approx_date &lt;date&gt;, age_group &lt;chr&gt;,\n#   death_count &lt;dbl&gt;, death_rate &lt;dbl&gt;, deaths_total &lt;dbl&gt;, rate_total &lt;dbl&gt;"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#for-example-manually",
    "href": "slides/08-making-tidy-easier.html#for-example-manually",
    "title": "Making tidy easier",
    "section": "For example, manually",
    "text": "For example, manually\n\n## stmf\nstmf_colnames &lt;- c(\"country_code\", \"cname\", \"iso2\", \"continent\", \"iso3\", \"year\",\n                     \"week\", \"sex\", \"split\", \"split_sex\", \"forecast\", \"approx_date\",\n                     \"age_group\", \"death_count\", \"death_rate\", \"deaths_total\", \"rate_total\")\n\nall.equal(colnames(stmf), stmf_colnames)\n\n[1] TRUE\n\n\n\nImagine how you might build up a set of tests and checks\nBut you don’t have to manage this manually"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#use-testthat-to-check-things",
    "href": "slides/08-making-tidy-easier.html#use-testthat-to-check-things",
    "title": "Making tidy easier",
    "section": "Use testthat to check things",
    "text": "Use testthat to check things\n\n## countries\ntest_that(\"countries conforms to spec\", {\n  countries_colnames &lt;- c(\"cname\", \"iso3\", \"iso2\", \"continent\")\n  expect_equal(colnames(countries), countries_colnames)\n})\n\n\n## stmf\ntest_that(\"stmf conforms to spec\", {\n  stmf_colnames &lt;- c(\"country_code\", \"cname\", \"iso2\", \"continent\", \"iso3\", \"year\",\n                     \"week\", \"sex\", \"split\", \"split_sex\", \"forecast\", \"approx_date\",\n                     \"age_group\", \"death_count\", \"death_rate\", \"deaths_total\", \"rate_total\")\n  expect_equal(colnames(stmf), stmf_colnames)\n})"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#use-testthat-to-check-things-1",
    "href": "slides/08-making-tidy-easier.html#use-testthat-to-check-things-1",
    "title": "Making tidy easier",
    "section": "Use testthat to check things",
    "text": "Use testthat to check things\n\ntestthat::test_dir(here(\"tests\", \"testthat\"))\n\n## ✓ |  OK F W S | Context\n## \n## - |   0       | stmf                                                            \n## - |   0       | Validating package data objects                                 \n## ✓ |   2       | Validating package data objects\n## \n## ══ Results ═════════════════════════════════════════════════════════════════════\n## [ FAIL 0 | WARN 0 | SKIP 0 | PASS 2 ]"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#testthat-in-practice",
    "href": "slides/08-making-tidy-easier.html#testthat-in-practice",
    "title": "Making tidy easier",
    "section": "testthat in practice",
    "text": "testthat in practice\nOriented towards package development\nConsider packaging your datasets! Benefits to documentation/codebooks etc\nOne-table example: uscenpops\nMore extensive: covdata\nHow R packages work: Wickham & Bryan"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#summarizing-your-wrangling-with-skimr",
    "href": "slides/08-making-tidy-easier.html#summarizing-your-wrangling-with-skimr",
    "title": "Making tidy easier",
    "section": "Summarizing your wrangling with skimr",
    "text": "Summarizing your wrangling with skimr\n\nWe might want to make a codebook of our data\n\n\nlibrary(skimr)"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#summarize-with-skimr",
    "href": "slides/08-making-tidy-easier.html#summarize-with-skimr",
    "title": "Making tidy easier",
    "section": "Summarize with skimr",
    "text": "Summarize with skimr\n\nWe might want to make a codebook of our data\n\n\nlibrary(skimr)\norgandata &lt;- read_csv(here(\"data\", \"organdonation.csv\"))"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#summarize-with-skimr-1",
    "href": "slides/08-making-tidy-easier.html#summarize-with-skimr-1",
    "title": "Making tidy easier",
    "section": "Summarize with skimr",
    "text": "Summarize with skimr\n\norgandata |&gt; skim(where(is.numeric)) |&gt; partition()\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nyear\n34\n0.86\n1996.50\n3.46\n1991.00\n1993.75\n1996.50\n1999.25\n2002.00\n▇▅▅▅▇\n\n\ndonors\n34\n0.86\n16.48\n5.11\n5.20\n13.00\n15.10\n19.60\n33.90\n▁▇▅▂▁\n\n\npop\n17\n0.93\n39921.29\n62219.22\n3514.00\n6938.00\n15531.00\n57301.00\n288369.00\n▇▁▁▁▁\n\n\npop.dens\n17\n0.93\n12.00\n11.09\n0.22\n1.94\n9.49\n19.11\n38.89\n▇▃▃▂▁\n\n\ngdp\n17\n0.93\n22986.18\n4665.92\n12917.00\n19546.00\n22756.00\n26180.00\n36554.00\n▂▇▇▃▁\n\n\ngdp.lag\n0\n1.00\n22574.92\n4790.71\n11434.00\n19034.25\n22158.00\n25886.50\n36554.00\n▂▇▇▃▁\n\n\nhealth\n0\n1.00\n2073.75\n733.59\n791.00\n1581.00\n1956.00\n2407.50\n5665.00\n▆▇▂▁▁\n\n\nhealth.lag\n0\n1.00\n1972.99\n699.24\n727.00\n1542.00\n1850.50\n2290.25\n5267.00\n▆▇▂▁▁\n\n\npubhealth\n21\n0.91\n6.19\n0.92\n4.30\n5.50\n6.00\n6.90\n8.80\n▂▇▅▃▁\n\n\nroads\n17\n0.93\n113.04\n36.33\n58.21\n83.46\n111.22\n139.57\n232.48\n▇▇▆▂▁\n\n\ncerebvas\n17\n0.93\n610.80\n144.45\n300.00\n500.00\n604.00\n698.00\n957.00\n▂▅▇▃▂\n\n\nassault\n17\n0.93\n16.53\n17.33\n4.00\n9.00\n11.00\n16.00\n103.00\n▇▁▁▁▁\n\n\nexternal\n17\n0.93\n450.06\n118.19\n258.00\n367.00\n421.00\n534.00\n853.00\n▆▇▅▁▁\n\n\ntxp.pop\n17\n0.93\n0.72\n0.20\n0.22\n0.63\n0.71\n0.83\n1.12\n▁▂▇▃▃"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#summarize-with-skimr-2",
    "href": "slides/08-making-tidy-easier.html#summarize-with-skimr-2",
    "title": "Making tidy easier",
    "section": "Summarize with skimr",
    "text": "Summarize with skimr\n\norgandata |&gt; skim(!where(is.numeric)) |&gt; partition()\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ncountry\n0\n1.00\n5\n14\n0\n17\n0\n\n\nworld\n14\n0.94\n6\n11\n0\n3\n0\n\n\nopt\n28\n0.88\n2\n3\n0\n2\n0\n\n\nconsent.law\n0\n1.00\n8\n8\n0\n2\n0\n\n\nconsent.practice\n0\n1.00\n8\n8\n0\n2\n0\n\n\nconsistent\n0\n1.00\n2\n3\n0\n2\n0\n\n\nccode\n0\n1.00\n2\n4\n0\n17\n0"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#custom-summaries",
    "href": "slides/08-making-tidy-easier.html#custom-summaries",
    "title": "Making tidy easier",
    "section": "Custom Summaries",
    "text": "Custom Summaries\n\nstmf_country_years &lt;- function(df = stmf) {\n\n  df |&gt;\n    dplyr::select(cname, year) |&gt;\n    dplyr::group_by(cname, year) |&gt;\n    dplyr::tally() |&gt;\n    dplyr::mutate(n = as.character(n),\n           n = dplyr::recode(n, \"0\" = \"-\", .default = \"Y\")) |&gt;\n    dplyr::group_by(year, cname) |&gt;\n    dplyr::arrange(year) |&gt;\n    tidyr::pivot_wider(names_from = year, values_from = n) |&gt;\n    dplyr::mutate(dplyr::across(where(is.character), dplyr::recode, .missing = \"-\")) |&gt;\n    dplyr::arrange(cname)\n}"
  },
  {
    "objectID": "slides/08-making-tidy-easier.html#custom-summaries-1",
    "href": "slides/08-making-tidy-easier.html#custom-summaries-1",
    "title": "Making tidy easier",
    "section": "Custom Summaries",
    "text": "Custom Summaries\n\nknitr::kable(stmf_country_years())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncname\n1990\n1991\n1992\n1993\n1994\n1995\n1996\n1997\n1998\n1999\n2000\n2001\n2002\n2003\n2004\n2005\n2006\n2007\n2008\n2009\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\n2022\n\n\n\n\nAustralia\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nAustria\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nBelgium\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nBulgaria\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nCanada\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nChile\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\n\n\nCroatia\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nCzech Republic\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nDenmark\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nEngland and Wales\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nEstonia\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nFinland\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nFrance\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nGermany\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nGreece\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nHungary\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nIceland\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nIsrael\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nItaly\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nKorea, Republic of\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nLatvia\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nLithuania\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nLuxembourg\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nNetherlands\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nNew Zealand\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nNorthern Ireland\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nNorway\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nPoland\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nPortugal\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nRussian Federation\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n-\n-\n\n\nScotland\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nSlovakia\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nSlovenia\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nSpain\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nSweden\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nSwitzerland\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n\n\nTaiwan, Province of China\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\n-\n\n\nUnited States\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\nY\nY\nY\nY\nY\nY\nY\nY"
  },
  {
    "objectID": "slides/02-about-r.html#where-we-want-to-end-up",
    "href": "slides/02-about-r.html#where-we-want-to-end-up",
    "title": "Finding your way in R",
    "section": "Where we want to end up",
    "text": "Where we want to end up\n\nPDF out"
  },
  {
    "objectID": "slides/02-about-r.html#where-we-want-to-end-up-1",
    "href": "slides/02-about-r.html#where-we-want-to-end-up-1",
    "title": "Finding your way in R",
    "section": "Where we want to end up",
    "text": "Where we want to end up\n\nHTML out"
  },
  {
    "objectID": "slides/02-about-r.html#where-we-want-to-end-up-2",
    "href": "slides/02-about-r.html#where-we-want-to-end-up-2",
    "title": "Finding your way in R",
    "section": "Where we want to end up",
    "text": "Where we want to end up\n\nWord out"
  },
  {
    "objectID": "slides/02-about-r.html#how-to-get-there",
    "href": "slides/02-about-r.html#how-to-get-there",
    "title": "Finding your way in R",
    "section": "How to get there?",
    "text": "How to get there?\n\n\n\n\n\nWe could write an R script with some notes inside, using it to create some figures and tables, paste them into our document.\nThis will work, but we can do better."
  },
  {
    "objectID": "slides/02-about-r.html#we-can-make-this",
    "href": "slides/02-about-r.html#we-can-make-this",
    "title": "Finding your way in R",
    "section": "We can make this …",
    "text": "We can make this …"
  },
  {
    "objectID": "slides/02-about-r.html#by-writing-this",
    "href": "slides/02-about-r.html#by-writing-this",
    "title": "Finding your way in R",
    "section": "… by writing this",
    "text": "… by writing this"
  },
  {
    "objectID": "slides/02-about-r.html#the-code-gets-replaced-by-its-output",
    "href": "slides/02-about-r.html#the-code-gets-replaced-by-its-output",
    "title": "Finding your way in R",
    "section": "The code gets replaced by its output",
    "text": "The code gets replaced by its output"
  },
  {
    "objectID": "slides/02-about-r.html#basic-markdown-summary",
    "href": "slides/02-about-r.html#basic-markdown-summary",
    "title": "Finding your way in R",
    "section": "Basic markdown summary",
    "text": "Basic markdown summary\n\n\n\n\nDesired style\nUse the following Markdown annotation\n\n\n\n\nHeading 1\n# Heading 1\n\n\nHeading 2\n## Heading 2\n\n\nHeading 3\n### Heading 3 (Actual heading styles will vary.)\n\n\nParagraph\nJust start typing\n\n\nBold\n**Bold**\n\n\nItalic\n*Italic*\n\n\nImages\n[Alternate text for image](path/image.jpg)\n\n\nHyperlinks\n[Link text](https://www.visualizingsociety.com/)\n\n\nUnordered Lists\n\n\n\n- First\n- First\n\n\n- Second.\n- Second\n\n\n- Third\n- Third\n\n\nOrdered Lists\n\n\n\n1. First\n1. First\n\n\n2. Second.\n2. Second\n\n\n3. Third\n3. Third\n\n\nFootnote.¹\nFootnote[^notelabel]\n\n\n¹The note’s content.\n[^notelabel] The note's content."
  },
  {
    "objectID": "slides/02-about-r.html#the-right-frame-of-mind",
    "href": "slides/02-about-r.html#the-right-frame-of-mind",
    "title": "Finding your way in R",
    "section": "The right frame of mind",
    "text": "The right frame of mind\n\nThis is like learning how to drive a car, or how to cook in a kitchen … or learning to speak a language.\nAfter some orientation to what’s where, you will learn best by doing.\nSoftware is a pain, but you won’t crash the car or burn your house down."
  },
  {
    "objectID": "slides/02-about-r.html#loading-the-tidyverse-libraries",
    "href": "slides/02-about-r.html#loading-the-tidyverse-libraries",
    "title": "Finding your way in R",
    "section": "Loading the tidyverse libraries",
    "text": "Loading the tidyverse libraries\nlibrary(tidyverse)\n── Attaching core tidyverse packages ────────────────────────────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ──────────────────────────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package to force all conflicts to become errors\n\nThe tidyverse has several components.\nWe’ll return to this message about Conflicts later."
  },
  {
    "objectID": "slides/02-about-r.html#tidyverse-components",
    "href": "slides/02-about-r.html#tidyverse-components",
    "title": "Finding your way in R",
    "section": "Tidyverse components",
    "text": "Tidyverse components\n\n\n\nlibrary(tidyverse)\nLoading tidyverse: ggplot2\nLoading tidyverse: tibble\nLoading tidyverse: tidyr\nLoading tidyverse: readr\nLoading tidyverse: purrr\nLoading tidyverse: dplyr\n\n\n\nCall the package and …\n&lt;| Draw graphs\n&lt;| Nicer data tables\n&lt;| Tidy your data\n&lt;| Get data into R\n&lt;| Fancy Iteration\n&lt;| Action verbs for tables"
  },
  {
    "objectID": "slides/02-about-r.html#what-r-looks-like",
    "href": "slides/02-about-r.html#what-r-looks-like",
    "title": "Finding your way in R",
    "section": "What R looks like",
    "text": "What R looks like\nCode you can type and run:\n\n## Inside code chunks, lines beginning with a # character are comments\n## Comments are ignored by R\n\nmy_numbers &lt;- c(1, 1, 2, 4, 1, 3, 1, 5) # Anything after a # character is ignored as well\n\nOutput:\n\nmy_numbers \n\n[1] 1 1 2 4 1 3 1 5\n\n\nThis is equivalent to running the code above, typing my_numbers at the console, and hitting enter."
  },
  {
    "objectID": "slides/02-about-r.html#what-r-looks-like-1",
    "href": "slides/02-about-r.html#what-r-looks-like-1",
    "title": "Finding your way in R",
    "section": "What R looks like",
    "text": "What R looks like\nBy convention, code output in documents is prefixed by ##\nAlso by convention, outputting vectors, etc, gets a counter keeping track of the number of elements. For example,\n\nletters\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\""
  },
  {
    "objectID": "slides/02-about-r.html#its-a-calculator",
    "href": "slides/02-about-r.html#its-a-calculator",
    "title": "Finding your way in R",
    "section": "0. It’s a calculator",
    "text": "0. It’s a calculator\n\n\n\nArithmetic\n\n\n(31 * 12) / 2^4\n\n[1] 23.25\n\n\n\nsqrt(25)\n\n[1] 5\n\n\n\nlog(100)\n\n[1] 4.60517\n\nlog10(100)\n\n[1] 2"
  },
  {
    "objectID": "slides/02-about-r.html#its-a-calculator-1",
    "href": "slides/02-about-r.html#its-a-calculator-1",
    "title": "Finding your way in R",
    "section": "0. It’s a calculator",
    "text": "0. It’s a calculator\n\n\n\nArithmetic\n\n\n(31 * 12) / 2^4\n\n[1] 23.25\n\n\n\nsqrt(25)\n\n[1] 5\n\n\n\nlog(100)\n\n[1] 4.60517\n\nlog10(100)\n\n[1] 2\n\n\n\n\nLogic\n\n\n4 &lt; 10\n\n[1] TRUE\n\n4 &gt; 2 & 1 &gt; 0.5 # The \"&\" means \"and\"\n\n[1] TRUE\n\n4 &lt; 2 | 1 &gt; 0.5 # The \"|\" means \"or\"\n\n[1] TRUE\n\n4 &lt; 2 | 1 &lt; 0.5\n\n[1] FALSE"
  },
  {
    "objectID": "slides/02-about-r.html#boolean-and-logical-operators",
    "href": "slides/02-about-r.html#boolean-and-logical-operators",
    "title": "Finding your way in R",
    "section": "Boolean and Logical operators",
    "text": "Boolean and Logical operators\nLogical equality and inequality (yielding a TRUE or FALSE result) is done with == and !=. Other logical operators include &lt;, &gt;, &lt;=, &gt;=, and ! for negation.\n\n## A logical test\n2 == 2 # Write `=` twice\n\n[1] TRUE\n\n\n\n## This will cause an error, because R will think you are trying to assign a value\n2 = 2\n\n## Error in 2 = 2 : invalid (do_set) left-hand side to assignment\n\n\n3 != 7 # Write `!` and then `=` to make `!=`\n\n[1] TRUE"
  },
  {
    "objectID": "slides/02-about-r.html#everything-in-r-has-a-name",
    "href": "slides/02-about-r.html#everything-in-r-has-a-name",
    "title": "Finding your way in R",
    "section": "1. Everything in R has a name",
    "text": "1. Everything in R has a name\n\nmy_numbers # We created this a few minutes ago\n\n[1] 1 1 2 4 1 3 1 5\n\nletters  # This one is built-in\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\npi  # Also built-in\n\n[1] 3.141593"
  },
  {
    "objectID": "slides/02-about-r.html#some-names-are-forbidden",
    "href": "slides/02-about-r.html#some-names-are-forbidden",
    "title": "Finding your way in R",
    "section": "Some names are forbidden",
    "text": "Some names are forbidden\nOr it’s a really bad idea to try to use them\n\nTRUE\nFALSE\nInf\nNaN \nNA \nNULL\n\nfor\nif\nwhile\nbreak\nfunction"
  },
  {
    "objectID": "slides/02-about-r.html#everything-is-an-object",
    "href": "slides/02-about-r.html#everything-is-an-object",
    "title": "Finding your way in R",
    "section": "2. Everything is an object",
    "text": "2. Everything is an object\nThere are a few built-in objects:\n\nletters\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\n\n\npi\n\n[1] 3.141593\n\n\n\nLETTERS\n\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\"\n[20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\""
  },
  {
    "objectID": "slides/02-about-r.html#you-can-create-objects",
    "href": "slides/02-about-r.html#you-can-create-objects",
    "title": "Finding your way in R",
    "section": "3. You can create objects",
    "text": "3. You can create objects\nIn fact, this is mostly what we will be doing.\nObjects are created by assigning a thing to a name:\n\n## name... gets ... this stuff\nmy_numbers &lt;- c(1, 2, 3, 1, 3, 5, 25, 10)\n\n## name ... gets ... the output of the function `c()`\nyour_numbers &lt;- c(5, 31, 71, 1, 3, 21, 6, 52)\n\nThe c() function combines or concatenates things\n\nThe core thing we do in R is create objects by assigning a thing to a name. That thing is usually the output of some function. There are a lot of built-in functions.\nWe can create an object with the c() function and the assignment operator, &lt;-. The c() function concatenates things together."
  },
  {
    "objectID": "slides/02-about-r.html#the-assignment-operator",
    "href": "slides/02-about-r.html#the-assignment-operator",
    "title": "Finding your way in R",
    "section": "The assignment operator",
    "text": "The assignment operator\n\nThe assignment operator performs the action of creating objects\nUse a keyboard shortcut to write it:\nPress option and - on a Mac\nPress alt and - on Windows"
  },
  {
    "objectID": "slides/02-about-r.html#do-things-to-objects-with-functions",
    "href": "slides/02-about-r.html#do-things-to-objects-with-functions",
    "title": "Finding your way in R",
    "section": "4. Do things to objects with functions",
    "text": "4. Do things to objects with functions\n\n## this object... gets ... the output of this function\nmy_numbers &lt;- c(1, 2, 3, 1, 3, 5, 25, 10)\n\nyour_numbers &lt;- c(5, 31, 71, 1, 3, 21, 6, 52)\n\n\nmy_numbers\n\n[1]  1  2  3  1  3  5 25 10"
  },
  {
    "objectID": "slides/02-about-r.html#do-things-to-objects-with-functions-1",
    "href": "slides/02-about-r.html#do-things-to-objects-with-functions-1",
    "title": "Finding your way in R",
    "section": "4. Do things to objects with functions",
    "text": "4. Do things to objects with functions\n\nFunctions can be identified by the parentheses after their names.\n\n\nmy_numbers \n\n[1]  1  2  3  1  3  5 25 10\n\n\n\n## If you run this you'll get an error\nmean()"
  },
  {
    "objectID": "slides/02-about-r.html#what-functions-usually-do",
    "href": "slides/02-about-r.html#what-functions-usually-do",
    "title": "Finding your way in R",
    "section": "What functions usually do",
    "text": "What functions usually do\n\nThey take inputs to arguments\nThey perform actions\nThey produce, or return, outputs\n\nmean(x = my_numbers)"
  },
  {
    "objectID": "slides/02-about-r.html#what-functions-usually-do-1",
    "href": "slides/02-about-r.html#what-functions-usually-do-1",
    "title": "Finding your way in R",
    "section": "What functions usually do",
    "text": "What functions usually do\n\nThey take inputs to arguments\nThey perform actions\nThey produce, or return, outputs\n\nmean(x = my_numbers)\n[1] 6.25"
  },
  {
    "objectID": "slides/02-about-r.html#what-functions-usually-do-2",
    "href": "slides/02-about-r.html#what-functions-usually-do-2",
    "title": "Finding your way in R",
    "section": "What functions usually do",
    "text": "What functions usually do\n\n## Get the mean of what? Of x.\n## You need to tell the function what x is\nmean(x = my_numbers)\n\n[1] 6.25\n\nmean(x = your_numbers)\n\n[1] 23.75"
  },
  {
    "objectID": "slides/02-about-r.html#what-functions-usually-do-3",
    "href": "slides/02-about-r.html#what-functions-usually-do-3",
    "title": "Finding your way in R",
    "section": "What functions usually do",
    "text": "What functions usually do\nIf you don’t name the arguments, R assumes you are providing them in the order the function expects.\n\nmean(your_numbers)\n\n[1] 23.75"
  },
  {
    "objectID": "slides/02-about-r.html#what-functions-usually-do-4",
    "href": "slides/02-about-r.html#what-functions-usually-do-4",
    "title": "Finding your way in R",
    "section": "What functions usually do",
    "text": "What functions usually do\nWhat arguments? Which order? Read the function’s help page\n\nhelp(mean)\n\n\n## quicker\n?mean\n\n\nHow to read an R help page?"
  },
  {
    "objectID": "slides/02-about-r.html#what-functions-usually-do-5",
    "href": "slides/02-about-r.html#what-functions-usually-do-5",
    "title": "Finding your way in R",
    "section": "What functions usually do",
    "text": "What functions usually do\n\nArguments often tell the function what to do in specific circumstances\n\n\nmissing_numbers &lt;- c(1:10, NA, 20, 32, 50, 104, 32, 147, 99, NA, 45)\n\nmean(missing_numbers)\n\n[1] NA\n\nmean(missing_numbers, na.rm = TRUE)\n\n[1] 32.44444\n\n\nOr select from one of several options\n\n## Look at ?mean to see what `trim` does\nmean(missing_numbers, na.rm = TRUE, trim = 0.1)\n\n[1] 27.25"
  },
  {
    "objectID": "slides/02-about-r.html#what-functions-usually-do-6",
    "href": "slides/02-about-r.html#what-functions-usually-do-6",
    "title": "Finding your way in R",
    "section": "What functions usually do",
    "text": "What functions usually do\nThere are all kinds of functions. They return different things.\n\nsummary(my_numbers)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00    1.75    3.00    6.25    6.25   25.00"
  },
  {
    "objectID": "slides/02-about-r.html#what-functions-usually-do-7",
    "href": "slides/02-about-r.html#what-functions-usually-do-7",
    "title": "Finding your way in R",
    "section": "What functions usually do",
    "text": "What functions usually do\nYou can assign the output of a function to a name, which turns it into an object. (Otherwise it’ll send its output to the console.)\n\nmy_summary &lt;- summary(my_numbers)\n\nmy_summary\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00    1.75    3.00    6.25    6.25   25.00"
  },
  {
    "objectID": "slides/02-about-r.html#what-functions-usually-do-8",
    "href": "slides/02-about-r.html#what-functions-usually-do-8",
    "title": "Finding your way in R",
    "section": "What functions usually do",
    "text": "What functions usually do\nObjects hang around in your work environment until they are overwritten by you, or are deleted.\n\n## rm() function removes objects\nrm(my_summary)\n\nmy_summary\n\n## Error: object 'my_summary' not found"
  },
  {
    "objectID": "slides/02-about-r.html#functions-can-be-nested",
    "href": "slides/02-about-r.html#functions-can-be-nested",
    "title": "Finding your way in R",
    "section": "Functions can be nested",
    "text": "Functions can be nested\n\nc(1:20)\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\n\n\n\nmean(c(1:20))\n\n[1] 10.5\n\n\n\nsummary(mean(c(1:20)))\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   10.5    10.5    10.5    10.5    10.5    10.5 \n\n\n\nnames(summary(mean(c(1:20))))\n\n[1] \"Min.\"    \"1st Qu.\" \"Median\"  \"Mean\"    \"3rd Qu.\" \"Max.\"   \n\n\n\nlength(names(summary(mean(c(1:20)))))\n\n[1] 6\n\n\nNested functions are evaluated from the inside out."
  },
  {
    "objectID": "slides/02-about-r.html#use-the-pipe-operator",
    "href": "slides/02-about-r.html#use-the-pipe-operator",
    "title": "Finding your way in R",
    "section": "Use the pipe operator: |>",
    "text": "Use the pipe operator: |&gt;\nInstead of deeply nesting functions in parentheses, we can use the pipe operator:\n\nc(1:20) |&gt; mean() |&gt; summary() |&gt; names() |&gt;  length()\n\n[1] 6\n\n\nRead this operator as “and then”"
  },
  {
    "objectID": "slides/02-about-r.html#use-the-pipe-operator-1",
    "href": "slides/02-about-r.html#use-the-pipe-operator-1",
    "title": "Finding your way in R",
    "section": "Use the pipe operator: |>",
    "text": "Use the pipe operator: |&gt;\nBetter, vertical space is free in R:\n\nc(1:20) |&gt; \n  mean() |&gt; \n  summary() |&gt; \n  names() |&gt; \n  length()\n\n[1] 6"
  },
  {
    "objectID": "slides/02-about-r.html#pipelines-make-code-more-readable",
    "href": "slides/02-about-r.html#pipelines-make-code-more-readable",
    "title": "Finding your way in R",
    "section": "Pipelines make code more readable",
    "text": "Pipelines make code more readable\n\nNot great, Bob:\n\n\n  serve(stir(pour_in_pan(whisk(crack_eggs(get_from_fridge(eggs), into = \"bowl\"), len = 40), temp = \"med-high\")))\n\n\nNotice how the first thing you read is the last operation performed."
  },
  {
    "objectID": "slides/02-about-r.html#pipelines-make-code-more-readable-1",
    "href": "slides/02-about-r.html#pipelines-make-code-more-readable-1",
    "title": "Finding your way in R",
    "section": "Pipelines make code more readable",
    "text": "Pipelines make code more readable\n\nWe can use vertical space and indents, but it’s really not much better:\n\nserve(\n  stir(\n    pour_in_pan(\n      whisk(\n        crack_eggs(\n          get_from_fridge(eggs), \n        into = \"bowl\"), \n      len = 40), \n    temp = \"med-high\")\n  )\n)"
  },
  {
    "objectID": "slides/02-about-r.html#pipelines-make-code-more-readable-2",
    "href": "slides/02-about-r.html#pipelines-make-code-more-readable-2",
    "title": "Finding your way in R",
    "section": "Pipelines make code more readable",
    "text": "Pipelines make code more readable\n\nMuch nicer:\n\neggs |&gt; \n  get_from_fridge() |&gt; \n  crack_eggs(into = \"bowl\") |&gt; \n  whisk(len = 40) |&gt; \n  pour_in_pan(temp = \"med-high\") |&gt; \n  stir() |&gt; \n  serve()\n\nWe’ll still use nested parentheses quite a bit, often in the context of a function working inside a pipeline. But it’s good not to have too many levels of nesting."
  },
  {
    "objectID": "slides/02-about-r.html#functions-are-bundled-into-packages",
    "href": "slides/02-about-r.html#functions-are-bundled-into-packages",
    "title": "Finding your way in R",
    "section": "Functions are bundled into packages",
    "text": "Functions are bundled into packages\nPackages are loaded into your working environment using the library() function:\n\n## A package containing a dataset rather than functions\nlibrary(gapminder)\n\ngapminder\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows"
  },
  {
    "objectID": "slides/02-about-r.html#functions-are-bundled-into-packages-1",
    "href": "slides/02-about-r.html#functions-are-bundled-into-packages-1",
    "title": "Finding your way in R",
    "section": "Functions are bundled into packages",
    "text": "Functions are bundled into packages\nYou need only install a package once (and occasionally update it):\n\n## Do at least once for each package. Once done, not needed each time.\ninstall.packages(\"palmerpenguins\", repos = \"http://cran.rstudio.com\")\n\n## Needed sometimes, especially after an R major version upgrade.\nupdate.packages(repos = \"http://cran.rstudio.com\")"
  },
  {
    "objectID": "slides/02-about-r.html#functions-are-bundled-into-packages-2",
    "href": "slides/02-about-r.html#functions-are-bundled-into-packages-2",
    "title": "Finding your way in R",
    "section": "Functions are bundled into packages",
    "text": "Functions are bundled into packages\nBut you must load the package in each R session before you can access its contents:\n\n## To load a package, usually at the start of your RMarkdown document or script file\nlibrary(palmerpenguins)\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/02-about-r.html#grabbing-a-single-function-with",
    "href": "slides/02-about-r.html#grabbing-a-single-function-with",
    "title": "Finding your way in R",
    "section": "Grabbing a single function with ::",
    "text": "Grabbing a single function with ::\n\n# A little glimpse of what we'll do soon\npenguins |&gt; \n  count(species, sex, year) |&gt; \n  pivot_wider(names_from = year, values_from = n) |&gt; \n  tinytable::tt()\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                species\n                sex\n                2007\n                2008\n                2009\n              \n        \n        \n        \n                \n                  Adelie   \n                  female\n                  22\n                  25\n                  26\n                \n                \n                  Adelie   \n                  male  \n                  22\n                  25\n                  26\n                \n                \n                  Adelie   \n                  NA    \n                   6\n                  NA\n                  NA\n                \n                \n                  Chinstrap\n                  female\n                  13\n                   9\n                  12\n                \n                \n                  Chinstrap\n                  male  \n                  13\n                   9\n                  12\n                \n                \n                  Gentoo   \n                  female\n                  16\n                  22\n                  20\n                \n                \n                  Gentoo   \n                  male  \n                  17\n                  23\n                  21\n                \n                \n                  Gentoo   \n                  NA    \n                   1\n                   1\n                   3"
  },
  {
    "objectID": "slides/02-about-r.html#remember-those-conflicts",
    "href": "slides/02-about-r.html#remember-those-conflicts",
    "title": "Finding your way in R",
    "section": "Remember those conflicts?",
    "text": "Remember those conflicts?\nlibrary(tidyverse)\n── Attaching core tidyverse packages ────────────────────────────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ──────────────────────────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package to force all conflicts to become errors\n\nSome functions in different packages have the same names.\nRelated concepts of namespaces and environments."
  },
  {
    "objectID": "slides/02-about-r.html#the-scope-of-names",
    "href": "slides/02-about-r.html#the-scope-of-names",
    "title": "Finding your way in R",
    "section": "The scope of names",
    "text": "The scope of names\n\nx &lt;- c(1:10)\ny &lt;- c(90:100)\n\nx\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\ny\n\n [1]  90  91  92  93  94  95  96  97  98  99 100\n\n\nmean()\n\n## Error in mean.default() : argument \"x\" is missing, with no default"
  },
  {
    "objectID": "slides/02-about-r.html#the-scope-of-names-1",
    "href": "slides/02-about-r.html#the-scope-of-names-1",
    "title": "Finding your way in R",
    "section": "The scope of names",
    "text": "The scope of names\n\nmean(x) # argument names are internal to functions\n\n[1] 5.5\n\nmean(x = x)\n\n[1] 5.5\n\nmean(x = y)\n\n[1] 95\n\nx\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\ny\n\n [1]  90  91  92  93  94  95  96  97  98  99 100"
  },
  {
    "objectID": "slides/02-about-r.html#vector-types-object-classes",
    "href": "slides/02-about-r.html#vector-types-object-classes",
    "title": "Finding your way in R",
    "section": "5. Vector types; Object classes",
    "text": "5. Vector types; Object classes\nI’m going to speak somewhat loosely here for now, and gloss over some distinctions between object classes and data structures, as well as kinds of objects and their attributes."
  },
  {
    "objectID": "slides/02-about-r.html#vector-types-object-classes-1",
    "href": "slides/02-about-r.html#vector-types-object-classes-1",
    "title": "Finding your way in R",
    "section": "5. Vector types; Object classes",
    "text": "5. Vector types; Object classes\nObjects are made of one or more vectors. A vector can, in effect, have a single type: integer, double, logical, character, factor, date, etc. That is, vectors are “atomic”. Complex objects are mostly lists of vectors of different sorts, or nested lists of other simpler objects that are themselves ultimately made up of vectors of"
  },
  {
    "objectID": "slides/02-about-r.html#vector-types-object-classes-2",
    "href": "slides/02-about-r.html#vector-types-object-classes-2",
    "title": "Finding your way in R",
    "section": "5. Vector types; Object classes",
    "text": "5. Vector types; Object classes\nThe object inspector in RStudio is your friend.\nYou can ask an object what it is at the console, too:\n\nclass(my_numbers)\n\n[1] \"numeric\"\n\ntypeof(my_numbers)\n\n[1] \"double\""
  },
  {
    "objectID": "slides/02-about-r.html#types-of-vector",
    "href": "slides/02-about-r.html#types-of-vector",
    "title": "Finding your way in R",
    "section": "Types of vector",
    "text": "Types of vector\n\n\n\n\n\n\n\n\nHadley Wickham, Advanced R"
  },
  {
    "objectID": "slides/02-about-r.html#types-of-vector-1",
    "href": "slides/02-about-r.html#types-of-vector-1",
    "title": "Finding your way in R",
    "section": "Types of vector",
    "text": "Types of vector\n\n\n\n\n\n\nmy_int &lt;- c(1, 3, 5, 6, 10)\nis.integer(my_int)\n\n[1] FALSE\n\nis.double(my_int)\n\n[1] TRUE\n\nmy_int &lt;- as.integer(my_int)\nis.integer(my_int)\n\n[1] TRUE\n\nmy_chr &lt;- c(\"Mary\", \"had\", \"a\", \"little\", \"lamb\")\nis.character(my_chr)\n\n[1] TRUE\n\nmy_lgl &lt;- c(TRUE, FALSE, TRUE)\nis.logical(my_lgl)\n\n[1] TRUE\n\n\n\n\nHadley Wickham, Advanced R"
  },
  {
    "objectID": "slides/02-about-r.html#types-of-vector-2",
    "href": "slides/02-about-r.html#types-of-vector-2",
    "title": "Finding your way in R",
    "section": "Types of vector",
    "text": "Types of vector\n\n\n\n\n\n\n## Factors are for storing undordered or ordered categorical variables\nx &lt;- factor(c(\"Yes\", \"No\", \"No\", \"Maybe\", \"Yes\", \"Yes\", \"Yes\", \"No\"))\nx\n\n[1] Yes   No    No    Maybe Yes   Yes   Yes   No   \nLevels: Maybe No Yes\n\nsummary(x) # Alphabetical order by default\n\nMaybe    No   Yes \n    1     3     4 \n\ntypeof(x)       # Underneath, a factor is a type of integer ...\n\n[1] \"integer\"\n\nattributes(x)   # ... with labels for its numbers, or \"levels\" \n\n$levels\n[1] \"Maybe\" \"No\"    \"Yes\"  \n\n$class\n[1] \"factor\"\n\nlevels(x)\n\n[1] \"Maybe\" \"No\"    \"Yes\"  \n\nis.ordered(x)\n\n[1] FALSE\n\n\n\n\n\nHW:\nCategorical data, where values come from a fixed set of levels recorded in factor vectors.\nDates (with day resolution), which are recorded in Date vectors.\nDate-times (with second or sub-second resolution), which are stored in POSIXct vectors.\nDurations, which are stored in difftime vectors."
  },
  {
    "objectID": "slides/02-about-r.html#vectors-cant-be-heterogenous",
    "href": "slides/02-about-r.html#vectors-cant-be-heterogenous",
    "title": "Finding your way in R",
    "section": "Vectors can’t be heterogenous",
    "text": "Vectors can’t be heterogenous\n\nObjects can be manually or automatically coerced from one class to another. Take care.\n\n\nclass(my_numbers)\n\n[1] \"numeric\"\n\nmy_new_vector &lt;- c(my_numbers, \"Apple\")\n\nmy_new_vector # vectors are homogeneous/atomic\n\n[1] \"1\"     \"2\"     \"3\"     \"1\"     \"3\"     \"5\"     \"25\"    \"10\"    \"Apple\"\n\nclass(my_new_vector)\n\n[1] \"character\""
  },
  {
    "objectID": "slides/02-about-r.html#vectors-cant-be-heterogenous-1",
    "href": "slides/02-about-r.html#vectors-cant-be-heterogenous-1",
    "title": "Finding your way in R",
    "section": "Vectors can’t be heterogenous",
    "text": "Vectors can’t be heterogenous\n\nObjects can be manually or automatically coerced from one class to another. Take care.\n\n\nmy_dbl &lt;- c(2.1, 4.77, 30.111, 3.14519)\nis.double(my_dbl)\n\n[1] TRUE\n\nmy_dbl &lt;- as.integer(my_dbl)\n\nmy_dbl\n\n[1]  2  4 30  3"
  },
  {
    "objectID": "slides/02-about-r.html#a-table-of-data-is-a-kind-of-list",
    "href": "slides/02-about-r.html#a-table-of-data-is-a-kind-of-list",
    "title": "Finding your way in R",
    "section": "A table of data is a kind of list",
    "text": "A table of data is a kind of list\n\ngapminder # tibbles and data frames can contain vectors of different types\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n\nclass(gapminder)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\ntypeof(gapminder) # hmm\n\n[1] \"list\""
  },
  {
    "objectID": "slides/02-about-r.html#a-table-of-data-is-a-kind-of-list-1",
    "href": "slides/02-about-r.html#a-table-of-data-is-a-kind-of-list-1",
    "title": "Finding your way in R",
    "section": "A table of data is a kind of list",
    "text": "A table of data is a kind of list\n\nLists are collections of vectors of possibly different types and lengths, or collections of more complex objects that are themselves ultimately made out of vectors. Underneath, most complex R objects are some kind of list with different components that can be accessed by some function that knows the names of the things inside the list.\nA data frame is a list of vectors of the same length, where the vectors can be of different types (e.g. numeric, character, logical, etc).\nA data frame is a natural representation of what most real tables of data look like. Having it be a basic sort of entity in the programming language IS ONE OF R’s BEST IDEAS AND EASILY UNDERRATED!\nA tibble is an enhanced data frame\n\n\nTibbles have an enhanced print method, never coerce strings to factors, and provide stricter subsetting methods. (HW)\nAgain the object inspector is helpful here"
  },
  {
    "objectID": "slides/02-about-r.html#some-classes-are-versions-of-others",
    "href": "slides/02-about-r.html#some-classes-are-versions-of-others",
    "title": "Finding your way in R",
    "section": "Some classes are versions of others",
    "text": "Some classes are versions of others\n\n\n\nBase R’s trusty data.frame\n\n\n\nlibrary(socviz)\ntitanic\n\n      fate    sex    n percent\n1 perished   male 1364    62.0\n2 perished female  126     5.7\n3 survived   male  367    16.7\n4 survived female  344    15.6\n\nclass(titanic)\n\n[1] \"data.frame\"\n\n\n\n## The `$` idiom picks out a named column here; \n## more generally, the named element of a list\ntitanic$percent  \n\n[1] 62.0  5.7 16.7 15.6"
  },
  {
    "objectID": "slides/02-about-r.html#some-classes-are-versions-of-others-1",
    "href": "slides/02-about-r.html#some-classes-are-versions-of-others-1",
    "title": "Finding your way in R",
    "section": "Some classes are versions of others",
    "text": "Some classes are versions of others\n\n\n\nBase R’s trusty data.frame\n\n\n\nlibrary(socviz)\ntitanic\n\n      fate    sex    n percent\n1 perished   male 1364    62.0\n2 perished female  126     5.7\n3 survived   male  367    16.7\n4 survived female  344    15.6\n\nclass(titanic)\n\n[1] \"data.frame\"\n\n\n\n## The `$` idiom picks out a named column here; \n## more generally, the named element of a list\ntitanic$percent  \n\n[1] 62.0  5.7 16.7 15.6\n\n\n\n\n\nThe Tidyverse’s enhanced tibble\n\n\n\n## tibbles are build on data frames \ntitanic_tb &lt;- as_tibble(titanic) \ntitanic_tb\n\n# A tibble: 4 × 4\n  fate     sex        n percent\n  &lt;fct&gt;    &lt;fct&gt;  &lt;dbl&gt;   &lt;dbl&gt;\n1 perished male    1364    62  \n2 perished female   126     5.7\n3 survived male     367    16.7\n4 survived female   344    15.6\n\nclass(titanic_tb)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\n\n\nA data frame and a tibble are both fundamentally a list of vectors of the same length, where the vectors can be of different types (e.g. numeric, character, logical, etc)"
  },
  {
    "objectID": "slides/02-about-r.html#all-of-this-will-be-clearer-in-use",
    "href": "slides/02-about-r.html#all-of-this-will-be-clearer-in-use",
    "title": "Finding your way in R",
    "section": "All of this will be clearer in use",
    "text": "All of this will be clearer in use\n\ngss_sm\n\n# A tibble: 2,867 × 32\n    year    id ballot       age childs sibs   degree race  sex   region income16\n   &lt;dbl&gt; &lt;dbl&gt; &lt;labelled&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;labe&gt; &lt;fct&gt;  &lt;fct&gt; &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;   \n 1  2016     1 1             47      3 2      Bache… White Male  New E… $170000…\n 2  2016     2 2             61      0 3      High … White Male  New E… $50000 …\n 3  2016     3 3             72      2 3      Bache… White Male  New E… $75000 …\n 4  2016     4 1             43      4 3      High … White Fema… New E… $170000…\n 5  2016     5 3             55      2 2      Gradu… White Fema… New E… $170000…\n 6  2016     6 2             53      2 2      Junio… White Fema… New E… $60000 …\n 7  2016     7 1             50      2 2      High … White Male  New E… $170000…\n 8  2016     8 3             23      3 6      High … Other Fema… Middl… $30000 …\n 9  2016     9 1             45      3 5      High … Black Male  Middl… $60000 …\n10  2016    10 3             71      4 1      Junio… White Male  Middl… $60000 …\n# ℹ 2,857 more rows\n# ℹ 21 more variables: relig &lt;fct&gt;, marital &lt;fct&gt;, padeg &lt;fct&gt;, madeg &lt;fct&gt;,\n#   partyid &lt;fct&gt;, polviews &lt;fct&gt;, happy &lt;fct&gt;, partners &lt;fct&gt;, grass &lt;fct&gt;,\n#   zodiac &lt;fct&gt;, pres12 &lt;labelled&gt;, wtssall &lt;dbl&gt;, income_rc &lt;fct&gt;,\n#   agegrp &lt;fct&gt;, ageq &lt;fct&gt;, siblings &lt;fct&gt;, kids &lt;fct&gt;, religion &lt;fct&gt;,\n#   bigregion &lt;fct&gt;, partners_rc &lt;fct&gt;, obama &lt;dbl&gt;\n\n\n\nTidyverse tools are generally type safe, meaning their functions return the same type of thing every time, or fail if they cannot do this. So it’s good to know about the various data types."
  },
  {
    "objectID": "slides/02-about-r.html#arithmetic-on-vectors",
    "href": "slides/02-about-r.html#arithmetic-on-vectors",
    "title": "Finding your way in R",
    "section": "6. Arithmetic on vectors",
    "text": "6. Arithmetic on vectors\n\nIn R, all numbers are vectors of different sorts. Even single numbers (“scalars”) are conceptually vectors of length 1.\nArithmetic on vectors (and arrays generally) follows a series of recycling rules that favor ease of expression of vectorized, “elementwise” operations.\nSee if you can predict what the following operations do:"
  },
  {
    "objectID": "slides/02-about-r.html#arithmetic-on-vectors-1",
    "href": "slides/02-about-r.html#arithmetic-on-vectors-1",
    "title": "Finding your way in R",
    "section": "6. Arithmetic on vectors",
    "text": "6. Arithmetic on vectors\n\nmy_numbers\n\n[1]  1  2  3  1  3  5 25 10\n\nresult1 &lt;- my_numbers + 1"
  },
  {
    "objectID": "slides/02-about-r.html#arithmetic-on-vectors-2",
    "href": "slides/02-about-r.html#arithmetic-on-vectors-2",
    "title": "Finding your way in R",
    "section": "6. Arithmetic on vectors",
    "text": "6. Arithmetic on vectors\n\nmy_numbers\n\n[1]  1  2  3  1  3  5 25 10\n\nresult1 &lt;- my_numbers + 1\n\n\nresult1\n\n[1]  2  3  4  2  4  6 26 11"
  },
  {
    "objectID": "slides/02-about-r.html#arithmetic-on-vectors-3",
    "href": "slides/02-about-r.html#arithmetic-on-vectors-3",
    "title": "Finding your way in R",
    "section": "6. Arithmetic on vectors",
    "text": "6. Arithmetic on vectors\n\nresult2 &lt;- my_numbers + my_numbers"
  },
  {
    "objectID": "slides/02-about-r.html#arithmetic-on-vectors-4",
    "href": "slides/02-about-r.html#arithmetic-on-vectors-4",
    "title": "Finding your way in R",
    "section": "6. Arithmetic on vectors",
    "text": "6. Arithmetic on vectors\n\nresult2 &lt;- my_numbers + my_numbers\n\n\nresult2\n\n[1]  2  4  6  2  6 10 50 20"
  },
  {
    "objectID": "slides/02-about-r.html#arithmetic-on-vectors-5",
    "href": "slides/02-about-r.html#arithmetic-on-vectors-5",
    "title": "Finding your way in R",
    "section": "6. Arithmetic on vectors",
    "text": "6. Arithmetic on vectors\n\ntwo_nums &lt;- c(5, 10)\n\nresult3 &lt;- my_numbers + two_nums"
  },
  {
    "objectID": "slides/02-about-r.html#arithmetic-on-vectors-6",
    "href": "slides/02-about-r.html#arithmetic-on-vectors-6",
    "title": "Finding your way in R",
    "section": "6. Arithmetic on vectors",
    "text": "6. Arithmetic on vectors\n\ntwo_nums &lt;- c(5, 10)\n\nresult3 &lt;- my_numbers + two_nums\n\n\nresult3\n\n[1]  6 12  8 11  8 15 30 20"
  },
  {
    "objectID": "slides/02-about-r.html#arithmetic-on-vectors-7",
    "href": "slides/02-about-r.html#arithmetic-on-vectors-7",
    "title": "Finding your way in R",
    "section": "6. Arithmetic on vectors",
    "text": "6. Arithmetic on vectors\n\nthree_nums &lt;- c(1, 5, 10)\n\nresult4 &lt;- my_numbers + three_nums\n\nWarning in my_numbers + three_nums: longer object length is not a multiple of\nshorter object length"
  },
  {
    "objectID": "slides/02-about-r.html#arithmetic-on-vectors-8",
    "href": "slides/02-about-r.html#arithmetic-on-vectors-8",
    "title": "Finding your way in R",
    "section": "6. Arithmetic on vectors",
    "text": "6. Arithmetic on vectors\n\nthree_nums &lt;- c(1, 5, 10)\n\nresult4 &lt;- my_numbers + three_nums\n\nWarning in my_numbers + three_nums: longer object length is not a multiple of\nshorter object length\n\n\n\nresult4\n\n[1]  2  7 13  2  8 15 26 15\n\n\nNote that you get a warning here. It’ll still do it, though! Don’t ignore warnings until you understand what they mean."
  },
  {
    "objectID": "slides/02-about-r.html#r-will-be-frustrating",
    "href": "slides/02-about-r.html#r-will-be-frustrating",
    "title": "Finding your way in R",
    "section": "7. R will be frustrating",
    "text": "7. R will be frustrating\n\nThe IDE tries its best to help you. Learn to attend to what it is trying to say."
  },
  {
    "objectID": "slides/02-about-r.html#time-to-make-a-plot",
    "href": "slides/02-about-r.html#time-to-make-a-plot",
    "title": "Finding your way in R",
    "section": "Time to make a plot",
    "text": "Time to make a plot\nLike before:\n\ngapminder\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows"
  },
  {
    "objectID": "slides/02-about-r.html#what-we-did",
    "href": "slides/02-about-r.html#what-we-did",
    "title": "Finding your way in R",
    "section": "What we did",
    "text": "What we did\n\nlibrary(gapminder)\n\n\nLoad the packages we need: tidyverse and gapminder"
  },
  {
    "objectID": "slides/02-about-r.html#what-we-did-1",
    "href": "slides/02-about-r.html#what-we-did-1",
    "title": "Finding your way in R",
    "section": "What we did",
    "text": "What we did\n\np &lt;- ggplot(data = gapminder, \n            mapping = aes(x = gdpPercap, \n                          y = lifeExp)) \n\n]\n\nNew object named p gets the output of the ggplot() function, given these arguments\nNotice how one of the arguments, mapping, is itself taking the output of a function named aes()"
  },
  {
    "objectID": "slides/02-about-r.html#what-we-did-2",
    "href": "slides/02-about-r.html#what-we-did-2",
    "title": "Finding your way in R",
    "section": "What we did",
    "text": "What we did\n\np + geom_point()\n\n\nShow me the output of the p object and the geom_point() function.\nThe + here acts just like the |&gt; pipe, but for ggplot functions only. (This is an accident of history.)"
  },
  {
    "objectID": "slides/02-about-r.html#and-what-is-r-doing",
    "href": "slides/02-about-r.html#and-what-is-r-doing",
    "title": "Finding your way in R",
    "section": "And what is R doing?",
    "text": "And what is R doing?\nR objects are just lists of stuff to use or things to do"
  },
  {
    "objectID": "slides/02-about-r.html#objects-are-like-bento-boxes",
    "href": "slides/02-about-r.html#objects-are-like-bento-boxes",
    "title": "Finding your way in R",
    "section": "Objects are like Bento Boxes",
    "text": "Objects are like Bento Boxes"
  },
  {
    "objectID": "slides/02-about-r.html#logic-watch-out",
    "href": "slides/02-about-r.html#logic-watch-out",
    "title": "Finding your way in R",
    "section": "Logic: Watch out!",
    "text": "Logic: Watch out!\nHere’s a gotcha. You might think you could write 3 &lt; 5 & 7 and have it be interpreted as “Three is less than five and also less than seven [True or False?]”:\n\n3 &lt; 5 & 7\n\n[1] TRUE\n\n\nIt seems to work!"
  },
  {
    "objectID": "slides/02-about-r.html#logic-watch-out-1",
    "href": "slides/02-about-r.html#logic-watch-out-1",
    "title": "Finding your way in R",
    "section": "Logic: Watch out!",
    "text": "Logic: Watch out!\nBut now try 3 &lt; 5 & 1, where your intention is “Three is less than five and also less than one [True or False?]”\n\n3 &lt; 5 & 1\n\n[1] TRUE\n\n\n\nWhat’s happening is that 3 &lt; 5 is evaluated first, and resolves to TRUE, leaving us with the expression TRUE & 1.\nR interprets this as TRUE & as.logical(1).\nIn Boolean algebra, 1 resolves to TRUE. Any other number is FALSE. So,"
  },
  {
    "objectID": "slides/02-about-r.html#logic-watch-out-2",
    "href": "slides/02-about-r.html#logic-watch-out-2",
    "title": "Finding your way in R",
    "section": "Logic: Watch out!",
    "text": "Logic: Watch out!\n\nTRUE & as.logical(1)\n\n[1] TRUE\n\n\n\n3 &lt; 5 & 3 &lt; 1\n\n[1] FALSE\n\n\n\nYou have to make your comparisons explicit."
  },
  {
    "objectID": "slides/02-about-r.html#logic-and-floating-point-arithmetic",
    "href": "slides/02-about-r.html#logic-and-floating-point-arithmetic",
    "title": "Finding your way in R",
    "section": "Logic and floating point arithmetic",
    "text": "Logic and floating point arithmetic\nLet’s evaluate 0.6 + 0.2 == 0.8"
  },
  {
    "objectID": "slides/02-about-r.html#logic-and-floating-point-arithmetic-1",
    "href": "slides/02-about-r.html#logic-and-floating-point-arithmetic-1",
    "title": "Finding your way in R",
    "section": "Logic and floating point arithmetic",
    "text": "Logic and floating point arithmetic\nLet’s evaluate 0.6 + 0.2 == 0.8\n\n0.6 + 0.2 == 0.8\n\n[1] TRUE"
  },
  {
    "objectID": "slides/02-about-r.html#logic-and-floating-point-arithmetic-2",
    "href": "slides/02-about-r.html#logic-and-floating-point-arithmetic-2",
    "title": "Finding your way in R",
    "section": "Logic and floating point arithmetic",
    "text": "Logic and floating point arithmetic\nLet’s evaluate 0.6 + 0.2 == 0.8\n\n0.6 + 0.2 == 0.8\n\n[1] TRUE\n\n\nNow let’s try 0.6 + 0.3 == 0.9"
  },
  {
    "objectID": "slides/02-about-r.html#logic-and-floating-point-arithmetic-3",
    "href": "slides/02-about-r.html#logic-and-floating-point-arithmetic-3",
    "title": "Finding your way in R",
    "section": "Logic and floating point arithmetic",
    "text": "Logic and floating point arithmetic\nLet’s evaluate 0.6 + 0.2 == 0.8\n\n0.6 + 0.2 == 0.8\n\n[1] TRUE\n\n\nNow let’s try 0.6 + 0.3 == 0.9\n\n0.6 + 0.3 == 0.9\n\n[1] FALSE\n\n\nEr. That’s not right."
  },
  {
    "objectID": "slides/02-about-r.html#welcome-to-floating-point-math",
    "href": "slides/02-about-r.html#welcome-to-floating-point-math",
    "title": "Finding your way in R",
    "section": "Welcome to floating point math!",
    "text": "Welcome to floating point math!\n\n\nIn Base 10, you can’t precisely express fractions like \\(\\frac{1}{3}\\) and \\(\\frac{1}{9}\\). They come out as repeating decimals: 0.3333… or 0.1111… You can cleanly represent fractions that use a prime factor of the base, which in the case of Base 10 are 2 and 5."
  },
  {
    "objectID": "slides/02-about-r.html#welcome-to-floating-point-math-1",
    "href": "slides/02-about-r.html#welcome-to-floating-point-math-1",
    "title": "Finding your way in R",
    "section": "Welcome to floating point math!",
    "text": "Welcome to floating point math!\n\n\nIn Base 10, you can’t precisely express fractions like \\(\\frac{1}{3}\\) and \\(\\frac{1}{9}\\). They come out as repeating decimals: 0.3333… or 0.1111… You can cleanly represent fractions that use a prime factor of the base, which in the case of Base 10 are 2 and 5.\nComputers represent numbers as binary (i.e. Base 2) floating-points. In Base 2, the only prime factor is 2. So \\(\\frac{1}{5}\\) or \\(\\frac{1}{10}\\) in binary would be repeating."
  },
  {
    "objectID": "slides/02-about-r.html#logic-and-floating-point-arithmetic-4",
    "href": "slides/02-about-r.html#logic-and-floating-point-arithmetic-4",
    "title": "Finding your way in R",
    "section": "Logic and floating point arithmetic",
    "text": "Logic and floating point arithmetic\nWhen you do binary math on repeating numbers and convert back to decimals you get tiny leftovers, and this can mess up logical comparisons of equality. The all.equal() function exists for this purpose.\n\nprint(.1 + .2)\n\n[1] 0.3\n\nprint(.1 + .2, digits=18)\n\n[1] 0.300000000000000044\n\nall.equal(.1 + .2, 0.3)\n\n[1] TRUE\n\n\nSee e.g. https://0.30000000000000004.com"
  },
  {
    "objectID": "slides/02-about-r.html#assignment-with",
    "href": "slides/02-about-r.html#assignment-with",
    "title": "Finding your way in R",
    "section": "Assignment with =",
    "text": "Assignment with =\n\nYou can use = as well as &lt;- for assignment.\n\n\nmy_numbers = c(1, 2, 3, 1, 3, 5, 25)\n\nmy_numbers\n\n[1]  1  2  3  1  3  5 25\n\n\n\nOn the other hand, = has a different meaning when used in functions.\nI’m going to use &lt;- for assignment throughout.\nBe consistent either way."
  },
  {
    "objectID": "slides/02-about-r.html#assignment-with-1",
    "href": "slides/02-about-r.html#assignment-with-1",
    "title": "Finding your way in R",
    "section": "Assignment with =",
    "text": "Assignment with ="
  },
  {
    "objectID": "slides/02-about-r.html#the-other-pipe",
    "href": "slides/02-about-r.html#the-other-pipe",
    "title": "Finding your way in R",
    "section": "The other pipe: %>%",
    "text": "The other pipe: %&gt;%\n\nThe Base R pipe operator, |&gt; is a relatively recent addition to R.\nPiping operations were originally introduced in a package called called magrittr, where it took the form %&gt;%"
  },
  {
    "objectID": "slides/02-about-r.html#the-other-pipe-1",
    "href": "slides/02-about-r.html#the-other-pipe-1",
    "title": "Finding your way in R",
    "section": "The other pipe: %>%",
    "text": "The other pipe: %&gt;%\n\nThe Base R pipe operator, |&gt; is a relatively recent addition to R.\nPiping operations were originally introduced in a package called called magrittr, where it took the form %&gt;%\nIt’s been so successful, a version of it has been incorporated into Base R. It mostly but does not quite work the same way as %&gt;% in every case."
  },
  {
    "objectID": "slides/02-about-r.html#the-other-pipe-2",
    "href": "slides/02-about-r.html#the-other-pipe-2",
    "title": "Finding your way in R",
    "section": "The other pipe: %>%",
    "text": "The other pipe: %&gt;%\n\nThe Base R pipe operator, |&gt; is a relatively recent addition to R.\nPiping operations were originally introduced in a package called called magrittr, where it took the form %&gt;%\nIt’s been so successful, a version of it has been incorporated into Base R. It mostly but does not quite work the same way as %&gt;% in every case. We’ll use the Base R pipe in this course, but you’ll see the Magrittr pipe a lot out in the world.\n\n\n\nWith the Base R pipe, you can only pass an object to the first argument in a function. This is fine for most tidyverse pipelines, where the first argument is usually (implicitly) the data. But it does mean that most Base R functions will continue not to be easily piped, as most of them do not follow the convention of passing the current data as the first argument"
  },
  {
    "objectID": "slides/02-about-r.html#object-classes",
    "href": "slides/02-about-r.html#object-classes",
    "title": "Finding your way in R",
    "section": "Object classes",
    "text": "Object classes\nObjects can have more than one (nested) class:\n\nsummary(my_numbers)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   1.500   3.000   5.714   4.000  25.000 \n\nmy_smry &lt;- summary(my_numbers) # remember, outputs can be assigned to a name, creating an object\n\nclass(summary(my_numbers)) # functions can be nested, and are evaluated from the inside out\n\n[1] \"summaryDefault\" \"table\"         \n\nclass(my_smry) # equivalent to the previous line\n\n[1] \"summaryDefault\" \"table\""
  },
  {
    "objectID": "slides/02-about-r.html#object-classes-1",
    "href": "slides/02-about-r.html#object-classes-1",
    "title": "Finding your way in R",
    "section": "Object classes",
    "text": "Object classes\n\ntypeof(my_smry)\n\n[1] \"double\"\n\nattributes(my_smry)\n\n$names\n[1] \"Min.\"    \"1st Qu.\" \"Median\"  \"Mean\"    \"3rd Qu.\" \"Max.\"   \n\n$class\n[1] \"summaryDefault\" \"table\"         \n\n## In this case, the functions extract the corresponding attribute\nclass(my_smry)\n\n[1] \"summaryDefault\" \"table\"         \n\nnames(my_smry)\n\n[1] \"Min.\"    \"1st Qu.\" \"Median\"  \"Mean\"    \"3rd Qu.\" \"Max.\""
  },
  {
    "objectID": "slides/04-tidy-data.html#load-the-packages-as-always",
    "href": "slides/04-tidy-data.html#load-the-packages-as-always",
    "title": "Tidy data",
    "section": "Load the packages, as always",
    "text": "Load the packages, as always\n\nlibrary(here)      # manage file paths\nlibrary(socviz)    # data and some useful functions\n\n\nlibrary(tidyverse) # your friend and mine\nlibrary(gapminder) # gapminder data\n\n## Quieten dplyr summarise chatter (with an 's')!\noptions(dplyr.summarise.inform = FALSE)"
  },
  {
    "objectID": "slides/04-tidy-data.html#the-tidyverse-wants-to-be-fed-tidy-data",
    "href": "slides/04-tidy-data.html#the-tidyverse-wants-to-be-fed-tidy-data",
    "title": "Tidy data",
    "section": "The Tidyverse wants to be fed tidy data",
    "text": "The Tidyverse wants to be fed tidy data"
  },
  {
    "objectID": "slides/04-tidy-data.html#get-your-data-into-long-format",
    "href": "slides/04-tidy-data.html#get-your-data-into-long-format",
    "title": "Tidy data",
    "section": "Get your data into long format",
    "text": "Get your data into long format\nVery, very often, the solution to some data-wrangling problem in Tidyverse-focused workflow is:\n\n\nGet the data in long format\n\n\nThen do the recoding thing that you want.\n\n\nThen transform it back to something wider if needed."
  },
  {
    "objectID": "slides/04-tidy-data.html#this-isnt-an-iron-rule",
    "href": "slides/04-tidy-data.html#this-isnt-an-iron-rule",
    "title": "Tidy data",
    "section": "This isn’t an iron rule",
    "text": "This isn’t an iron rule\nAs we’ll see later, dplyr is able to do “rowwise” operations if you need them."
  },
  {
    "objectID": "slides/04-tidy-data.html#tidy-data",
    "href": "slides/04-tidy-data.html#tidy-data",
    "title": "Tidy data",
    "section": "Tidy data",
    "text": "Tidy data\n\ngapminder\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows"
  },
  {
    "objectID": "slides/04-tidy-data.html#tidy-data-1",
    "href": "slides/04-tidy-data.html#tidy-data-1",
    "title": "Tidy data",
    "section": "Tidy data",
    "text": "Tidy data"
  },
  {
    "objectID": "slides/04-tidy-data.html#tidy-data-2",
    "href": "slides/04-tidy-data.html#tidy-data-2",
    "title": "Tidy data",
    "section": "Tidy data",
    "text": "Tidy data\n\n\n\nGrolemund & Wickham (2017)"
  },
  {
    "objectID": "slides/04-tidy-data.html#tidy-data-3",
    "href": "slides/04-tidy-data.html#tidy-data-3",
    "title": "Tidy data",
    "section": "Tidy data",
    "text": "Tidy data\n\n\nEach variable has its own column.\n\n\n\nEach observation has its own row.\n\n\n\nEach value has its own cell.\n\n\n\nWhen data is tidy in this way, the vectorized character of R’s way of doing things works best."
  },
  {
    "objectID": "slides/04-tidy-data.html#untidy-data-common-for-good-reasons",
    "href": "slides/04-tidy-data.html#untidy-data-common-for-good-reasons",
    "title": "Tidy data",
    "section": "Untidy data: common for good reasons",
    "text": "Untidy data: common for good reasons"
  },
  {
    "objectID": "slides/04-tidy-data.html#untidy-data-common-for-good-reasons-1",
    "href": "slides/04-tidy-data.html#untidy-data-common-for-good-reasons-1",
    "title": "Tidy data",
    "section": "Untidy data: common for good reasons",
    "text": "Untidy data: common for good reasons\nStoring data in long form is often inefficient\n\nlibrary(covdata)\ncovus |&gt; \n  filter(state == \"NY\") |&gt; \n  select(date:fips, measure:count)\n\n# A tibble: 11,872 × 5\n   date       state fips  measure                    count\n   &lt;date&gt;     &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;                      &lt;dbl&gt;\n 1 2021-03-07 NY    36    positive                 1681169\n 2 2021-03-07 NY    36    probable_cases                NA\n 3 2021-03-07 NY    36    negative                      NA\n 4 2021-03-07 NY    36    pending                       NA\n 5 2021-03-07 NY    36    hospitalized_currently      4789\n 6 2021-03-07 NY    36    hospitalized_cumulative       NA\n 7 2021-03-07 NY    36    in_icu_currently             999\n 8 2021-03-07 NY    36    in_icu_cumulative             NA\n 9 2021-03-07 NY    36    on_ventilator_currently      682\n10 2021-03-07 NY    36    on_ventilator_cumulative      NA\n# ℹ 11,862 more rows"
  },
  {
    "objectID": "slides/04-tidy-data.html#untidy-data-common-for-good-reasons-2",
    "href": "slides/04-tidy-data.html#untidy-data-common-for-good-reasons-2",
    "title": "Tidy data",
    "section": "Untidy data: common for good reasons",
    "text": "Untidy data: common for good reasons\nStoring data in wide form is easier to display in a printed table\n\nlibrary(palmerpenguins)\npenguins |&gt; \n  group_by(species, island, year) |&gt; \n  summarize(bill = round(mean(bill_length_mm, na.rm = TRUE),2)) |&gt; \n  knitr::kable()\n\n\n\n\nspecies\nisland\nyear\nbill\n\n\n\n\nAdelie\nBiscoe\n2007\n38.32\n\n\nAdelie\nBiscoe\n2008\n38.70\n\n\nAdelie\nBiscoe\n2009\n39.69\n\n\nAdelie\nDream\n2007\n39.10\n\n\nAdelie\nDream\n2008\n38.19\n\n\nAdelie\nDream\n2009\n38.15\n\n\nAdelie\nTorgersen\n2007\n38.80\n\n\nAdelie\nTorgersen\n2008\n38.77\n\n\nAdelie\nTorgersen\n2009\n39.31\n\n\nChinstrap\nDream\n2007\n48.72\n\n\nChinstrap\nDream\n2008\n48.70\n\n\nChinstrap\nDream\n2009\n49.05\n\n\nGentoo\nBiscoe\n2007\n47.01\n\n\nGentoo\nBiscoe\n2008\n46.94\n\n\nGentoo\nBiscoe\n2009\n48.50"
  },
  {
    "objectID": "slides/04-tidy-data.html#untidy-data-common-for-good-reasons-3",
    "href": "slides/04-tidy-data.html#untidy-data-common-for-good-reasons-3",
    "title": "Tidy data",
    "section": "Untidy data: common for good reasons",
    "text": "Untidy data: common for good reasons\nStoring data in wide form is easier to display in a printed table\n\npenguins |&gt; \n  group_by(species, island, year) |&gt; \n  summarize(bill = round(mean(bill_length_mm, na.rm = TRUE), 2)) |&gt; \n  pivot_wider(names_from = year, values_from = bill) |&gt; \n  knitr::kable()\n\n\n\n\nspecies\nisland\n2007\n2008\n2009\n\n\n\n\nAdelie\nBiscoe\n38.32\n38.70\n39.69\n\n\nAdelie\nDream\n39.10\n38.19\n38.15\n\n\nAdelie\nTorgersen\n38.80\n38.77\n39.31\n\n\nChinstrap\nDream\n48.72\n48.70\n49.05\n\n\nGentoo\nBiscoe\n47.01\n46.94\n48.50\n\n\n\n\n\n\n\nAgain, these tables are made directly in R with the code you see here."
  },
  {
    "objectID": "slides/04-tidy-data.html#its-also-common-for-less-good-reasons",
    "href": "slides/04-tidy-data.html#its-also-common-for-less-good-reasons",
    "title": "Tidy data",
    "section": "It’s also common for less good reasons",
    "text": "It’s also common for less good reasons"
  },
  {
    "objectID": "slides/04-tidy-data.html#its-also-common-for-less-good-reasons-1",
    "href": "slides/04-tidy-data.html#its-also-common-for-less-good-reasons-1",
    "title": "Tidy data",
    "section": "It’s also common for less good reasons",
    "text": "It’s also common for less good reasons\n\n\n\n\n\nMore than one header row\nMixed data types in some columns\nColor and typography used to encode variables and their values"
  },
  {
    "objectID": "slides/04-tidy-data.html#fix-it-before-you-import-it",
    "href": "slides/04-tidy-data.html#fix-it-before-you-import-it",
    "title": "Tidy data",
    "section": "Fix it before you import it",
    "text": "Fix it before you import it\n\nPrevention is better than cure!\nBroman KW, Woo KH (2018) “Data organization in spreadsheets.” The American Statistician 78:2–10"
  },
  {
    "objectID": "slides/04-tidy-data.html#key-points-from-broman-woo",
    "href": "slides/04-tidy-data.html#key-points-from-broman-woo",
    "title": "Tidy data",
    "section": "Key points from Broman & Woo",
    "text": "Key points from Broman & Woo\n\nUse a consistent date format"
  },
  {
    "objectID": "slides/04-tidy-data.html#key-points-from-broman-woo-1",
    "href": "slides/04-tidy-data.html#key-points-from-broman-woo-1",
    "title": "Tidy data",
    "section": "Key points from Broman & Woo",
    "text": "Key points from Broman & Woo\n\n\nNo empty cells.\nUse one row of headers only."
  },
  {
    "objectID": "slides/04-tidy-data.html#key-points-from-broman-woo-2",
    "href": "slides/04-tidy-data.html#key-points-from-broman-woo-2",
    "title": "Tidy data",
    "section": "Key points from Broman & Woo",
    "text": "Key points from Broman & Woo\n\nTidied version"
  },
  {
    "objectID": "slides/04-tidy-data.html#key-points-from-broman-woo-3",
    "href": "slides/04-tidy-data.html#key-points-from-broman-woo-3",
    "title": "Tidy data",
    "section": "Key points from Broman & Woo",
    "text": "Key points from Broman & Woo\n\nRectangle your data"
  },
  {
    "objectID": "slides/04-tidy-data.html#key-points-from-broman-woo-4",
    "href": "slides/04-tidy-data.html#key-points-from-broman-woo-4",
    "title": "Tidy data",
    "section": "Key points from Broman & Woo",
    "text": "Key points from Broman & Woo\n\nUse more than one table if needed. We can join them later."
  },
  {
    "objectID": "slides/04-tidy-data.html#key-points-from-broman-woo-5",
    "href": "slides/04-tidy-data.html#key-points-from-broman-woo-5",
    "title": "Tidy data",
    "section": "Key points from Broman & Woo",
    "text": "Key points from Broman & Woo\n\nNeeds a single header row and a consistent naming scheme."
  },
  {
    "objectID": "slides/04-tidy-data.html#key-points-from-broman-woo-6",
    "href": "slides/04-tidy-data.html#key-points-from-broman-woo-6",
    "title": "Tidy data",
    "section": "Key points from Broman & Woo",
    "text": "Key points from Broman & Woo\n\nTidied version."
  },
  {
    "objectID": "slides/04-tidy-data.html#the-most-common-tidyr-operation",
    "href": "slides/04-tidy-data.html#the-most-common-tidyr-operation",
    "title": "Tidy data",
    "section": "The most common tidyr operation",
    "text": "The most common tidyr operation\n\nedu\n\n# A tibble: 366 × 11\n   age   sex    year total elem4 elem8   hs3   hs4 coll3 coll4 median\n   &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n 1 25-34 Male   2016 21845   116   468  1427  6386  6015  7432     NA\n 2 25-34 Male   2015 21427   166   488  1584  6198  5920  7071     NA\n 3 25-34 Male   2014 21217   151   512  1611  6323  5910  6710     NA\n 4 25-34 Male   2013 20816   161   582  1747  6058  5749  6519     NA\n 5 25-34 Male   2012 20464   161   579  1707  6127  5619  6270     NA\n 6 25-34 Male   2011 20985   190   657  1791  6444  5750  6151     NA\n 7 25-34 Male   2010 20689   186   641  1866  6458  5587  5951     NA\n 8 25-34 Male   2009 20440   184   695  1806  6495  5508  5752     NA\n 9 25-34 Male   2008 20210   172   714  1874  6356  5277  5816     NA\n10 25-34 Male   2007 20024   246   757  1930  6361  5137  5593     NA\n# ℹ 356 more rows\n\n\n\nThe “Level of Schooling Attained” measure is spread across the columns, from elem4 to coll4.\nThis is fine for a compact table, but for us it should be a single measure, say, “education”."
  },
  {
    "objectID": "slides/04-tidy-data.html#wide-to-long-with-pivot_longer",
    "href": "slides/04-tidy-data.html#wide-to-long-with-pivot_longer",
    "title": "Tidy data",
    "section": "Wide to long with pivot_longer()",
    "text": "Wide to long with pivot_longer()\n\nWe’re going to pivot the table. That is, we’ll put the columns elem4:coll4 into a new column, creating a new categorical measure named education. The numbers currently under each column will become a new value column corresponding to that level of education.\n\n\nedu |&gt; \n  pivot_longer(elem4:coll4, names_to = \"education\")\n\n# A tibble: 2,196 × 7\n   age   sex    year total median education value\n   &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt;  &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt;\n 1 25-34 Male   2016 21845     NA elem4       116\n 2 25-34 Male   2016 21845     NA elem8       468\n 3 25-34 Male   2016 21845     NA hs3        1427\n 4 25-34 Male   2016 21845     NA hs4        6386\n 5 25-34 Male   2016 21845     NA coll3      6015\n 6 25-34 Male   2016 21845     NA coll4      7432\n 7 25-34 Male   2015 21427     NA elem4       166\n 8 25-34 Male   2015 21427     NA elem8       488\n 9 25-34 Male   2015 21427     NA hs3        1584\n10 25-34 Male   2015 21427     NA hs4        6198\n# ℹ 2,186 more rows"
  },
  {
    "objectID": "slides/04-tidy-data.html#wide-to-long-with-pivot_longer-1",
    "href": "slides/04-tidy-data.html#wide-to-long-with-pivot_longer-1",
    "title": "Tidy data",
    "section": "Wide to long with pivot_longer()",
    "text": "Wide to long with pivot_longer()\n\nWe can name the “value” column to whatever we like. Here it’s a number of people, so let’s call it “n”.\n\n\nedu |&gt; \n  pivot_longer(elem4:coll4, names_to = \"education\", values_to = \"n\")\n\n# A tibble: 2,196 × 7\n   age   sex    year total median education     n\n   &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt;  &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt;\n 1 25-34 Male   2016 21845     NA elem4       116\n 2 25-34 Male   2016 21845     NA elem8       468\n 3 25-34 Male   2016 21845     NA hs3        1427\n 4 25-34 Male   2016 21845     NA hs4        6386\n 5 25-34 Male   2016 21845     NA coll3      6015\n 6 25-34 Male   2016 21845     NA coll4      7432\n 7 25-34 Male   2015 21427     NA elem4       166\n 8 25-34 Male   2015 21427     NA elem8       488\n 9 25-34 Male   2015 21427     NA hs3        1584\n10 25-34 Male   2015 21427     NA hs4        6198\n# ℹ 2,186 more rows"
  },
  {
    "objectID": "slides/04-tidy-data.html#lets-recode-it-while-were-here",
    "href": "slides/04-tidy-data.html#lets-recode-it-while-were-here",
    "title": "Tidy data",
    "section": "Let’s recode() it while we’re here",
    "text": "Let’s recode() it while we’re here\n\nedu |&gt; \n  pivot_longer(elem4:coll4, names_to = \"education\", values_to = \"n\") |&gt; \n  mutate(education = recode(education, \n                            elem4 = \"Elementary 4\", elem8 = \"Elementary 8\", \n                            hs3 = \"High School 3\", hs4 = \"High School 4\",\n                            coll3 = \"College 3\", coll4 = \"College 4\"))\n\n# A tibble: 2,196 × 7\n   age   sex    year total median education         n\n   &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt;  &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt;\n 1 25-34 Male   2016 21845     NA Elementary 4    116\n 2 25-34 Male   2016 21845     NA Elementary 8    468\n 3 25-34 Male   2016 21845     NA High School 3  1427\n 4 25-34 Male   2016 21845     NA High School 4  6386\n 5 25-34 Male   2016 21845     NA College 3      6015\n 6 25-34 Male   2016 21845     NA College 4      7432\n 7 25-34 Male   2015 21427     NA Elementary 4    166\n 8 25-34 Male   2015 21427     NA Elementary 8    488\n 9 25-34 Male   2015 21427     NA High School 3  1584\n10 25-34 Male   2015 21427     NA High School 4  6198\n# ℹ 2,186 more rows\n\n\n\nThe argument order of recode() is inconsistent with other tidyverse functions and it may be superceded in the future."
  },
  {
    "objectID": "slides/04-tidy-data.html#pivot_longer-implies-pivot_wider",
    "href": "slides/04-tidy-data.html#pivot_longer-implies-pivot_wider",
    "title": "Tidy data",
    "section": "pivot_longer() implies pivot_wider()",
    "text": "pivot_longer() implies pivot_wider()\n\ngapminder\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\nBut they’re not symmetric operations!"
  },
  {
    "objectID": "slides/04-tidy-data.html#pivot_longer-implies-pivot_wider-1",
    "href": "slides/04-tidy-data.html#pivot_longer-implies-pivot_wider-1",
    "title": "Tidy data",
    "section": "pivot_longer() implies pivot_wider()",
    "text": "pivot_longer() implies pivot_wider()\n\ngapminder |&gt; \n  select(country, continent, year, lifeExp) |&gt; \n  pivot_wider(names_from = year, values_from = lifeExp) \n\n# A tibble: 142 × 14\n   country     continent `1952` `1957` `1962` `1967` `1972` `1977` `1982` `1987`\n   &lt;fct&gt;       &lt;fct&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 Afghanistan Asia        28.8   30.3   32.0   34.0   36.1   38.4   39.9   40.8\n 2 Albania     Europe      55.2   59.3   64.8   66.2   67.7   68.9   70.4   72  \n 3 Algeria     Africa      43.1   45.7   48.3   51.4   54.5   58.0   61.4   65.8\n 4 Angola      Africa      30.0   32.0   34     36.0   37.9   39.5   39.9   39.9\n 5 Argentina   Americas    62.5   64.4   65.1   65.6   67.1   68.5   69.9   70.8\n 6 Australia   Oceania     69.1   70.3   70.9   71.1   71.9   73.5   74.7   76.3\n 7 Austria     Europe      66.8   67.5   69.5   70.1   70.6   72.2   73.2   74.9\n 8 Bahrain     Asia        50.9   53.8   56.9   59.9   63.3   65.6   69.1   70.8\n 9 Bangladesh  Asia        37.5   39.3   41.2   43.5   45.3   46.9   50.0   52.8\n10 Belgium     Europe      68     69.2   70.2   70.9   71.4   72.8   73.9   75.4\n# ℹ 132 more rows\n# ℹ 4 more variables: `1992` &lt;dbl&gt;, `1997` &lt;dbl&gt;, `2002` &lt;dbl&gt;, `2007` &lt;dbl&gt;"
  },
  {
    "objectID": "slides/04-tidy-data.html#what-about-multiple-columns",
    "href": "slides/04-tidy-data.html#what-about-multiple-columns",
    "title": "Tidy data",
    "section": "What about multiple columns?",
    "text": "What about multiple columns?\n\nThis is a pretty common problem. A first thought (“Just don’t mention the other columns”) isn’t it:\n\n\ngapminder |&gt; \n  pivot_wider(names_from = year, values_from = lifeExp) \n\n# A tibble: 1,704 × 16\n   country  continent    pop gdpPercap `1952` `1957` `1962` `1967` `1972` `1977`\n   &lt;fct&gt;    &lt;fct&gt;      &lt;int&gt;     &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 Afghani… Asia      8.43e6      779.   28.8   NA     NA     NA     NA     NA  \n 2 Afghani… Asia      9.24e6      821.   NA     30.3   NA     NA     NA     NA  \n 3 Afghani… Asia      1.03e7      853.   NA     NA     32.0   NA     NA     NA  \n 4 Afghani… Asia      1.15e7      836.   NA     NA     NA     34.0   NA     NA  \n 5 Afghani… Asia      1.31e7      740.   NA     NA     NA     NA     36.1   NA  \n 6 Afghani… Asia      1.49e7      786.   NA     NA     NA     NA     NA     38.4\n 7 Afghani… Asia      1.29e7      978.   NA     NA     NA     NA     NA     NA  \n 8 Afghani… Asia      1.39e7      852.   NA     NA     NA     NA     NA     NA  \n 9 Afghani… Asia      1.63e7      649.   NA     NA     NA     NA     NA     NA  \n10 Afghani… Asia      2.22e7      635.   NA     NA     NA     NA     NA     NA  \n# ℹ 1,694 more rows\n# ℹ 6 more variables: `1982` &lt;dbl&gt;, `1987` &lt;dbl&gt;, `1992` &lt;dbl&gt;, `1997` &lt;dbl&gt;,\n#   `2002` &lt;dbl&gt;, `2007` &lt;dbl&gt;\n\n\n\npop and gdpPercap are still long, and now our table is really sparse."
  },
  {
    "objectID": "slides/04-tidy-data.html#what-about-multiple-columns-1",
    "href": "slides/04-tidy-data.html#what-about-multiple-columns-1",
    "title": "Tidy data",
    "section": "What about multiple columns?",
    "text": "What about multiple columns?\n\nWe need to specify that we want values from more than one column.\n\ngapminder |&gt; \n  select(country, continent, year, lifeExp, gdpPercap) |&gt; \n  pivot_wider(names_from = year, values_from = c(lifeExp, gdpPercap)) \n\n# A tibble: 142 × 26\n   country     continent lifeExp_1952 lifeExp_1957 lifeExp_1962 lifeExp_1967\n   &lt;fct&gt;       &lt;fct&gt;            &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n 1 Afghanistan Asia              28.8         30.3         32.0         34.0\n 2 Albania     Europe            55.2         59.3         64.8         66.2\n 3 Algeria     Africa            43.1         45.7         48.3         51.4\n 4 Angola      Africa            30.0         32.0         34           36.0\n 5 Argentina   Americas          62.5         64.4         65.1         65.6\n 6 Australia   Oceania           69.1         70.3         70.9         71.1\n 7 Austria     Europe            66.8         67.5         69.5         70.1\n 8 Bahrain     Asia              50.9         53.8         56.9         59.9\n 9 Bangladesh  Asia              37.5         39.3         41.2         43.5\n10 Belgium     Europe            68           69.2         70.2         70.9\n# ℹ 132 more rows\n# ℹ 20 more variables: lifeExp_1972 &lt;dbl&gt;, lifeExp_1977 &lt;dbl&gt;,\n#   lifeExp_1982 &lt;dbl&gt;, lifeExp_1987 &lt;dbl&gt;, lifeExp_1992 &lt;dbl&gt;,\n#   lifeExp_1997 &lt;dbl&gt;, lifeExp_2002 &lt;dbl&gt;, lifeExp_2007 &lt;dbl&gt;,\n#   gdpPercap_1952 &lt;dbl&gt;, gdpPercap_1957 &lt;dbl&gt;, gdpPercap_1962 &lt;dbl&gt;,\n#   gdpPercap_1967 &lt;dbl&gt;, gdpPercap_1972 &lt;dbl&gt;, gdpPercap_1977 &lt;dbl&gt;,\n#   gdpPercap_1982 &lt;dbl&gt;, gdpPercap_1987 &lt;dbl&gt;, gdpPercap_1992 &lt;dbl&gt;, …\n\n\n\n\nThis will give us a very wide table, but it’s what we wanted."
  },
  {
    "objectID": "slides/04-tidy-data.html#pivot-wider-while-summarizing",
    "href": "slides/04-tidy-data.html#pivot-wider-while-summarizing",
    "title": "Tidy data",
    "section": "Pivot wider while summarizing",
    "text": "Pivot wider while summarizing\n\n# Some made-up data\ndfstrat &lt;- read_csv(here::here(\"data\", \"dfstrat.csv\"))\ndfstrat \n\n# A tibble: 1,000 × 5\n   stratum sex   race  educ  income\n     &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n 1       6 F     W     HS      83.7\n 2       5 F     W     BA     128. \n 3       3 F     B     HS      66.3\n 4       3 F     W     HS     111. \n 5       6 M     W     BA     116. \n 6       7 M     B     HS     159. \n 7       8 M     W     BA     131. \n 8       3 M     W     BA      94.4\n 9       7 F     B     HS     146. \n10       2 F     W     BA      88.8\n# ℹ 990 more rows\n\n\n\nLet’s say we want to transform this to a wider format, specifically by widening the educ column, so we end up with columns for both the HS and BA categories, and as we do so we want to calculate both the mean of income and the total n within each group."
  },
  {
    "objectID": "slides/04-tidy-data.html#pivot-wider-while-summarizing-1",
    "href": "slides/04-tidy-data.html#pivot-wider-while-summarizing-1",
    "title": "Tidy data",
    "section": "Pivot wider while summarizing",
    "text": "Pivot wider while summarizing\n\n\n\ndfstrat &lt;- read_csv(here::here(\"data\", \"dfstrat.csv\"))"
  },
  {
    "objectID": "slides/04-tidy-data.html#pivot-wider-while-summarizing-2",
    "href": "slides/04-tidy-data.html#pivot-wider-while-summarizing-2",
    "title": "Tidy data",
    "section": "Pivot wider while summarizing",
    "text": "Pivot wider while summarizing\n\n\n\ndfstrat &lt;- read_csv(here::here(\"data\", \"dfstrat.csv\"))\ndfstrat\n\n\n\n\n# A tibble: 1,000 × 5\n   stratum sex   race  educ  income\n     &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n 1       6 F     W     HS      83.7\n 2       5 F     W     BA     128. \n 3       3 F     B     HS      66.3\n 4       3 F     W     HS     111. \n 5       6 M     W     BA     116. \n 6       7 M     B     HS     159. \n 7       8 M     W     BA     131. \n 8       3 M     W     BA      94.4\n 9       7 F     B     HS     146. \n10       2 F     W     BA      88.8\n# ℹ 990 more rows"
  },
  {
    "objectID": "slides/04-tidy-data.html#pivot-wider-while-summarizing-3",
    "href": "slides/04-tidy-data.html#pivot-wider-while-summarizing-3",
    "title": "Tidy data",
    "section": "Pivot wider while summarizing",
    "text": "Pivot wider while summarizing\n\n\n\ndfstrat &lt;- read_csv(here::here(\"data\", \"dfstrat.csv\"))\ndfstrat |&gt;\n    group_by(sex, race, stratum, educ)\n\n\n\n\n# A tibble: 1,000 × 5\n# Groups:   sex, race, stratum, educ [64]\n   stratum sex   race  educ  income\n     &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n 1       6 F     W     HS      83.7\n 2       5 F     W     BA     128. \n 3       3 F     B     HS      66.3\n 4       3 F     W     HS     111. \n 5       6 M     W     BA     116. \n 6       7 M     B     HS     159. \n 7       8 M     W     BA     131. \n 8       3 M     W     BA      94.4\n 9       7 F     B     HS     146. \n10       2 F     W     BA      88.8\n# ℹ 990 more rows"
  },
  {
    "objectID": "slides/04-tidy-data.html#pivot-wider-while-summarizing-4",
    "href": "slides/04-tidy-data.html#pivot-wider-while-summarizing-4",
    "title": "Tidy data",
    "section": "Pivot wider while summarizing",
    "text": "Pivot wider while summarizing\n\n\n\ndfstrat &lt;- read_csv(here::here(\"data\", \"dfstrat.csv\"))\ndfstrat |&gt;\n    group_by(sex, race, stratum, educ) |&gt;\n    summarize(mean_inc = mean(income),\n              n = n())\n\n\n\n\n# A tibble: 64 × 6\n# Groups:   sex, race, stratum [32]\n   sex   race  stratum educ  mean_inc     n\n   &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;int&gt;\n 1 F     B           1 BA        93.8    19\n 2 F     B           1 HS        99.3     6\n 3 F     B           2 BA        89.7    11\n 4 F     B           2 HS        93.0    16\n 5 F     B           3 BA       112.     13\n 6 F     B           3 HS        95.0    16\n 7 F     B           4 BA       108.     14\n 8 F     B           4 HS        96.1    15\n 9 F     B           5 BA        91.0    11\n10 F     B           5 HS        92.6    15\n# ℹ 54 more rows"
  },
  {
    "objectID": "slides/04-tidy-data.html#pivot-wider-while-summarizing-5",
    "href": "slides/04-tidy-data.html#pivot-wider-while-summarizing-5",
    "title": "Tidy data",
    "section": "Pivot wider while summarizing",
    "text": "Pivot wider while summarizing\n\n\n\ndfstrat &lt;- read_csv(here::here(\"data\", \"dfstrat.csv\"))\ndfstrat |&gt;\n    group_by(sex, race, stratum, educ) |&gt;\n    summarize(mean_inc = mean(income),\n              n = n()) |&gt;\n    pivot_wider(names_from = (educ),\n                values_from = c(mean_inc, n))\n\n\n\n\n# A tibble: 32 × 7\n# Groups:   sex, race, stratum [32]\n   sex   race  stratum mean_inc_BA mean_inc_HS  n_BA  n_HS\n   &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt; &lt;int&gt; &lt;int&gt;\n 1 F     B           1        93.8        99.3    19     6\n 2 F     B           2        89.7        93.0    11    16\n 3 F     B           3       112.         95.0    13    16\n 4 F     B           4       108.         96.1    14    15\n 5 F     B           5        91.0        92.6    11    15\n 6 F     B           6        93.0       116.     15    15\n 7 F     B           7       102.        121.     13    13\n 8 F     B           8       105.         88.3    14     8\n 9 F     W           1        92.6       110.     19    13\n10 F     W           2        98.5       101.     15    19\n# ℹ 22 more rows"
  },
  {
    "objectID": "slides/04-tidy-data.html#pivot-wider-while-summarizing-6",
    "href": "slides/04-tidy-data.html#pivot-wider-while-summarizing-6",
    "title": "Tidy data",
    "section": "Pivot wider while summarizing",
    "text": "Pivot wider while summarizing\n\n\n\ndfstrat &lt;- read_csv(here::here(\"data\", \"dfstrat.csv\"))\ndfstrat |&gt;\n    group_by(sex, race, stratum, educ) |&gt;\n    summarize(mean_inc = mean(income),\n              n = n()) |&gt;\n    pivot_wider(names_from = (educ),\n                values_from = c(mean_inc, n)) |&gt;\n    ungroup()\n\n\n\n\n# A tibble: 32 × 7\n   sex   race  stratum mean_inc_BA mean_inc_HS  n_BA  n_HS\n   &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt; &lt;int&gt; &lt;int&gt;\n 1 F     B           1        93.8        99.3    19     6\n 2 F     B           2        89.7        93.0    11    16\n 3 F     B           3       112.         95.0    13    16\n 4 F     B           4       108.         96.1    14    15\n 5 F     B           5        91.0        92.6    11    15\n 6 F     B           6        93.0       116.     15    15\n 7 F     B           7       102.        121.     13    13\n 8 F     B           8       105.         88.3    14     8\n 9 F     W           1        92.6       110.     19    13\n10 F     W           2        98.5       101.     15    19\n# ℹ 22 more rows\n\n\n\nHere we end up with sex-by-race-by-stratum in the rows, and the income-by-education means, and income-by-education Ns, in their own columns."
  },
  {
    "objectID": "slides/04-tidy-data.html#separate-and-unite-columns",
    "href": "slides/04-tidy-data.html#separate-and-unite-columns",
    "title": "Tidy data",
    "section": "separate() and unite() columns",
    "text": "separate() and unite() columns\n\n## tribble() lets you make tibbles by hand\ndf &lt;- tribble(\n  ~name, ~occupation,\n  \"Nero.Wolfe\", \"Private Detective\",\n  \"Archie.Goodwin\", \"Personal Assistant\",\n  \"Fritz.Brenner\", \"Cook and Butler\",\n  \"Theodore.Horstmann\", \"Orchid Expert\"\n)\n\ndf\n\n# A tibble: 4 × 2\n  name               occupation        \n  &lt;chr&gt;              &lt;chr&gt;             \n1 Nero.Wolfe         Private Detective \n2 Archie.Goodwin     Personal Assistant\n3 Fritz.Brenner      Cook and Butler   \n4 Theodore.Horstmann Orchid Expert"
  },
  {
    "objectID": "slides/04-tidy-data.html#separate-and-unite-columns-1",
    "href": "slides/04-tidy-data.html#separate-and-unite-columns-1",
    "title": "Tidy data",
    "section": "separate() and unite() columns",
    "text": "separate() and unite() columns\n\n## tribble() lets you make tibbles by hand\ndf &lt;- tribble(\n  ~name, ~occupation,\n  \"Nero.Wolfe\", \"Private Detective\",\n  \"Archie.Goodwin\", \"Personal Assistant\",\n  \"Fritz.Brenner\", \"Cook and Butler\",\n  \"Theodore.Horstmann\", \"Orchid Expert\"\n)\n\ndf\n\n# A tibble: 4 × 2\n  name               occupation        \n  &lt;chr&gt;              &lt;chr&gt;             \n1 Nero.Wolfe         Private Detective \n2 Archie.Goodwin     Personal Assistant\n3 Fritz.Brenner      Cook and Butler   \n4 Theodore.Horstmann Orchid Expert"
  },
  {
    "objectID": "slides/04-tidy-data.html#separate-and-unite-1",
    "href": "slides/04-tidy-data.html#separate-and-unite-1",
    "title": "Tidy data",
    "section": "Separate and unite",
    "text": "Separate and unite\n\n\n\ndf\n\n\n\n\n# A tibble: 4 × 2\n  name               occupation        \n  &lt;chr&gt;              &lt;chr&gt;             \n1 Nero.Wolfe         Private Detective \n2 Archie.Goodwin     Personal Assistant\n3 Fritz.Brenner      Cook and Butler   \n4 Theodore.Horstmann Orchid Expert"
  },
  {
    "objectID": "slides/04-tidy-data.html#separate-and-unite-2",
    "href": "slides/04-tidy-data.html#separate-and-unite-2",
    "title": "Tidy data",
    "section": "Separate and unite",
    "text": "Separate and unite\n\n\n\ndf |&gt;\n  separate(name, into = c(\"first\", \"last\"))\n\n\n\n\n# A tibble: 4 × 3\n  first    last      occupation        \n  &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;             \n1 Nero     Wolfe     Private Detective \n2 Archie   Goodwin   Personal Assistant\n3 Fritz    Brenner   Cook and Butler   \n4 Theodore Horstmann Orchid Expert"
  },
  {
    "objectID": "slides/04-tidy-data.html#separate-and-unite-3",
    "href": "slides/04-tidy-data.html#separate-and-unite-3",
    "title": "Tidy data",
    "section": "Separate and unite",
    "text": "Separate and unite\n\n\n\ndf |&gt;\n  separate(name, into = c(\"first\", \"last\")) |&gt;\n  unite(\"full_name\", first:last, sep = \" \")\n\n\n\n\n# A tibble: 4 × 2\n  full_name          occupation        \n  &lt;chr&gt;              &lt;chr&gt;             \n1 Nero Wolfe         Private Detective \n2 Archie Goodwin     Personal Assistant\n3 Fritz Brenner      Cook and Butler   \n4 Theodore Horstmann Orchid Expert"
  },
  {
    "objectID": "slides/04-tidy-data.html#separate-and-unite-4",
    "href": "slides/04-tidy-data.html#separate-and-unite-4",
    "title": "Tidy data",
    "section": "Separate and unite",
    "text": "Separate and unite\n\n\n\ndf |&gt;\n  separate(name, into = c(\"first\", \"last\")) |&gt;\n  unite(\"full_name\", first:last, sep = \" \") |&gt;\n  unite(\"both_together\", full_name:occupation,\n        sep = \", \", remove = FALSE)\n\n\n\n\n# A tibble: 4 × 3\n  both_together                      full_name          occupation        \n  &lt;chr&gt;                              &lt;chr&gt;              &lt;chr&gt;             \n1 Nero Wolfe, Private Detective      Nero Wolfe         Private Detective \n2 Archie Goodwin, Personal Assistant Archie Goodwin     Personal Assistant\n3 Fritz Brenner, Cook and Butler     Fritz Brenner      Cook and Butler   \n4 Theodore Horstmann, Orchid Expert  Theodore Horstmann Orchid Expert"
  },
  {
    "objectID": "slides/04-tidy-data.html#separate-and-unite-5",
    "href": "slides/04-tidy-data.html#separate-and-unite-5",
    "title": "Tidy data",
    "section": "Separate and unite",
    "text": "Separate and unite\n\n\n\ndf |&gt;\n  separate(name, into = c(\"first\", \"last\")) |&gt;\n  unite(\"full_name\", first:last, sep = \" \") |&gt;\n  unite(\"both_together\", full_name:occupation,\n        sep = \", \", remove = FALSE)\n\n\n\n\n# A tibble: 4 × 3\n  both_together                      full_name          occupation        \n  &lt;chr&gt;                              &lt;chr&gt;              &lt;chr&gt;             \n1 Nero Wolfe, Private Detective      Nero Wolfe         Private Detective \n2 Archie Goodwin, Personal Assistant Archie Goodwin     Personal Assistant\n3 Fritz Brenner, Cook and Butler     Fritz Brenner      Cook and Butler   \n4 Theodore Horstmann, Orchid Expert  Theodore Horstmann Orchid Expert"
  },
  {
    "objectID": "slides/04-tidy-data.html#separate-and-unite-6",
    "href": "slides/04-tidy-data.html#separate-and-unite-6",
    "title": "Tidy data",
    "section": "Separate and unite",
    "text": "Separate and unite\n\n\n\ndf\n\n\n\n\n# A tibble: 4 × 2\n  name               occupation        \n  &lt;chr&gt;              &lt;chr&gt;             \n1 Nero.Wolfe         Private Detective \n2 Archie.Goodwin     Personal Assistant\n3 Fritz.Brenner      Cook and Butler   \n4 Theodore.Horstmann Orchid Expert"
  },
  {
    "objectID": "slides/04-tidy-data.html#separate-and-unite-7",
    "href": "slides/04-tidy-data.html#separate-and-unite-7",
    "title": "Tidy data",
    "section": "Separate and unite",
    "text": "Separate and unite\n\n\n\ndf |&gt;\n  separate(name, into = c(\"first\", \"last\"))\n\n\n\n\n# A tibble: 4 × 3\n  first    last      occupation        \n  &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;             \n1 Nero     Wolfe     Private Detective \n2 Archie   Goodwin   Personal Assistant\n3 Fritz    Brenner   Cook and Butler   \n4 Theodore Horstmann Orchid Expert"
  },
  {
    "objectID": "slides/04-tidy-data.html#separate-and-unite-8",
    "href": "slides/04-tidy-data.html#separate-and-unite-8",
    "title": "Tidy data",
    "section": "Separate and unite",
    "text": "Separate and unite\n\n\n\ndf |&gt;\n  separate(name, into = c(\"first\", \"last\")) |&gt;\n  unite(\"full_name\", first:last)\n\n\n\n\n# A tibble: 4 × 2\n  full_name          occupation        \n  &lt;chr&gt;              &lt;chr&gt;             \n1 Nero_Wolfe         Private Detective \n2 Archie_Goodwin     Personal Assistant\n3 Fritz_Brenner      Cook and Butler   \n4 Theodore_Horstmann Orchid Expert"
  },
  {
    "objectID": "slides/04-tidy-data.html#separate-and-unite-9",
    "href": "slides/04-tidy-data.html#separate-and-unite-9",
    "title": "Tidy data",
    "section": "Separate and unite",
    "text": "Separate and unite\n\n\n\ndf |&gt;\n  separate(name, into = c(\"first\", \"last\")) |&gt;\n  unite(\"full_name\", first:last) |&gt;\n  separate(full_name, into = c(\"first\", \"last\"))\n\n\n\n\n# A tibble: 4 × 3\n  first    last      occupation        \n  &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;             \n1 Nero     Wolfe     Private Detective \n2 Archie   Goodwin   Personal Assistant\n3 Fritz    Brenner   Cook and Butler   \n4 Theodore Horstmann Orchid Expert"
  },
  {
    "objectID": "slides/04-tidy-data.html#separate-and-unite-10",
    "href": "slides/04-tidy-data.html#separate-and-unite-10",
    "title": "Tidy data",
    "section": "Separate and unite",
    "text": "Separate and unite\n\n\n\ndf |&gt;\n  separate(name, into = c(\"first\", \"last\")) |&gt;\n  unite(\"full_name\", first:last) |&gt;\n  separate(full_name, into = c(\"first\", \"last\"))\n\n\n\n\n# A tibble: 4 × 3\n  first    last      occupation        \n  &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;             \n1 Nero     Wolfe     Private Detective \n2 Archie   Goodwin   Personal Assistant\n3 Fritz    Brenner   Cook and Butler   \n4 Theodore Horstmann Orchid Expert     \n\n\n\nThe underscore, _, is the default uniting character."
  },
  {
    "objectID": "slides/04-tidy-data.html#separate-and-unite-11",
    "href": "slides/04-tidy-data.html#separate-and-unite-11",
    "title": "Tidy data",
    "section": "Separate and unite",
    "text": "Separate and unite\n\n\n\ngss_sm\n\n\n\n\n# A tibble: 2,867 × 32\n    year    id ballot       age childs sibs   degree race  sex   region income16\n   &lt;dbl&gt; &lt;dbl&gt; &lt;labelled&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;labe&gt; &lt;fct&gt;  &lt;fct&gt; &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;   \n 1  2016     1 1             47      3 2      Bache… White Male  New E… $170000…\n 2  2016     2 2             61      0 3      High … White Male  New E… $50000 …\n 3  2016     3 3             72      2 3      Bache… White Male  New E… $75000 …\n 4  2016     4 1             43      4 3      High … White Fema… New E… $170000…\n 5  2016     5 3             55      2 2      Gradu… White Fema… New E… $170000…\n 6  2016     6 2             53      2 2      Junio… White Fema… New E… $60000 …\n 7  2016     7 1             50      2 2      High … White Male  New E… $170000…\n 8  2016     8 3             23      3 6      High … Other Fema… Middl… $30000 …\n 9  2016     9 1             45      3 5      High … Black Male  Middl… $60000 …\n10  2016    10 3             71      4 1      Junio… White Male  Middl… $60000 …\n# ℹ 2,857 more rows\n# ℹ 21 more variables: relig &lt;fct&gt;, marital &lt;fct&gt;, padeg &lt;fct&gt;, madeg &lt;fct&gt;,\n#   partyid &lt;fct&gt;, polviews &lt;fct&gt;, happy &lt;fct&gt;, partners &lt;fct&gt;, grass &lt;fct&gt;,\n#   zodiac &lt;fct&gt;, pres12 &lt;labelled&gt;, wtssall &lt;dbl&gt;, income_rc &lt;fct&gt;,\n#   agegrp &lt;fct&gt;, ageq &lt;fct&gt;, siblings &lt;fct&gt;, kids &lt;fct&gt;, religion &lt;fct&gt;,\n#   bigregion &lt;fct&gt;, partners_rc &lt;fct&gt;, obama &lt;dbl&gt;"
  },
  {
    "objectID": "slides/04-tidy-data.html#separate-and-unite-12",
    "href": "slides/04-tidy-data.html#separate-and-unite-12",
    "title": "Tidy data",
    "section": "Separate and unite",
    "text": "Separate and unite\n\n\n\ngss_sm |&gt;\n    select(race, degree)\n\n\n\n\n# A tibble: 2,867 × 2\n   race  degree        \n   &lt;fct&gt; &lt;fct&gt;         \n 1 White Bachelor      \n 2 White High School   \n 3 White Bachelor      \n 4 White High School   \n 5 White Graduate      \n 6 White Junior College\n 7 White High School   \n 8 Other High School   \n 9 Black High School   \n10 White Junior College\n# ℹ 2,857 more rows"
  },
  {
    "objectID": "slides/04-tidy-data.html#separate-and-unite-13",
    "href": "slides/04-tidy-data.html#separate-and-unite-13",
    "title": "Tidy data",
    "section": "Separate and unite",
    "text": "Separate and unite\n\n\n\ngss_sm |&gt;\n    select(race, degree) |&gt;\n    mutate(racedeg = interaction(race, degree))\n\n\n\n\n# A tibble: 2,867 × 3\n   race  degree         racedeg             \n   &lt;fct&gt; &lt;fct&gt;          &lt;fct&gt;               \n 1 White Bachelor       White.Bachelor      \n 2 White High School    White.High School   \n 3 White Bachelor       White.Bachelor      \n 4 White High School    White.High School   \n 5 White Graduate       White.Graduate      \n 6 White Junior College White.Junior College\n 7 White High School    White.High School   \n 8 Other High School    Other.High School   \n 9 Black High School    Black.High School   \n10 White Junior College White.Junior College\n# ℹ 2,857 more rows"
  },
  {
    "objectID": "slides/04-tidy-data.html#separate-and-unite-14",
    "href": "slides/04-tidy-data.html#separate-and-unite-14",
    "title": "Tidy data",
    "section": "Separate and unite",
    "text": "Separate and unite\n\n\n\ngss_sm |&gt;\n    select(race, degree) |&gt;\n    mutate(racedeg = interaction(race, degree)) |&gt;\n    group_by(racedeg)\n\n\n\n\n# A tibble: 2,867 × 3\n# Groups:   racedeg [16]\n   race  degree         racedeg             \n   &lt;fct&gt; &lt;fct&gt;          &lt;fct&gt;               \n 1 White Bachelor       White.Bachelor      \n 2 White High School    White.High School   \n 3 White Bachelor       White.Bachelor      \n 4 White High School    White.High School   \n 5 White Graduate       White.Graduate      \n 6 White Junior College White.Junior College\n 7 White High School    White.High School   \n 8 Other High School    Other.High School   \n 9 Black High School    Black.High School   \n10 White Junior College White.Junior College\n# ℹ 2,857 more rows"
  },
  {
    "objectID": "slides/04-tidy-data.html#separate-and-unite-15",
    "href": "slides/04-tidy-data.html#separate-and-unite-15",
    "title": "Tidy data",
    "section": "Separate and unite",
    "text": "Separate and unite\n\n\n\ngss_sm |&gt;\n    select(race, degree) |&gt;\n    mutate(racedeg = interaction(race, degree)) |&gt;\n    group_by(racedeg) |&gt;\n    tally()\n\n\n\n\n# A tibble: 16 × 2\n   racedeg                  n\n   &lt;fct&gt;                &lt;int&gt;\n 1 White.Lt High School   197\n 2 Black.Lt High School    60\n 3 Other.Lt High School    71\n 4 White.High School     1057\n 5 Black.High School      292\n 6 Other.High School      112\n 7 White.Junior College   166\n 8 Black.Junior College    33\n 9 Other.Junior College    17\n10 White.Bachelor         426\n11 Black.Bachelor          71\n12 Other.Bachelor          39\n13 White.Graduate         250\n14 Black.Graduate          31\n15 Other.Graduate          37\n16 &lt;NA&gt;                     8"
  },
  {
    "objectID": "slides/04-tidy-data.html#separate-and-unite-16",
    "href": "slides/04-tidy-data.html#separate-and-unite-16",
    "title": "Tidy data",
    "section": "Separate and unite",
    "text": "Separate and unite\n\n\n\ngss_sm |&gt;\n    select(race, degree) |&gt;\n    mutate(racedeg = interaction(race, degree)) |&gt;\n    group_by(racedeg) |&gt;\n    tally() |&gt;\n    separate(racedeg, sep = \"\\\\.\", into = c(\"race\", \"degree\"))\n\n\n\n\n# A tibble: 16 × 3\n   race  degree             n\n   &lt;chr&gt; &lt;chr&gt;          &lt;int&gt;\n 1 White Lt High School   197\n 2 Black Lt High School    60\n 3 Other Lt High School    71\n 4 White High School     1057\n 5 Black High School      292\n 6 Other High School      112\n 7 White Junior College   166\n 8 Black Junior College    33\n 9 Other Junior College    17\n10 White Bachelor         426\n11 Black Bachelor          71\n12 Other Bachelor          39\n13 White Graduate         250\n14 Black Graduate          31\n15 Other Graduate          37\n16 &lt;NA&gt;  &lt;NA&gt;               8\n\n\n\nThis one is a bit trickier, and our first glimpse of a regular expression.\nWe have to tell separate() to split on the period, not the space."
  },
  {
    "objectID": "slides/04-tidy-data.html#example-tidy-selectors",
    "href": "slides/04-tidy-data.html#example-tidy-selectors",
    "title": "Tidy data",
    "section": "Example: tidy selectors",
    "text": "Example: tidy selectors\n\nbillboard\n\n# A tibble: 317 × 79\n   artist     track date.entered   wk1   wk2   wk3   wk4   wk5   wk6   wk7   wk8\n   &lt;chr&gt;      &lt;chr&gt; &lt;date&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 2 Pac      Baby… 2000-02-26      87    82    72    77    87    94    99    NA\n 2 2Ge+her    The … 2000-09-02      91    87    92    NA    NA    NA    NA    NA\n 3 3 Doors D… Kryp… 2000-04-08      81    70    68    67    66    57    54    53\n 4 3 Doors D… Loser 2000-10-21      76    76    72    69    67    65    55    59\n 5 504 Boyz   Wobb… 2000-04-15      57    34    25    17    17    31    36    49\n 6 98^0       Give… 2000-08-19      51    39    34    26    26    19     2     2\n 7 A*Teens    Danc… 2000-07-08      97    97    96    95   100    NA    NA    NA\n 8 Aaliyah    I Do… 2000-01-29      84    62    51    41    38    35    35    38\n 9 Aaliyah    Try … 2000-03-18      59    53    38    28    21    18    16    14\n10 Adams, Yo… Open… 2000-08-26      76    76    74    69    68    67    61    58\n# ℹ 307 more rows\n# ℹ 68 more variables: wk9 &lt;dbl&gt;, wk10 &lt;dbl&gt;, wk11 &lt;dbl&gt;, wk12 &lt;dbl&gt;,\n#   wk13 &lt;dbl&gt;, wk14 &lt;dbl&gt;, wk15 &lt;dbl&gt;, wk16 &lt;dbl&gt;, wk17 &lt;dbl&gt;, wk18 &lt;dbl&gt;,\n#   wk19 &lt;dbl&gt;, wk20 &lt;dbl&gt;, wk21 &lt;dbl&gt;, wk22 &lt;dbl&gt;, wk23 &lt;dbl&gt;, wk24 &lt;dbl&gt;,\n#   wk25 &lt;dbl&gt;, wk26 &lt;dbl&gt;, wk27 &lt;dbl&gt;, wk28 &lt;dbl&gt;, wk29 &lt;dbl&gt;, wk30 &lt;dbl&gt;,\n#   wk31 &lt;dbl&gt;, wk32 &lt;dbl&gt;, wk33 &lt;dbl&gt;, wk34 &lt;dbl&gt;, wk35 &lt;dbl&gt;, wk36 &lt;dbl&gt;,\n#   wk37 &lt;dbl&gt;, wk38 &lt;dbl&gt;, wk39 &lt;dbl&gt;, wk40 &lt;dbl&gt;, wk41 &lt;dbl&gt;, wk42 &lt;dbl&gt;, …"
  },
  {
    "objectID": "slides/04-tidy-data.html#example-tidy-selectors-1",
    "href": "slides/04-tidy-data.html#example-tidy-selectors-1",
    "title": "Tidy data",
    "section": "Example: tidy selectors",
    "text": "Example: tidy selectors\n\nbillboard |&gt;  \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    values_to = \"rank\",\n    values_drop_na = TRUE\n  )\n\n# A tibble: 5,307 × 5\n   artist  track                   date.entered week   rank\n   &lt;chr&gt;   &lt;chr&gt;                   &lt;date&gt;       &lt;chr&gt; &lt;dbl&gt;\n 1 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk1      87\n 2 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk2      82\n 3 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk3      72\n 4 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk4      77\n 5 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk5      87\n 6 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk6      94\n 7 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk7      99\n 8 2Ge+her The Hardest Part Of ... 2000-09-02   wk1      91\n 9 2Ge+her The Hardest Part Of ... 2000-09-02   wk2      87\n10 2Ge+her The Hardest Part Of ... 2000-09-02   wk3      92\n# ℹ 5,297 more rows"
  },
  {
    "objectID": "slides/04-tidy-data.html#example-parse-fns",
    "href": "slides/04-tidy-data.html#example-parse-fns",
    "title": "Tidy data",
    "section": "Example: parse fns",
    "text": "Example: parse fns\n\nbillboard  |&gt;  \n  pivot_longer(\n    cols = starts_with(\"wk\"), \n    names_to = \"week\", \n    names_transform = readr::parse_number,\n    values_to = \"rank\",\n    values_drop_na = TRUE,\n  )\n\n# A tibble: 5,307 × 5\n   artist  track                   date.entered  week  rank\n   &lt;chr&gt;   &lt;chr&gt;                   &lt;date&gt;       &lt;dbl&gt; &lt;dbl&gt;\n 1 2 Pac   Baby Don't Cry (Keep... 2000-02-26       1    87\n 2 2 Pac   Baby Don't Cry (Keep... 2000-02-26       2    82\n 3 2 Pac   Baby Don't Cry (Keep... 2000-02-26       3    72\n 4 2 Pac   Baby Don't Cry (Keep... 2000-02-26       4    77\n 5 2 Pac   Baby Don't Cry (Keep... 2000-02-26       5    87\n 6 2 Pac   Baby Don't Cry (Keep... 2000-02-26       6    94\n 7 2 Pac   Baby Don't Cry (Keep... 2000-02-26       7    99\n 8 2Ge+her The Hardest Part Of ... 2000-09-02       1    91\n 9 2Ge+her The Hardest Part Of ... 2000-09-02       2    87\n10 2Ge+her The Hardest Part Of ... 2000-09-02       3    92\n# ℹ 5,297 more rows"
  },
  {
    "objectID": "slides/04-tidy-data.html#example-many-vars-in-cols",
    "href": "slides/04-tidy-data.html#example-many-vars-in-cols",
    "title": "Tidy data",
    "section": "Example: many vars in cols",
    "text": "Example: many vars in cols\n\nwho\n\n# A tibble: 7,240 × 60\n   country  iso2  iso3   year new_sp_m014 new_sp_m1524 new_sp_m2534 new_sp_m3544\n   &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n 1 Afghani… AF    AFG    1980          NA           NA           NA           NA\n 2 Afghani… AF    AFG    1981          NA           NA           NA           NA\n 3 Afghani… AF    AFG    1982          NA           NA           NA           NA\n 4 Afghani… AF    AFG    1983          NA           NA           NA           NA\n 5 Afghani… AF    AFG    1984          NA           NA           NA           NA\n 6 Afghani… AF    AFG    1985          NA           NA           NA           NA\n 7 Afghani… AF    AFG    1986          NA           NA           NA           NA\n 8 Afghani… AF    AFG    1987          NA           NA           NA           NA\n 9 Afghani… AF    AFG    1988          NA           NA           NA           NA\n10 Afghani… AF    AFG    1989          NA           NA           NA           NA\n# ℹ 7,230 more rows\n# ℹ 52 more variables: new_sp_m4554 &lt;dbl&gt;, new_sp_m5564 &lt;dbl&gt;,\n#   new_sp_m65 &lt;dbl&gt;, new_sp_f014 &lt;dbl&gt;, new_sp_f1524 &lt;dbl&gt;,\n#   new_sp_f2534 &lt;dbl&gt;, new_sp_f3544 &lt;dbl&gt;, new_sp_f4554 &lt;dbl&gt;,\n#   new_sp_f5564 &lt;dbl&gt;, new_sp_f65 &lt;dbl&gt;, new_sn_m014 &lt;dbl&gt;,\n#   new_sn_m1524 &lt;dbl&gt;, new_sn_m2534 &lt;dbl&gt;, new_sn_m3544 &lt;dbl&gt;,\n#   new_sn_m4554 &lt;dbl&gt;, new_sn_m5564 &lt;dbl&gt;, new_sn_m65 &lt;dbl&gt;, …"
  },
  {
    "objectID": "slides/04-tidy-data.html#example-many-vars-in-cols-1",
    "href": "slides/04-tidy-data.html#example-many-vars-in-cols-1",
    "title": "Tidy data",
    "section": "Example: many vars in cols",
    "text": "Example: many vars in cols\n\nwho  |&gt;  \n  pivot_longer(\n    cols = new_sp_m014:newrel_f65,\n    names_to = c(\"diagnosis\", \"gender\", \"age\"), \n    names_pattern = \"new_?(.*)_(.)(.*)\",\n    values_to = \"count\"\n  )\n\n# A tibble: 405,440 × 8\n   country     iso2  iso3   year diagnosis gender age   count\n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt;\n 1 Afghanistan AF    AFG    1980 sp        m      014      NA\n 2 Afghanistan AF    AFG    1980 sp        m      1524     NA\n 3 Afghanistan AF    AFG    1980 sp        m      2534     NA\n 4 Afghanistan AF    AFG    1980 sp        m      3544     NA\n 5 Afghanistan AF    AFG    1980 sp        m      4554     NA\n 6 Afghanistan AF    AFG    1980 sp        m      5564     NA\n 7 Afghanistan AF    AFG    1980 sp        m      65       NA\n 8 Afghanistan AF    AFG    1980 sp        f      014      NA\n 9 Afghanistan AF    AFG    1980 sp        f      1524     NA\n10 Afghanistan AF    AFG    1980 sp        f      2534     NA\n# ℹ 405,430 more rows"
  },
  {
    "objectID": "slides/04-tidy-data.html#example-many-vars-in-cols-2",
    "href": "slides/04-tidy-data.html#example-many-vars-in-cols-2",
    "title": "Tidy data",
    "section": "Example: many vars in cols",
    "text": "Example: many vars in cols\n\n\nwho |&gt;  \n  pivot_longer(\n    cols = new_sp_m014:newrel_f65,\n    names_to = c(\"diagnosis\", \"gender\", \"age\"), \n    names_pattern = \"new_?(.*)_(.)(.*)\",\n    names_transform = list(\n      gender = ~ readr::parse_factor(.x, levels = c(\"f\", \"m\")),\n      age = ~ readr::parse_factor(\n        .x,\n        levels = c(\"014\", \"1524\", \"2534\", \"3544\", \"4554\", \"5564\", \"65\"), \n        ordered = TRUE\n      )\n    ),\n    values_to = \"count\"\n)\n\n# A tibble: 405,440 × 8\n   country     iso2  iso3   year diagnosis gender age   count\n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;     &lt;fct&gt;  &lt;ord&gt; &lt;dbl&gt;\n 1 Afghanistan AF    AFG    1980 sp        m      014      NA\n 2 Afghanistan AF    AFG    1980 sp        m      1524     NA\n 3 Afghanistan AF    AFG    1980 sp        m      2534     NA\n 4 Afghanistan AF    AFG    1980 sp        m      3544     NA\n 5 Afghanistan AF    AFG    1980 sp        m      4554     NA\n 6 Afghanistan AF    AFG    1980 sp        m      5564     NA\n 7 Afghanistan AF    AFG    1980 sp        m      65       NA\n 8 Afghanistan AF    AFG    1980 sp        f      014      NA\n 9 Afghanistan AF    AFG    1980 sp        f      1524     NA\n10 Afghanistan AF    AFG    1980 sp        f      2534     NA\n# ℹ 405,430 more rows"
  },
  {
    "objectID": "slides/04-tidy-data.html#example-long-to-wide",
    "href": "slides/04-tidy-data.html#example-long-to-wide",
    "title": "Tidy data",
    "section": "Example: long to wide",
    "text": "Example: long to wide\n\n## Get the data and normalize the column names\ndf &lt;- read_csv(\"http://kjhealy.co/MVOtestdata.csv\") |&gt;\n  janitor::clean_names()\n\n## Starting point\ndf\n\n# A tibble: 26 × 11\n        id date       wheelies right_shoe_color right_shoe_size left_shoe_color\n     &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;    &lt;chr&gt;                      &lt;dbl&gt; &lt;chr&gt;          \n 1 8675309 2/1/2009   no       &lt;NA&gt;                          NA &lt;NA&gt;           \n 2 8675309 2/4/2014   no       &lt;NA&gt;                          NA &lt;NA&gt;           \n 3 8675309 2/15/2006  no       none                          NA none           \n 4 8675309 3/1/2009   no       none                          NA &lt;NA&gt;           \n 5 8675309 4/20/2013  no       white                         NA &lt;NA&gt;           \n 6 8675309 4/30/2010  &lt;NA&gt;     white                          3 white          \n 7 8675309 5/5/2012   no       &lt;NA&gt;                          NA &lt;NA&gt;           \n 8 8675309 7/31/2009  no       &lt;NA&gt;                          NA none           \n 9 8675309 10/22/2008 no       &lt;NA&gt;                          NA none           \n10 9021033 1/11/2005  no       white                          5 orange         \n# ℹ 16 more rows\n# ℹ 5 more variables: left_shoe_size &lt;dbl&gt;, right_glove_color &lt;chr&gt;,\n#   right_glove_size &lt;dbl&gt;, left_glove_color &lt;chr&gt;, left_glove_size &lt;dbl&gt;"
  },
  {
    "objectID": "slides/04-tidy-data.html#example-long-to-wide-1",
    "href": "slides/04-tidy-data.html#example-long-to-wide-1",
    "title": "Tidy data",
    "section": "Example: long to wide",
    "text": "Example: long to wide\n\ncolnames(df)\n\n [1] \"id\"                \"date\"              \"wheelies\"         \n [4] \"right_shoe_color\"  \"right_shoe_size\"   \"left_shoe_color\"  \n [7] \"left_shoe_size\"    \"right_glove_color\" \"right_glove_size\" \n[10] \"left_glove_color\"  \"left_glove_size\""
  },
  {
    "objectID": "slides/04-tidy-data.html#example-there-back",
    "href": "slides/04-tidy-data.html#example-there-back",
    "title": "Tidy data",
    "section": "Example: there & back",
    "text": "Example: there & back\nMore fully lengthen by making side, item, color, and size into variables (ie columns)\n\ndf_lon &lt;- df |&gt;\n  pivot_longer(right_shoe_color:left_glove_size,\n               names_to = c(\"side\", \"item\", \".value\"),\n               names_pattern = \"(.*)_(.*)_(.*)\")\n\ndf_lon\n\n# A tibble: 104 × 7\n        id date      wheelies side  item  color  size\n     &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n 1 8675309 2/1/2009  no       right shoe  &lt;NA&gt;     NA\n 2 8675309 2/1/2009  no       left  shoe  &lt;NA&gt;     NA\n 3 8675309 2/1/2009  no       right glove &lt;NA&gt;      3\n 4 8675309 2/1/2009  no       left  glove &lt;NA&gt;      1\n 5 8675309 2/4/2014  no       right shoe  &lt;NA&gt;     NA\n 6 8675309 2/4/2014  no       left  shoe  &lt;NA&gt;      1\n 7 8675309 2/4/2014  no       right glove &lt;NA&gt;     NA\n 8 8675309 2/4/2014  no       left  glove &lt;NA&gt;     NA\n 9 8675309 2/15/2006 no       right shoe  none     NA\n10 8675309 2/15/2006 no       left  shoe  none     NA\n# ℹ 94 more rows"
  },
  {
    "objectID": "slides/04-tidy-data.html#example-there-back-1",
    "href": "slides/04-tidy-data.html#example-there-back-1",
    "title": "Tidy data",
    "section": "Example: there & back",
    "text": "Example: there & back\n\ndf_superwide &lt;- df_lon |&gt;\n  group_by(id, date) |&gt;\n  mutate(id = as.character(id),\n         date = lubridate::mdy(date),\n         seq_id = cur_group_rows()) |&gt;\n  relocate(seq_id, .after = id) |&gt;\n  ungroup() |&gt;\n  pivot_wider(names_from = seq_id, values_from =  date:size)"
  },
  {
    "objectID": "slides/04-tidy-data.html#example-there-back-2",
    "href": "slides/04-tidy-data.html#example-there-back-2",
    "title": "Tidy data",
    "section": "Example: there & back",
    "text": "Example: there & back\n\ndf_superwide\n\n# A tibble: 3 × 625\n  id      date_1     date_2     date_3     date_4     date_5     date_6    \n  &lt;chr&gt;   &lt;date&gt;     &lt;date&gt;     &lt;date&gt;     &lt;date&gt;     &lt;date&gt;     &lt;date&gt;    \n1 8675309 2009-02-01 2009-02-01 2009-02-01 2009-02-01 2014-02-04 2014-02-04\n2 9021033 NA         NA         NA         NA         NA         NA        \n3 1234567 NA         NA         NA         NA         NA         NA        \n# ℹ 618 more variables: date_7 &lt;date&gt;, date_8 &lt;date&gt;, date_9 &lt;date&gt;,\n#   date_10 &lt;date&gt;, date_11 &lt;date&gt;, date_12 &lt;date&gt;, date_13 &lt;date&gt;,\n#   date_14 &lt;date&gt;, date_15 &lt;date&gt;, date_16 &lt;date&gt;, date_17 &lt;date&gt;,\n#   date_18 &lt;date&gt;, date_19 &lt;date&gt;, date_20 &lt;date&gt;, date_21 &lt;date&gt;,\n#   date_22 &lt;date&gt;, date_23 &lt;date&gt;, date_24 &lt;date&gt;, date_25 &lt;date&gt;,\n#   date_26 &lt;date&gt;, date_27 &lt;date&gt;, date_28 &lt;date&gt;, date_29 &lt;date&gt;,\n#   date_30 &lt;date&gt;, date_31 &lt;date&gt;, date_32 &lt;date&gt;, date_33 &lt;date&gt;, …\n\n# Sheer madness\ncolnames(df_superwide)\n\n  [1] \"id\"      \"date_1\"  \"date_2\"  \"date_3\"  \"date_4\"  \"date_5\"  \"date_6\" \n  [8] \"date_7\"  \"date_8\"  \"date_9\"  \"date_10\" \"date_11\" \"date_12\" \"date_13\"\n [15] \"date_14\" \"date_15\" \"date_16\" \"date_17\" \"date_18\" \"date_19\" \"date_20\"\n [22] \"date_21\" \"date_22\" \"date_23\" \"date_24\" \"date_25\" \"date_26\" \"date_27\"\n [29] \"date_28\" \"date_29\" \"date_30\" \"date_31\" \"date_32\" \"date_33\" \"date_34\"\n [36] \"date_35\" \"date_36\" \"date_37\" \"date_38\" \"date_39\" \"date_40\" \"date_41\"\n [43] \"date_42\" \"date_43\" \"date_44\" \"date_45\" \"date_46\" \"date_47\" \"date_48\"\n [50] \"date_49\" \"date_50\" \"date_51\" \"date_52\" \"date_53\" \"date_54\" \"date_55\"\n [57] \"date_56\" \"date_57\" \"date_58\" \"date_59\" \"date_60\" \"date_61\" \"date_62\"\n [64] \"date_63\" \"date_64\" \"date_65\" \"date_66\" \"date_67\" \"date_68\" \"date_69\"\n [71] \"date_70\" \"date_71\" \"date_72\" \"date_73\" \"date_74\" \"date_75\" \"date_76\"\n [78] \"date_77\" \"date_78\" \"date_79\" \"date_80\" \"date_81\" \"date_82\" \"date_83\"\n [85] \"date_84\" \"date_85\" \"date_86\" \"date_87\" \"date_88\" \"date_89\" \"date_90\"\n [92] \"date_91\" \"date_92\" \"date_93\" \"date_94\" \"date_95\" \"date_96\" \"date_97\"\n [99] \"date_98\" \"date_99\"\n [ reached getOption(\"max.print\") -- omitted 525 entries ]"
  },
  {
    "objectID": "slides/04-tidy-data.html#example-1-from-the-tidyr-vignette",
    "href": "slides/04-tidy-data.html#example-1-from-the-tidyr-vignette",
    "title": "Tidy data",
    "section": "Example 1: from the tidyr Vignette",
    "text": "Example 1: from the tidyr Vignette\n\n## Examples of recursive lists and nested/split data frames\n# install.packages(\"repurrsive\")\nlibrary(repurrrsive)\n\nchars &lt;- tibble(char = got_chars)\nchars\n\n# A tibble: 30 × 1\n   char             \n   &lt;list&gt;           \n 1 &lt;named list [18]&gt;\n 2 &lt;named list [18]&gt;\n 3 &lt;named list [18]&gt;\n 4 &lt;named list [18]&gt;\n 5 &lt;named list [18]&gt;\n 6 &lt;named list [18]&gt;\n 7 &lt;named list [18]&gt;\n 8 &lt;named list [18]&gt;\n 9 &lt;named list [18]&gt;\n10 &lt;named list [18]&gt;\n# ℹ 20 more rows"
  },
  {
    "objectID": "slides/04-tidy-data.html#example-1-from-the-tidyr-vignette-1",
    "href": "slides/04-tidy-data.html#example-1-from-the-tidyr-vignette-1",
    "title": "Tidy data",
    "section": "Example 1: from the tidyr Vignette",
    "text": "Example 1: from the tidyr Vignette\n\nchars2 &lt;- chars |&gt; \n  unnest_wider(char)\n\nchars2\n\n# A tibble: 30 × 18\n   url           id name  gender culture born  died  alive titles aliases father\n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;lgl&gt; &lt;list&gt; &lt;list&gt;  &lt;chr&gt; \n 1 https://w…  1022 Theo… Male   \"Ironb… \"In … \"\"    TRUE  &lt;chr&gt;  &lt;chr&gt;   \"\"    \n 2 https://w…  1052 Tyri… Male   \"\"      \"In … \"\"    TRUE  &lt;chr&gt;  &lt;chr&gt;   \"\"    \n 3 https://w…  1074 Vict… Male   \"Ironb… \"In … \"\"    TRUE  &lt;chr&gt;  &lt;chr&gt;   \"\"    \n 4 https://w…  1109 Will  Male   \"\"      \"\"    \"In … FALSE &lt;chr&gt;  &lt;chr&gt;   \"\"    \n 5 https://w…  1166 Areo… Male   \"Norvo… \"In … \"\"    TRUE  &lt;chr&gt;  &lt;chr&gt;   \"\"    \n 6 https://w…  1267 Chett Male   \"\"      \"At … \"In … FALSE &lt;chr&gt;  &lt;chr&gt;   \"\"    \n 7 https://w…  1295 Cres… Male   \"\"      \"In … \"In … FALSE &lt;chr&gt;  &lt;chr&gt;   \"\"    \n 8 https://w…   130 Aria… Female \"Dorni… \"In … \"\"    TRUE  &lt;chr&gt;  &lt;chr&gt;   \"\"    \n 9 https://w…  1303 Daen… Female \"Valyr… \"In … \"\"    TRUE  &lt;chr&gt;  &lt;chr&gt;   \"\"    \n10 https://w…  1319 Davo… Male   \"Weste… \"In … \"\"    TRUE  &lt;chr&gt;  &lt;chr&gt;   \"\"    \n# ℹ 20 more rows\n# ℹ 7 more variables: mother &lt;chr&gt;, spouse &lt;chr&gt;, allegiances &lt;list&gt;,\n#   books &lt;list&gt;, povBooks &lt;list&gt;, tvSeries &lt;list&gt;, playedBy &lt;list&gt;"
  },
  {
    "objectID": "slides/04-tidy-data.html#example-1-from-the-tidyr-vignette-2",
    "href": "slides/04-tidy-data.html#example-1-from-the-tidyr-vignette-2",
    "title": "Tidy data",
    "section": "Example 1: from the tidyr Vignette",
    "text": "Example 1: from the tidyr Vignette\n\nchars2 |&gt; \n  select(where(is.list))\n\n# A tibble: 30 × 7\n   titles    aliases    allegiances books     povBooks  tvSeries  playedBy \n   &lt;list&gt;    &lt;list&gt;     &lt;list&gt;      &lt;list&gt;    &lt;list&gt;    &lt;list&gt;    &lt;list&gt;   \n 1 &lt;chr [2]&gt; &lt;chr [4]&gt;  &lt;chr [1]&gt;   &lt;chr [3]&gt; &lt;chr [2]&gt; &lt;chr [6]&gt; &lt;chr [1]&gt;\n 2 &lt;chr [2]&gt; &lt;chr [11]&gt; &lt;chr [1]&gt;   &lt;chr [2]&gt; &lt;chr [4]&gt; &lt;chr [6]&gt; &lt;chr [1]&gt;\n 3 &lt;chr [2]&gt; &lt;chr [1]&gt;  &lt;chr [1]&gt;   &lt;chr [3]&gt; &lt;chr [2]&gt; &lt;chr [1]&gt; &lt;chr [1]&gt;\n 4 &lt;chr [1]&gt; &lt;chr [1]&gt;  &lt;NULL&gt;      &lt;chr [1]&gt; &lt;chr [1]&gt; &lt;chr [1]&gt; &lt;chr [1]&gt;\n 5 &lt;chr [1]&gt; &lt;chr [1]&gt;  &lt;chr [1]&gt;   &lt;chr [3]&gt; &lt;chr [2]&gt; &lt;chr [2]&gt; &lt;chr [1]&gt;\n 6 &lt;chr [1]&gt; &lt;chr [1]&gt;  &lt;NULL&gt;      &lt;chr [2]&gt; &lt;chr [1]&gt; &lt;chr [1]&gt; &lt;chr [1]&gt;\n 7 &lt;chr [1]&gt; &lt;chr [1]&gt;  &lt;NULL&gt;      &lt;chr [2]&gt; &lt;chr [1]&gt; &lt;chr [1]&gt; &lt;chr [1]&gt;\n 8 &lt;chr [1]&gt; &lt;chr [1]&gt;  &lt;chr [1]&gt;   &lt;chr [4]&gt; &lt;chr [1]&gt; &lt;chr [1]&gt; &lt;chr [1]&gt;\n 9 &lt;chr [5]&gt; &lt;chr [11]&gt; &lt;chr [1]&gt;   &lt;chr [1]&gt; &lt;chr [4]&gt; &lt;chr [6]&gt; &lt;chr [1]&gt;\n10 &lt;chr [4]&gt; &lt;chr [5]&gt;  &lt;chr [2]&gt;   &lt;chr [1]&gt; &lt;chr [3]&gt; &lt;chr [5]&gt; &lt;chr [1]&gt;\n# ℹ 20 more rows"
  },
  {
    "objectID": "slides/04-tidy-data.html#example-1-from-the-tidyr-vignette-3",
    "href": "slides/04-tidy-data.html#example-1-from-the-tidyr-vignette-3",
    "title": "Tidy data",
    "section": "Example 1: from the tidyr Vignette",
    "text": "Example 1: from the tidyr Vignette\nA row for every book and TV series that the character appears in:\n\nchars2 \n\n# A tibble: 30 × 18\n   url           id name  gender culture born  died  alive titles aliases father\n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;lgl&gt; &lt;list&gt; &lt;list&gt;  &lt;chr&gt; \n 1 https://w…  1022 Theo… Male   \"Ironb… \"In … \"\"    TRUE  &lt;chr&gt;  &lt;chr&gt;   \"\"    \n 2 https://w…  1052 Tyri… Male   \"\"      \"In … \"\"    TRUE  &lt;chr&gt;  &lt;chr&gt;   \"\"    \n 3 https://w…  1074 Vict… Male   \"Ironb… \"In … \"\"    TRUE  &lt;chr&gt;  &lt;chr&gt;   \"\"    \n 4 https://w…  1109 Will  Male   \"\"      \"\"    \"In … FALSE &lt;chr&gt;  &lt;chr&gt;   \"\"    \n 5 https://w…  1166 Areo… Male   \"Norvo… \"In … \"\"    TRUE  &lt;chr&gt;  &lt;chr&gt;   \"\"    \n 6 https://w…  1267 Chett Male   \"\"      \"At … \"In … FALSE &lt;chr&gt;  &lt;chr&gt;   \"\"    \n 7 https://w…  1295 Cres… Male   \"\"      \"In … \"In … FALSE &lt;chr&gt;  &lt;chr&gt;   \"\"    \n 8 https://w…   130 Aria… Female \"Dorni… \"In … \"\"    TRUE  &lt;chr&gt;  &lt;chr&gt;   \"\"    \n 9 https://w…  1303 Daen… Female \"Valyr… \"In … \"\"    TRUE  &lt;chr&gt;  &lt;chr&gt;   \"\"    \n10 https://w…  1319 Davo… Male   \"Weste… \"In … \"\"    TRUE  &lt;chr&gt;  &lt;chr&gt;   \"\"    \n# ℹ 20 more rows\n# ℹ 7 more variables: mother &lt;chr&gt;, spouse &lt;chr&gt;, allegiances &lt;list&gt;,\n#   books &lt;list&gt;, povBooks &lt;list&gt;, tvSeries &lt;list&gt;, playedBy &lt;list&gt;"
  },
  {
    "objectID": "slides/04-tidy-data.html#example-1-vignette",
    "href": "slides/04-tidy-data.html#example-1-vignette",
    "title": "Tidy data",
    "section": "Example 1: Vignette",
    "text": "Example 1: Vignette\n\n\n\nchars2\n\n\n\n\n# A tibble: 30 × 18\n   url           id name  gender culture born  died  alive titles aliases father\n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;lgl&gt; &lt;list&gt; &lt;list&gt;  &lt;chr&gt; \n 1 https://w…  1022 Theo… Male   \"Ironb… \"In … \"\"    TRUE  &lt;chr&gt;  &lt;chr&gt;   \"\"    \n 2 https://w…  1052 Tyri… Male   \"\"      \"In … \"\"    TRUE  &lt;chr&gt;  &lt;chr&gt;   \"\"    \n 3 https://w…  1074 Vict… Male   \"Ironb… \"In … \"\"    TRUE  &lt;chr&gt;  &lt;chr&gt;   \"\"    \n 4 https://w…  1109 Will  Male   \"\"      \"\"    \"In … FALSE &lt;chr&gt;  &lt;chr&gt;   \"\"    \n 5 https://w…  1166 Areo… Male   \"Norvo… \"In … \"\"    TRUE  &lt;chr&gt;  &lt;chr&gt;   \"\"    \n 6 https://w…  1267 Chett Male   \"\"      \"At … \"In … FALSE &lt;chr&gt;  &lt;chr&gt;   \"\"    \n 7 https://w…  1295 Cres… Male   \"\"      \"In … \"In … FALSE &lt;chr&gt;  &lt;chr&gt;   \"\"    \n 8 https://w…   130 Aria… Female \"Dorni… \"In … \"\"    TRUE  &lt;chr&gt;  &lt;chr&gt;   \"\"    \n 9 https://w…  1303 Daen… Female \"Valyr… \"In … \"\"    TRUE  &lt;chr&gt;  &lt;chr&gt;   \"\"    \n10 https://w…  1319 Davo… Male   \"Weste… \"In … \"\"    TRUE  &lt;chr&gt;  &lt;chr&gt;   \"\"    \n# ℹ 20 more rows\n# ℹ 7 more variables: mother &lt;chr&gt;, spouse &lt;chr&gt;, allegiances &lt;list&gt;,\n#   books &lt;list&gt;, povBooks &lt;list&gt;, tvSeries &lt;list&gt;, playedBy &lt;list&gt;"
  },
  {
    "objectID": "slides/04-tidy-data.html#example-1-vignette-1",
    "href": "slides/04-tidy-data.html#example-1-vignette-1",
    "title": "Tidy data",
    "section": "Example 1: Vignette",
    "text": "Example 1: Vignette\n\n\n\nchars2  |&gt;\n  select(name, books, tvSeries)\n\n\n\n\n# A tibble: 30 × 3\n   name               books     tvSeries \n   &lt;chr&gt;              &lt;list&gt;    &lt;list&gt;   \n 1 Theon Greyjoy      &lt;chr [3]&gt; &lt;chr [6]&gt;\n 2 Tyrion Lannister   &lt;chr [2]&gt; &lt;chr [6]&gt;\n 3 Victarion Greyjoy  &lt;chr [3]&gt; &lt;chr [1]&gt;\n 4 Will               &lt;chr [1]&gt; &lt;chr [1]&gt;\n 5 Areo Hotah         &lt;chr [3]&gt; &lt;chr [2]&gt;\n 6 Chett              &lt;chr [2]&gt; &lt;chr [1]&gt;\n 7 Cressen            &lt;chr [2]&gt; &lt;chr [1]&gt;\n 8 Arianne Martell    &lt;chr [4]&gt; &lt;chr [1]&gt;\n 9 Daenerys Targaryen &lt;chr [1]&gt; &lt;chr [6]&gt;\n10 Davos Seaworth     &lt;chr [1]&gt; &lt;chr [5]&gt;\n# ℹ 20 more rows"
  },
  {
    "objectID": "slides/04-tidy-data.html#example-1-vignette-2",
    "href": "slides/04-tidy-data.html#example-1-vignette-2",
    "title": "Tidy data",
    "section": "Example 1: Vignette",
    "text": "Example 1: Vignette\n\n\n\nchars2  |&gt;\n  select(name, books, tvSeries) |&gt;\n  pivot_longer(c(books, tvSeries),\n               names_to = \"media\",\n               values_to = \"value\")\n\n\n\n\n# A tibble: 60 × 3\n   name              media    value    \n   &lt;chr&gt;             &lt;chr&gt;    &lt;list&gt;   \n 1 Theon Greyjoy     books    &lt;chr [3]&gt;\n 2 Theon Greyjoy     tvSeries &lt;chr [6]&gt;\n 3 Tyrion Lannister  books    &lt;chr [2]&gt;\n 4 Tyrion Lannister  tvSeries &lt;chr [6]&gt;\n 5 Victarion Greyjoy books    &lt;chr [3]&gt;\n 6 Victarion Greyjoy tvSeries &lt;chr [1]&gt;\n 7 Will              books    &lt;chr [1]&gt;\n 8 Will              tvSeries &lt;chr [1]&gt;\n 9 Areo Hotah        books    &lt;chr [3]&gt;\n10 Areo Hotah        tvSeries &lt;chr [2]&gt;\n# ℹ 50 more rows"
  },
  {
    "objectID": "slides/04-tidy-data.html#example-1-vignette-3",
    "href": "slides/04-tidy-data.html#example-1-vignette-3",
    "title": "Tidy data",
    "section": "Example 1: Vignette",
    "text": "Example 1: Vignette\n\n\n\nchars2  |&gt;\n  select(name, books, tvSeries) |&gt;\n  pivot_longer(c(books, tvSeries),\n               names_to = \"media\",\n               values_to = \"value\") |&gt;\n  unnest_longer(value)\n\n\n\n\n# A tibble: 179 × 3\n   name             media    value            \n   &lt;chr&gt;            &lt;chr&gt;    &lt;chr&gt;            \n 1 Theon Greyjoy    books    A Game of Thrones\n 2 Theon Greyjoy    books    A Storm of Swords\n 3 Theon Greyjoy    books    A Feast for Crows\n 4 Theon Greyjoy    tvSeries Season 1         \n 5 Theon Greyjoy    tvSeries Season 2         \n 6 Theon Greyjoy    tvSeries Season 3         \n 7 Theon Greyjoy    tvSeries Season 4         \n 8 Theon Greyjoy    tvSeries Season 5         \n 9 Theon Greyjoy    tvSeries Season 6         \n10 Tyrion Lannister books    A Feast for Crows\n# ℹ 169 more rows"
  },
  {
    "objectID": "slides/04-tidy-data.html#example-2-github",
    "href": "slides/04-tidy-data.html#example-2-github",
    "title": "Tidy data",
    "section": "Example 2: GitHub",
    "text": "Example 2: GitHub\nThe fromJSON() function in {jsonlite} does its best to simplify what the API returns into a table, which you can convert to a tibble.\n\n# install.packages(\"jsonlite\")\njsonlite::fromJSON(\"https://api.github.com/users/kjhealy/repos\") |&gt; \n  as_tibble()\n\n# A tibble: 30 × 79\n       id node_id name  full_name private owner$login html_url description fork \n    &lt;int&gt; &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt;   &lt;chr&gt;       &lt;chr&gt;    &lt;chr&gt;       &lt;lgl&gt;\n 1 4.37e8 R_kgDO… .doo… kjhealy/… FALSE   kjhealy     https:/… Doom Emacs… FALSE\n 2 5.37e7 MDEwOl… 2016… kjhealy/… FALSE   kjhealy     https:/… &lt;NA&gt;        TRUE \n 3 5.10e6 MDEwOl… 5by5… kjhealy/… FALSE   kjhealy     https:/… Data and R… FALSE\n 4 7.63e8 R_kgDO… abor… kjhealy/… FALSE   kjhealy     https:/… &lt;NA&gt;        FALSE\n 5 3.48e7 MDEwOl… apple kjhealy/… FALSE   kjhealy     https:/… Trend plot… FALSE\n 6 2.59e8 MDEwOl… appl… kjhealy/… FALSE   kjhealy     https:/… &lt;NA&gt;        FALSE\n 7 1.56e6 MDEwOl… asa-… kjhealy/… FALSE   kjhealy     https:/… Comparativ… FALSE\n 8 4.65e7 MDEwOl… asa-… kjhealy/… FALSE   kjhealy     https:/… Some plots… FALSE\n 9 1.49e8 MDEwOl… asa_… kjhealy/… FALSE   kjhealy     https:/… &lt;NA&gt;        FALSE\n10 8.83e7 MDEwOl… asdf… kjhealy/… FALSE   kjhealy     https:/… analyze su… TRUE \n# ℹ 20 more rows\n# ℹ 87 more variables: owner$id &lt;int&gt;, $node_id &lt;chr&gt;, $avatar_url &lt;chr&gt;,\n#   $gravatar_id &lt;chr&gt;, $url &lt;chr&gt;, $html_url &lt;chr&gt;, $followers_url &lt;chr&gt;,\n#   $following_url &lt;chr&gt;, $gists_url &lt;chr&gt;, $starred_url &lt;chr&gt;,\n#   $subscriptions_url &lt;chr&gt;, $organizations_url &lt;chr&gt;, $repos_url &lt;chr&gt;,\n#   $events_url &lt;chr&gt;, $received_events_url &lt;chr&gt;, $type &lt;chr&gt;,\n#   $site_admin &lt;lgl&gt;, url &lt;chr&gt;, forks_url &lt;chr&gt;, keys_url &lt;chr&gt;, …"
  },
  {
    "objectID": "slides/04-tidy-data.html#example-2-github-1",
    "href": "slides/04-tidy-data.html#example-2-github-1",
    "title": "Tidy data",
    "section": "Example 2: GitHub",
    "text": "Example 2: GitHub\nThe read_json() function in {jsonlite} gives you a list of the JSON the API returns, which you won’t be able to immediately convert.\n\ngh_raw &lt;- jsonlite::read_json(\"https://api.github.com/users/kjhealy/repos\") \n\ngh_tb &lt;- tibble(gh = gh_raw)\n\ngh_tb\n\n# A tibble: 30 × 1\n   gh               \n   &lt;list&gt;           \n 1 &lt;named list [79]&gt;\n 2 &lt;named list [79]&gt;\n 3 &lt;named list [79]&gt;\n 4 &lt;named list [79]&gt;\n 5 &lt;named list [79]&gt;\n 6 &lt;named list [79]&gt;\n 7 &lt;named list [79]&gt;\n 8 &lt;named list [79]&gt;\n 9 &lt;named list [79]&gt;\n10 &lt;named list [79]&gt;\n# ℹ 20 more rows"
  },
  {
    "objectID": "slides/04-tidy-data.html#example-2-github-2",
    "href": "slides/04-tidy-data.html#example-2-github-2",
    "title": "Tidy data",
    "section": "Example 2: GitHub",
    "text": "Example 2: GitHub\nThis is what the unnest_wider() function is for:\n\ngh_tb |&gt; \n  unnest_wider(gh)\n\n# A tibble: 30 × 79\n          id node_id   name  full_name private owner        html_url description\n       &lt;int&gt; &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;     &lt;lgl&gt;   &lt;list&gt;       &lt;chr&gt;    &lt;chr&gt;      \n 1 436805268 R_kgDOGg… .doo… kjhealy/… FALSE   &lt;named list&gt; https:/… Doom Emacs…\n 2  53698061 MDEwOlJl… 2016… kjhealy/… FALSE   &lt;named list&gt; https:/… &lt;NA&gt;       \n 3   5103336 MDEwOlJl… 5by5… kjhealy/… FALSE   &lt;named list&gt; https:/… Data and R…\n 4 762813356 R_kgDOLX… abor… kjhealy/… FALSE   &lt;named list&gt; https:/… &lt;NA&gt;       \n 5  34824505 MDEwOlJl… apple kjhealy/… FALSE   &lt;named list&gt; https:/… Trend plot…\n 6 259012888 MDEwOlJl… appl… kjhealy/… FALSE   &lt;named list&gt; https:/… &lt;NA&gt;       \n 7   1555513 MDEwOlJl… asa-… kjhealy/… FALSE   &lt;named list&gt; https:/… Comparativ…\n 8  46535044 MDEwOlJl… asa-… kjhealy/… FALSE   &lt;named list&gt; https:/… Some plots…\n 9 148529869 MDEwOlJl… asa_… kjhealy/… FALSE   &lt;named list&gt; https:/… &lt;NA&gt;       \n10  88295797 MDEwOlJl… asdf… kjhealy/… FALSE   &lt;named list&gt; https:/… analyze su…\n# ℹ 20 more rows\n# ℹ 71 more variables: fork &lt;lgl&gt;, url &lt;chr&gt;, forks_url &lt;chr&gt;, keys_url &lt;chr&gt;,\n#   collaborators_url &lt;chr&gt;, teams_url &lt;chr&gt;, hooks_url &lt;chr&gt;,\n#   issue_events_url &lt;chr&gt;, events_url &lt;chr&gt;, assignees_url &lt;chr&gt;,\n#   branches_url &lt;chr&gt;, tags_url &lt;chr&gt;, blobs_url &lt;chr&gt;, git_tags_url &lt;chr&gt;,\n#   git_refs_url &lt;chr&gt;, trees_url &lt;chr&gt;, statuses_url &lt;chr&gt;,\n#   languages_url &lt;chr&gt;, stargazers_url &lt;chr&gt;, contributors_url &lt;chr&gt;, …"
  },
  {
    "objectID": "slides/04-tidy-data.html#example-2-github-3",
    "href": "slides/04-tidy-data.html#example-2-github-3",
    "title": "Tidy data",
    "section": "Example 2: GitHub",
    "text": "Example 2: GitHub\nBy default we only get the first 30 items back. (The API is paginated.)\n\ngh_tb |&gt; \n  unnest_wider(gh) |&gt;\n  pull(name)\n\n [1] \".doom.d\"                             \"2016-03-wapo-uber\"                  \n [3] \"5by5-figures\"                        \"abortion_gss\"                       \n [5] \"apple\"                               \"apple_covid_post\"                   \n [7] \"asa-dues\"                            \"asa-sections\"                       \n [9] \"asa_sections17\"                      \"asdfree\"                            \n[11] \"assault-2023\"                        \"assault-deaths\"                     \n[13] \"atpfm\"                               \"babcock-ratings\"                    \n[15] \"bass_graphs\"                         \"bepsays.com\"                        \n[17] \"bib\"                                 \"bookdown\"                           \n[19] \"bookdown-demo\"                       \"boom\"                               \n[21] \"boomers\"                             \"bootstrap\"                          \n[23] \"canmap\"                              \"cavax\"                              \n[25] \"cbofigure\"                           \"cdccovidview\"                       \n[27] \"congress\"                            \"corr_example\"                       \n[29] \"County_Level_Election_Results_12-16\" \"course_template\""
  },
  {
    "objectID": "slides/04-tidy-data.html#example-2-github-4",
    "href": "slides/04-tidy-data.html#example-2-github-4",
    "title": "Tidy data",
    "section": "Example 2: GitHub",
    "text": "Example 2: GitHub\n\ngh_tb |&gt; \n  unnest_wider(gh) |&gt;\n  select(id, name, ends_with(\"count\")) |&gt;\n  arrange(desc(watchers_count))\n\n# A tibble: 30 × 6\n          id name  stargazers_count watchers_count forks_count open_issues_count\n       &lt;int&gt; &lt;chr&gt;            &lt;int&gt;          &lt;int&gt;       &lt;int&gt;             &lt;int&gt;\n 1  34824505 apple               28             28          27                 0\n 2 233082941 cour…               17             17           3                 0\n 3 259012888 appl…               14             14           4                 1\n 4   5249003 assa…               11             11           4                 0\n 5 128972396 boom                 9              9           1                 0\n 6    114724 bib                  7              7           2                 0\n 7 621306299 assa…                6              6           0                 0\n 8 160963411 canm…                5              5           2                 0\n 9 216038719 cong…                4              4           0                 0\n10 148529869 asa_…                2              2           1                 0\n# ℹ 20 more rows"
  },
  {
    "objectID": "slides/04-tidy-data.html#example-3-citibike-nyc",
    "href": "slides/04-tidy-data.html#example-3-citibike-nyc",
    "title": "Tidy data",
    "section": "Example 3: Citibike NYC",
    "text": "Example 3: Citibike NYC\n\nbikes &lt;- jsonlite::read_json(\"https://gbfs.citibikenyc.com/gbfs/2.3/gbfs.json\")\n\nbikes\n\n$data\n$data$en\n$data$en$feeds\n$data$en$feeds[[1]]\n$data$en$feeds[[1]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/gbfs.json\"\n\n$data$en$feeds[[1]]$name\n[1] \"gbfs\"\n\n\n$data$en$feeds[[2]]\n$data$en$feeds[[2]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/en/system_information.json\"\n\n$data$en$feeds[[2]]$name\n[1] \"system_information\"\n\n\n$data$en$feeds[[3]]\n$data$en$feeds[[3]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/en/station_information.json\"\n\n$data$en$feeds[[3]]$name\n[1] \"station_information\"\n\n\n$data$en$feeds[[4]]\n$data$en$feeds[[4]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/en/station_status.json\"\n\n$data$en$feeds[[4]]$name\n[1] \"station_status\"\n\n\n$data$en$feeds[[5]]\n$data$en$feeds[[5]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/en/free_bike_status.json\"\n\n$data$en$feeds[[5]]$name\n[1] \"free_bike_status\"\n\n\n$data$en$feeds[[6]]\n$data$en$feeds[[6]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/en/system_hours.json\"\n\n$data$en$feeds[[6]]$name\n[1] \"system_hours\"\n\n\n$data$en$feeds[[7]]\n$data$en$feeds[[7]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/en/system_calendar.json\"\n\n$data$en$feeds[[7]]$name\n[1] \"system_calendar\"\n\n\n$data$en$feeds[[8]]\n$data$en$feeds[[8]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/en/system_regions.json\"\n\n$data$en$feeds[[8]]$name\n[1] \"system_regions\"\n\n\n$data$en$feeds[[9]]\n$data$en$feeds[[9]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/en/system_pricing_plans.json\"\n\n$data$en$feeds[[9]]$name\n[1] \"system_pricing_plans\"\n\n\n$data$en$feeds[[10]]\n$data$en$feeds[[10]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/en/system_alerts.json\"\n\n$data$en$feeds[[10]]$name\n[1] \"system_alerts\"\n\n\n$data$en$feeds[[11]]\n$data$en$feeds[[11]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/en/gbfs_versions.json\"\n\n$data$en$feeds[[11]]$name\n[1] \"gbfs_versions\"\n\n\n$data$en$feeds[[12]]\n$data$en$feeds[[12]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/en/vehicle_types.json\"\n\n$data$en$feeds[[12]]$name\n[1] \"vehicle_types\"\n\n\n\n\n$data$fr\n$data$fr$feeds\n$data$fr$feeds[[1]]\n$data$fr$feeds[[1]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/gbfs.json\"\n\n$data$fr$feeds[[1]]$name\n[1] \"gbfs\"\n\n\n$data$fr$feeds[[2]]\n$data$fr$feeds[[2]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/fr/system_information.json\"\n\n$data$fr$feeds[[2]]$name\n[1] \"system_information\"\n\n\n$data$fr$feeds[[3]]\n$data$fr$feeds[[3]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/fr/station_information.json\"\n\n$data$fr$feeds[[3]]$name\n[1] \"station_information\"\n\n\n$data$fr$feeds[[4]]\n$data$fr$feeds[[4]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/fr/station_status.json\"\n\n$data$fr$feeds[[4]]$name\n[1] \"station_status\"\n\n\n$data$fr$feeds[[5]]\n$data$fr$feeds[[5]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/fr/free_bike_status.json\"\n\n$data$fr$feeds[[5]]$name\n[1] \"free_bike_status\"\n\n\n$data$fr$feeds[[6]]\n$data$fr$feeds[[6]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/fr/system_hours.json\"\n\n$data$fr$feeds[[6]]$name\n[1] \"system_hours\"\n\n\n$data$fr$feeds[[7]]\n$data$fr$feeds[[7]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/fr/system_calendar.json\"\n\n$data$fr$feeds[[7]]$name\n[1] \"system_calendar\"\n\n\n$data$fr$feeds[[8]]\n$data$fr$feeds[[8]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/fr/system_regions.json\"\n\n$data$fr$feeds[[8]]$name\n[1] \"system_regions\"\n\n\n$data$fr$feeds[[9]]\n$data$fr$feeds[[9]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/fr/system_pricing_plans.json\"\n\n$data$fr$feeds[[9]]$name\n[1] \"system_pricing_plans\"\n\n\n$data$fr$feeds[[10]]\n$data$fr$feeds[[10]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/fr/system_alerts.json\"\n\n$data$fr$feeds[[10]]$name\n[1] \"system_alerts\"\n\n\n$data$fr$feeds[[11]]\n$data$fr$feeds[[11]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/fr/gbfs_versions.json\"\n\n$data$fr$feeds[[11]]$name\n[1] \"gbfs_versions\"\n\n\n$data$fr$feeds[[12]]\n$data$fr$feeds[[12]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/fr/vehicle_types.json\"\n\n$data$fr$feeds[[12]]$name\n[1] \"vehicle_types\"\n\n\n\n\n$data$es\n$data$es$feeds\n$data$es$feeds[[1]]\n$data$es$feeds[[1]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/gbfs.json\"\n\n$data$es$feeds[[1]]$name\n[1] \"gbfs\"\n\n\n$data$es$feeds[[2]]\n$data$es$feeds[[2]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/es/system_information.json\"\n\n$data$es$feeds[[2]]$name\n[1] \"system_information\"\n\n\n$data$es$feeds[[3]]\n$data$es$feeds[[3]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/es/station_information.json\"\n\n$data$es$feeds[[3]]$name\n[1] \"station_information\"\n\n\n$data$es$feeds[[4]]\n$data$es$feeds[[4]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/es/station_status.json\"\n\n$data$es$feeds[[4]]$name\n[1] \"station_status\"\n\n\n$data$es$feeds[[5]]\n$data$es$feeds[[5]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/es/free_bike_status.json\"\n\n$data$es$feeds[[5]]$name\n[1] \"free_bike_status\"\n\n\n$data$es$feeds[[6]]\n$data$es$feeds[[6]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/es/system_hours.json\"\n\n$data$es$feeds[[6]]$name\n[1] \"system_hours\"\n\n\n$data$es$feeds[[7]]\n$data$es$feeds[[7]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/es/system_calendar.json\"\n\n$data$es$feeds[[7]]$name\n[1] \"system_calendar\"\n\n\n$data$es$feeds[[8]]\n$data$es$feeds[[8]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/es/system_regions.json\"\n\n$data$es$feeds[[8]]$name\n[1] \"system_regions\"\n\n\n$data$es$feeds[[9]]\n$data$es$feeds[[9]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/es/system_pricing_plans.json\"\n\n$data$es$feeds[[9]]$name\n[1] \"system_pricing_plans\"\n\n\n$data$es$feeds[[10]]\n$data$es$feeds[[10]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/es/system_alerts.json\"\n\n$data$es$feeds[[10]]$name\n[1] \"system_alerts\"\n\n\n$data$es$feeds[[11]]\n$data$es$feeds[[11]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/es/gbfs_versions.json\"\n\n$data$es$feeds[[11]]$name\n[1] \"gbfs_versions\"\n\n\n$data$es$feeds[[12]]\n$data$es$feeds[[12]]$url\n[1] \"https://gbfs.lyft.com/gbfs/2.3/bkn/es/vehicle_types.json\"\n\n$data$es$feeds[[12]]$name\n[1] \"vehicle_types\"\n\n\n\n\n\n$last_updated\n[1] 1728216018\n\n$ttl\n[1] 60\n\n$version\n[1] \"2.3\""
  },
  {
    "objectID": "slides/04-tidy-data.html#example-3-citibike-nyc-1",
    "href": "slides/04-tidy-data.html#example-3-citibike-nyc-1",
    "title": "Tidy data",
    "section": "Example 3: Citibike NYC",
    "text": "Example 3: Citibike NYC\nA slightly messier case:\n\nbikes_tib &lt;- tibble(bikes = bikes$data$en$feeds) |&gt; \n  unnest_wider(bikes)\n\nbikevec &lt;- bikes_tib$url |&gt; \n  set_names(bikes_tib$name)\n\n## Available feeds\nbikevec\n\n                                                             gbfs \n                   \"https://gbfs.lyft.com/gbfs/2.3/bkn/gbfs.json\" \n                                               system_information \n  \"https://gbfs.lyft.com/gbfs/2.3/bkn/en/system_information.json\" \n                                              station_information \n \"https://gbfs.lyft.com/gbfs/2.3/bkn/en/station_information.json\" \n                                                   station_status \n      \"https://gbfs.lyft.com/gbfs/2.3/bkn/en/station_status.json\" \n                                                 free_bike_status \n    \"https://gbfs.lyft.com/gbfs/2.3/bkn/en/free_bike_status.json\" \n                                                     system_hours \n        \"https://gbfs.lyft.com/gbfs/2.3/bkn/en/system_hours.json\" \n                                                  system_calendar \n     \"https://gbfs.lyft.com/gbfs/2.3/bkn/en/system_calendar.json\" \n                                                   system_regions \n      \"https://gbfs.lyft.com/gbfs/2.3/bkn/en/system_regions.json\" \n                                             system_pricing_plans \n\"https://gbfs.lyft.com/gbfs/2.3/bkn/en/system_pricing_plans.json\" \n                                                    system_alerts \n       \"https://gbfs.lyft.com/gbfs/2.3/bkn/en/system_alerts.json\" \n                                                    gbfs_versions \n       \"https://gbfs.lyft.com/gbfs/2.3/bkn/en/gbfs_versions.json\" \n                                                    vehicle_types \n       \"https://gbfs.lyft.com/gbfs/2.3/bkn/en/vehicle_types.json\""
  },
  {
    "objectID": "slides/04-tidy-data.html#example-3-citibike-nyc-2",
    "href": "slides/04-tidy-data.html#example-3-citibike-nyc-2",
    "title": "Tidy data",
    "section": "Example 3: Citibike NYC",
    "text": "Example 3: Citibike NYC\n\n## Q: Why do we write it like this?\nnyc_stations &lt;- tibble(stations = jsonlite::read_json(bikevec[\"station_status\"])$data) \n\nnyc_stations\n\n# A tibble: 1 × 1\n  stations      \n  &lt;named list&gt;  \n1 &lt;list [2,226]&gt;"
  },
  {
    "objectID": "slides/04-tidy-data.html#example-3-citibike-nyc-3",
    "href": "slides/04-tidy-data.html#example-3-citibike-nyc-3",
    "title": "Tidy data",
    "section": "Example 3: Citibike NYC",
    "text": "Example 3: Citibike NYC\n\n## Live! (At the time of rendering)\nnyc_stations |&gt; \n  unnest_wider(stations, names_sep = \"_\") \n\n# A tibble: 1 × 2,226\n  stations_1   stations_2   stations_3   stations_4   stations_5   stations_6  \n  &lt;list&gt;       &lt;list&gt;       &lt;list&gt;       &lt;list&gt;       &lt;list&gt;       &lt;list&gt;      \n1 &lt;named list&gt; &lt;named list&gt; &lt;named list&gt; &lt;named list&gt; &lt;named list&gt; &lt;named list&gt;\n# ℹ 2,220 more variables: stations_7 &lt;list&gt;, stations_8 &lt;list&gt;,\n#   stations_9 &lt;list&gt;, stations_10 &lt;list&gt;, stations_11 &lt;list&gt;,\n#   stations_12 &lt;list&gt;, stations_13 &lt;list&gt;, stations_14 &lt;list&gt;,\n#   stations_15 &lt;list&gt;, stations_16 &lt;list&gt;, stations_17 &lt;list&gt;,\n#   stations_18 &lt;list&gt;, stations_19 &lt;list&gt;, stations_20 &lt;list&gt;,\n#   stations_21 &lt;list&gt;, stations_22 &lt;list&gt;, stations_23 &lt;list&gt;,\n#   stations_24 &lt;list&gt;, stations_25 &lt;list&gt;, stations_26 &lt;list&gt;, …"
  },
  {
    "objectID": "slides/04-tidy-data.html#example-3-citibike-nyc-4",
    "href": "slides/04-tidy-data.html#example-3-citibike-nyc-4",
    "title": "Tidy data",
    "section": "Example 3: Citibike NYC",
    "text": "Example 3: Citibike NYC\n\nnyc_stations |&gt; \n  unnest_wider(stations, names_sep = \"_\") |&gt; \n  pivot_longer(starts_with(\"stations\")) \n\n# A tibble: 2,226 × 2\n   name        value            \n   &lt;chr&gt;       &lt;list&gt;           \n 1 stations_1  &lt;named list [11]&gt;\n 2 stations_2  &lt;named list [11]&gt;\n 3 stations_3  &lt;named list [13]&gt;\n 4 stations_4  &lt;named list [13]&gt;\n 5 stations_5  &lt;named list [13]&gt;\n 6 stations_6  &lt;named list [13]&gt;\n 7 stations_7  &lt;named list [13]&gt;\n 8 stations_8  &lt;named list [13]&gt;\n 9 stations_9  &lt;named list [13]&gt;\n10 stations_10 &lt;named list [13]&gt;\n# ℹ 2,216 more rows"
  },
  {
    "objectID": "slides/04-tidy-data.html#example-3-citibike-nyc-5",
    "href": "slides/04-tidy-data.html#example-3-citibike-nyc-5",
    "title": "Tidy data",
    "section": "Example 3: Citibike NYC",
    "text": "Example 3: Citibike NYC\n\nnyc_stations |&gt; \n  unnest_wider(stations, names_sep = \"_\") |&gt; \n  pivot_longer(starts_with(\"stations\")) |&gt;   \n  unnest_wider(value)\n\n# A tibble: 2,226 × 14\n   name        station_id   num_ebikes_available is_returning num_docks_disabled\n   &lt;chr&gt;       &lt;chr&gt;                       &lt;int&gt;        &lt;int&gt;              &lt;int&gt;\n 1 stations_1  26cae473-0e…                    0            0                  0\n 2 stations_2  66dc0dab-0a…                    0            0                  0\n 3 stations_3  ed279ef2-52…                    6            1                  0\n 4 stations_4  f34ea09d-32…                    0            1                  0\n 5 stations_5  cb05443c-e6…                    2            1                  0\n 6 stations_6  66dced76-0a…                    9            1                  0\n 7 stations_7  18380710088…                   22            1                  0\n 8 stations_8  44c23eaa-7d…                    0            1                  0\n 9 stations_9  cd2d9dab-77…                    2            1                  0\n10 stations_10 18352466583…                    4            1                  0\n# ℹ 2,216 more rows\n# ℹ 9 more variables: is_installed &lt;int&gt;, num_docks_available &lt;int&gt;,\n#   vehicle_types_available &lt;list&gt;, num_bikes_available &lt;int&gt;,\n#   is_renting &lt;int&gt;, num_bikes_disabled &lt;int&gt;, last_reported &lt;int&gt;,\n#   num_scooters_unavailable &lt;int&gt;, num_scooters_available &lt;int&gt;"
  },
  {
    "objectID": "slides/04-tidy-data.html#example-3-citibike-nyc-6",
    "href": "slides/04-tidy-data.html#example-3-citibike-nyc-6",
    "title": "Tidy data",
    "section": "Example 3: Citibike NYC",
    "text": "Example 3: Citibike NYC\nExtra info on the stations:\n\n## Q: Why do we write it like this?\nnyc_stations_info &lt;- tibble(stations = jsonlite::read_json(bikevec[\"station_information\"])$data[[1]])\n\nnyc_stations_info |&gt;\n  unnest_wider(stations)\n\n# A tibble: 2,226 × 8\n   station_id       name  capacity   lat   lon region_id short_name rental_uris \n   &lt;chr&gt;            &lt;chr&gt;    &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;      &lt;list&gt;      \n 1 26cae473-0e59-4… Madi…        3  40.7 -73.9 71        4880.11    &lt;named list&gt;\n 2 66dc0dab-0aca-1… W 59…      117  40.8 -74.0 71        7023.04    &lt;named list&gt;\n 3 7938263e-e5b8-4… Sout…       27  40.8 -73.9 71        7788.13    &lt;named list&gt;\n 4 66dc8a3d-0aca-1… Lexi…       79  40.7 -74.0 71        6089.07    &lt;named list&gt;\n 5 187169822334465… Lee …       25  40.7 -74.0 71        5053.01    &lt;named list&gt;\n 6 e9575102-1081-4… Berg…       21  40.7 -73.9 71        4072.02    &lt;named list&gt;\n 7 66dc2995-0aca-1… W 25…       51  40.7 -74.0 71        6215.04    &lt;named list&gt;\n 8 6e5a8cab-cf1a-4… Rive…       27  40.8 -73.9 71        8005.08    &lt;named list&gt;\n 9 188282428778950… 3 Av…       47  40.8 -74.0 71        6960.12    &lt;named list&gt;\n10 ebae0b66-e463-4… Morr…       23  40.8 -73.9 71        7821.01    &lt;named list&gt;\n# ℹ 2,216 more rows\n\n\nFrom here we could join these two tables."
  },
  {
    "objectID": "slides/07-iterating-on-data.html#load-the-packages-as-always",
    "href": "slides/07-iterating-on-data.html#load-the-packages-as-always",
    "title": "Iterating on Data",
    "section": "Load the packages, as always",
    "text": "Load the packages, as always\n\nlibrary(here)      # manage file paths\nlibrary(socviz)    # data and some useful functions\nlibrary(tidyverse) # your friend and mine"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#more-than-one-data-file",
    "href": "slides/07-iterating-on-data.html#more-than-one-data-file",
    "title": "Iterating on Data",
    "section": "More than one data file",
    "text": "More than one data file\n\nInside the data/ folder of the course packet is a folder named congress/\n\n\n\n# A little trick from the fs package: \nfs::dir_tree(here(\"data\", \"congress\"))\n\n/Users/kjhealy/Documents/courses/data_wrangling/data/congress\n├── 01_79_congress.csv\n├── 02_80_congress.csv\n├── 03_81_congress.csv\n├── 04_82_congress.csv\n├── 05_83_congress.csv\n├── 06_84_congress.csv\n├── 07_85_congress.csv\n├── 08_86_congress.csv\n├── 09_87_congress.csv\n├── 10_88_congress.csv\n├── 11_89_congress.csv\n├── 12_90_congress.csv\n├── 13_91_congress.csv\n├── 14_92_congress.csv\n├── 15_93_congress.csv\n├── 16_94_congress.csv\n├── 17_95_congress.csv\n├── 18_96_congress.csv\n├── 19_97_congress.csv\n├── 20_98_congress.csv\n├── 21_99_congress.csv\n├── 22_100_congress.csv\n├── 23_101_congress.csv\n├── 24_102_congress.csv\n├── 25_103_congress.csv\n├── 26_104_congress.csv\n├── 27_105_congress.csv\n├── 28_106_congress.csv\n├── 29_107_congress.csv\n├── 30_108_congress.csv\n├── 31_109_congress.csv\n├── 32_110_congress.csv\n├── 33_111_congress.csv\n├── 34_112_congress.csv\n├── 35_113_congress.csv\n├── 36_114_congress.csv\n├── 37_115_congress.csv\n└── 38_116_congress.csv"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#more-than-one-data-file-1",
    "href": "slides/07-iterating-on-data.html#more-than-one-data-file-1",
    "title": "Iterating on Data",
    "section": "More than one data file",
    "text": "More than one data file\nLet’s look at one.\n\n\nread_csv(here(\"data\", \"congress\", \"17_95_congress.csv\")) |&gt; \n  janitor::clean_names() |&gt; \n  head()\n\n# A tibble: 6 × 25\n  last     first   middle suffix nickname born  death sex   position party state\n  &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;\n1 Abdnor   James   &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     02/1… 11/0… M     U.S. Re… Repu… SD   \n2 Abourezk James   George &lt;NA&gt;   &lt;NA&gt;     02/2… &lt;NA&gt;  M     U.S. Se… Demo… SD   \n3 Adams    Brockm… &lt;NA&gt;   &lt;NA&gt;   Brock    01/1… 09/1… M     U.S. Re… Demo… WA   \n4 Addabbo  Joseph  Patri… &lt;NA&gt;   &lt;NA&gt;     03/1… 04/1… M     U.S. Re… Demo… NY   \n5 Aiken    George  David  &lt;NA&gt;   &lt;NA&gt;     08/2… 11/1… M     U.S. Se… Repu… VT   \n6 Akaka    Daniel  Kahik… &lt;NA&gt;   &lt;NA&gt;     09/1… 04/0… M     U.S. Re… Demo… HI   \n# ℹ 14 more variables: district &lt;chr&gt;, start &lt;chr&gt;, end &lt;chr&gt;, religion &lt;chr&gt;,\n#   race &lt;chr&gt;, educational_attainment &lt;chr&gt;, job_type1 &lt;chr&gt;, job_type2 &lt;chr&gt;,\n#   job_type3 &lt;chr&gt;, job_type4 &lt;chr&gt;, job_type5 &lt;lgl&gt;, mil1 &lt;chr&gt;, mil2 &lt;chr&gt;,\n#   mil3 &lt;chr&gt;\n\n\n\nWe often find ourselves in this situation. We know each file has the same structure, and we would like to use them all at once."
  },
  {
    "objectID": "slides/07-iterating-on-data.html#loops",
    "href": "slides/07-iterating-on-data.html#loops",
    "title": "Iterating on Data",
    "section": "Loops?",
    "text": "Loops?\nHow to read them all in?\nOne traditional way, which we could do in R, is to write an explicit loop that iterated over a vector of filenames, read each file, and then joined the results together in a tall rectangle.\n# Pseudocode\n\nfilenames &lt;- c(\"01_79_congress.csv\", \"02_80_congress.csv\", \"03_81_congress.csv\",\n                \"04_82_congress.csv\" [etc etc])\n\ncollected_files &lt;- NULL\n\nfor(i in 1:length(filenames)) {\n      new_file &lt;- read_file(filenames[i])\n      collected_files &lt;- append_to(collected_files, new_files)\n}"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#loops-1",
    "href": "slides/07-iterating-on-data.html#loops-1",
    "title": "Iterating on Data",
    "section": "Loops?",
    "text": "Loops?\n\n\nYou may have noticed we have not written any loops, however.\nWhile loops are still lurking there underneath the surface, what we will do instead is to take advantage of the combination of vectors and functions and map one to the other in order to generate results.\nSpeaking loosely, think of map() as a way of iterating without writing loops. You start with a vector of things. You feed it one thing at a time to some function. The function does whatever it does. You get back output that is the same length as your input, and of a specific type."
  },
  {
    "objectID": "slides/07-iterating-on-data.html#mapping-is-just-a-kind-of-iteration",
    "href": "slides/07-iterating-on-data.html#mapping-is-just-a-kind-of-iteration",
    "title": "Iterating on Data",
    "section": "Mapping is just a kind of iteration",
    "text": "Mapping is just a kind of iteration\n\n\nThe purrr package provides a big family of mapping functions. One reason there are a lot of them is that purrr, like the rest of the tidyverse, is picky about data types.\nSo in addition to the basic map(), which always returns a list, we also have map_chr(), map_int(), map_dbl(), map_lgl() and others. They always return the data type indicated by their suffix, or die trying."
  },
  {
    "objectID": "slides/07-iterating-on-data.html#vectorized-arithmetic-again",
    "href": "slides/07-iterating-on-data.html#vectorized-arithmetic-again",
    "title": "Iterating on Data",
    "section": "Vectorized arithmetic again",
    "text": "Vectorized arithmetic again\nThe simplest cases are not that different from the vectorized arithmetic we’re already familiar with.\n\na &lt;- c(1:10)\n\nb &lt;- 1\n\n# You know what R will do here\na + b\n\n [1]  2  3  4  5  6  7  8  9 10 11\n\n\n\nR’s vectorized rules add b to every element of a. In a sense, the + operation can be thought of as a function that takes each element of a and does something with it. In this case “add b”."
  },
  {
    "objectID": "slides/07-iterating-on-data.html#vectorized-arithmetic-again-1",
    "href": "slides/07-iterating-on-data.html#vectorized-arithmetic-again-1",
    "title": "Iterating on Data",
    "section": "Vectorized arithmetic again",
    "text": "Vectorized arithmetic again\nWe can make this explicit by writing a function:\n\nadd_b &lt;- function(x) {\n  b &lt;- 1\n  x + b # for any x\n}"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#vectorized-arithmetic-again-2",
    "href": "slides/07-iterating-on-data.html#vectorized-arithmetic-again-2",
    "title": "Iterating on Data",
    "section": "Vectorized arithmetic again",
    "text": "Vectorized arithmetic again\nWe can make this explicit by writing a function:\n\nadd_b &lt;- function(x) {\n  b &lt;- 1\n  x + b # for any x\n}\n\nNow:\n\nadd_b(x = a)\n\n [1]  2  3  4  5  6  7  8  9 10 11"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#vectorized-arithmetic-again-3",
    "href": "slides/07-iterating-on-data.html#vectorized-arithmetic-again-3",
    "title": "Iterating on Data",
    "section": "Vectorized arithmetic again",
    "text": "Vectorized arithmetic again\nAgain, R’s vectorized approach means it automatically adds b to every element of the x we give it.\n\nadd_b(x = 10)\n\n[1] 11\n\n\n\nadd_b(x = c(1, 99, 1000))\n\n[1]    2  100 1001"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#iterating-in-a-pipeline",
    "href": "slides/07-iterating-on-data.html#iterating-in-a-pipeline",
    "title": "Iterating on Data",
    "section": "Iterating in a pipeline",
    "text": "Iterating in a pipeline\nSome operations can’t directly be vectorized in this way, which is why we need to manually iterate, or will want to write loops.\n\nlibrary(gapminder)\ngapminder |&gt; \n  summarize(country_n = n_distinct(country), \n            continent_n = n_distinct(continent), \n            year_n = n_distinct(year), \n            lifeExp_n = n_distinct(lifeExp), \n            population_n = n_distinct(population))\n\n# A tibble: 1 × 5\n  country_n continent_n year_n lifeExp_n population_n\n      &lt;int&gt;       &lt;int&gt;  &lt;int&gt;     &lt;int&gt;        &lt;int&gt;\n1       142           5     12      1626         4060\n\n\nThat’s tedious to write! Computers are supposed to allow us to avoid that sort of thing."
  },
  {
    "objectID": "slides/07-iterating-on-data.html#iterating-in-a-pipeline-1",
    "href": "slides/07-iterating-on-data.html#iterating-in-a-pipeline-1",
    "title": "Iterating on Data",
    "section": "Iterating in a pipeline",
    "text": "Iterating in a pipeline\nSo how would we iterate this? What we want is to apply the n_distinct() function to each column of gapminder, but in a way that still allows us to use pipelines and so on.\n\nlibrary(gapminder)\ngapminder |&gt; \n  summarize(n_distinct(country), \n            n_distinct(continent), \n            n_distinct(year), \n            n_distinct(lifeExp), \n            n_distinct(population))\n\n# A tibble: 1 × 5\n  `n_distinct(country)` `n_distinct(continent)` `n_distinct(year)`\n                  &lt;int&gt;                   &lt;int&gt;              &lt;int&gt;\n1                   142                       5                 12\n# ℹ 2 more variables: `n_distinct(lifeExp)` &lt;int&gt;,\n#   `n_distinct(population)` &lt;int&gt;\n\n\n\n\nUsing n_distinct() in this context is an idea I got from Rebecca Barter’s discussion of purrr."
  },
  {
    "objectID": "slides/07-iterating-on-data.html#iterating-in-a-pipeline-2",
    "href": "slides/07-iterating-on-data.html#iterating-in-a-pipeline-2",
    "title": "Iterating on Data",
    "section": "Iterating in a pipeline",
    "text": "Iterating in a pipeline\nYou’d use across(), like this:\n\ngapminder |&gt; \n  summarize(across(everything(), n_distinct))\n\n# A tibble: 1 × 6\n  country continent  year lifeExp   pop gdpPercap\n    &lt;int&gt;     &lt;int&gt; &lt;int&gt;   &lt;int&gt; &lt;int&gt;     &lt;int&gt;\n1     142         5    12    1626  1704      1704"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#iterating-in-a-pipeline-3",
    "href": "slides/07-iterating-on-data.html#iterating-in-a-pipeline-3",
    "title": "Iterating on Data",
    "section": "Iterating in a pipeline",
    "text": "Iterating in a pipeline\nBut you could also do this …\n\n\n\n  map(gapminder, n_distinct)\n\n$country\n[1] 142\n\n$continent\n[1] 5\n\n$year\n[1] 12\n\n$lifeExp\n[1] 1626\n\n$pop\n[1] 1704\n\n$gdpPercap\n[1] 1704\n\n\n\n\nRead it as “Feed each column of gapminder to the n_distinct() function.\n(This is pretty much what across() is doing more nicely.)"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#iterating-in-a-pipeline-4",
    "href": "slides/07-iterating-on-data.html#iterating-in-a-pipeline-4",
    "title": "Iterating on Data",
    "section": "Iterating in a pipeline",
    "text": "Iterating in a pipeline\n\n\nOr, in pipeline form:\n\ngapminder |&gt; \n  map(n_distinct)\n\n$country\n[1] 142\n\n$continent\n[1] 5\n\n$year\n[1] 12\n\n$lifeExp\n[1] 1626\n\n$pop\n[1] 1704\n\n$gdpPercap\n[1] 1704\n\n\n\nYou can see we are getting a list back."
  },
  {
    "objectID": "slides/07-iterating-on-data.html#iterating-in-a-pipeline-5",
    "href": "slides/07-iterating-on-data.html#iterating-in-a-pipeline-5",
    "title": "Iterating on Data",
    "section": "Iterating in a pipeline",
    "text": "Iterating in a pipeline\nOr, in pipeline form:\n\nresult &lt;- gapminder |&gt; \n  map(n_distinct)\n\nclass(result)\n\n[1] \"list\"\n\nresult$continent\n\n[1] 5\n\nresult[[2]]\n\n[1] 5"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#iterating-in-a-pipeline-6",
    "href": "slides/07-iterating-on-data.html#iterating-in-a-pipeline-6",
    "title": "Iterating on Data",
    "section": "Iterating in a pipeline",
    "text": "Iterating in a pipeline\nBut we know n_distinct() should always return an integer. So we use map_int() instead of the generic map().\n\ngapminder |&gt; \n  map_int(n_distinct)\n\n  country continent      year   lifeExp       pop gdpPercap \n      142         5        12      1626      1704      1704 \n\n\n\nThe thing about the map() family is that they can deal with all kinds of input types and output types."
  },
  {
    "objectID": "slides/07-iterating-on-data.html#get-a-vector-of-filenames",
    "href": "slides/07-iterating-on-data.html#get-a-vector-of-filenames",
    "title": "Iterating on Data",
    "section": "Get a vector of filenames",
    "text": "Get a vector of filenames\n\nfilenames &lt;- dir(path = here(\"data\", \"congress\"),\n                 pattern = \"*.csv\",\n                 full.names = TRUE)\n\nfilenames[1:15] # Just displaying the first 15, to save slide space\n\n [1] \"/Users/kjhealy/Documents/courses/data_wrangling/data/congress/01_79_congress.csv\"\n [2] \"/Users/kjhealy/Documents/courses/data_wrangling/data/congress/02_80_congress.csv\"\n [3] \"/Users/kjhealy/Documents/courses/data_wrangling/data/congress/03_81_congress.csv\"\n [4] \"/Users/kjhealy/Documents/courses/data_wrangling/data/congress/04_82_congress.csv\"\n [5] \"/Users/kjhealy/Documents/courses/data_wrangling/data/congress/05_83_congress.csv\"\n [6] \"/Users/kjhealy/Documents/courses/data_wrangling/data/congress/06_84_congress.csv\"\n [7] \"/Users/kjhealy/Documents/courses/data_wrangling/data/congress/07_85_congress.csv\"\n [8] \"/Users/kjhealy/Documents/courses/data_wrangling/data/congress/08_86_congress.csv\"\n [9] \"/Users/kjhealy/Documents/courses/data_wrangling/data/congress/09_87_congress.csv\"\n[10] \"/Users/kjhealy/Documents/courses/data_wrangling/data/congress/10_88_congress.csv\"\n[11] \"/Users/kjhealy/Documents/courses/data_wrangling/data/congress/11_89_congress.csv\"\n[12] \"/Users/kjhealy/Documents/courses/data_wrangling/data/congress/12_90_congress.csv\"\n[13] \"/Users/kjhealy/Documents/courses/data_wrangling/data/congress/13_91_congress.csv\"\n[14] \"/Users/kjhealy/Documents/courses/data_wrangling/data/congress/14_92_congress.csv\"\n[15] \"/Users/kjhealy/Documents/courses/data_wrangling/data/congress/15_93_congress.csv\""
  },
  {
    "objectID": "slides/07-iterating-on-data.html#and-feed-it-to-read_csv",
    "href": "slides/07-iterating-on-data.html#and-feed-it-to-read_csv",
    "title": "Iterating on Data",
    "section": "And feed it to read_csv()",
    "text": "And feed it to read_csv()\n… using map() and binding the resulting list into a tibble.\n\ndf &lt;- filenames |&gt; \n  map(read_csv) |&gt; \n  list_rbind(names_to = \"congress\") |&gt; \n  janitor::clean_names()\n\ndf\n\n# A tibble: 20,580 × 26\n   congress last   first middle suffix nickname born  death sex   position party\n      &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt;\n 1        1 Abern… Thom… Gerst… &lt;NA&gt;   &lt;NA&gt;     05/1… 01/2… M     U.S. Re… Demo…\n 2        1 Adams  Sher… &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     01/0… 10/2… M     U.S. Re… Repu…\n 3        1 Aiken  Geor… David  &lt;NA&gt;   &lt;NA&gt;     08/2… 11/1… M     U.S. Se… Repu…\n 4        1 Allen  Asa   Leona… &lt;NA&gt;   &lt;NA&gt;     01/0… 01/0… M     U.S. Re… Demo…\n 5        1 Allen  Leo   Elwood &lt;NA&gt;   &lt;NA&gt;     10/0… 01/1… M     U.S. Re… Repu…\n 6        1 Almond J.    Linds… Jr.    &lt;NA&gt;     06/1… 04/1… M     U.S. Re… Demo…\n 7        1 Ander… Herm… Carl   &lt;NA&gt;   &lt;NA&gt;     01/2… 07/2… M     U.S. Re… Repu…\n 8        1 Ander… Clin… Presba &lt;NA&gt;   &lt;NA&gt;     10/2… 11/1… M     U.S. Re… Demo…\n 9        1 Ander… John  Zuing… &lt;NA&gt;   &lt;NA&gt;     03/2… 02/0… M     U.S. Re… Repu…\n10        1 Andre… Augu… Herman &lt;NA&gt;   &lt;NA&gt;     10/1… 01/1… M     U.S. Re… Repu…\n# ℹ 20,570 more rows\n# ℹ 15 more variables: state &lt;chr&gt;, district &lt;chr&gt;, start &lt;chr&gt;, end &lt;chr&gt;,\n#   religion &lt;chr&gt;, race &lt;chr&gt;, educational_attainment &lt;chr&gt;, job_type1 &lt;chr&gt;,\n#   job_type2 &lt;chr&gt;, job_type3 &lt;chr&gt;, job_type4 &lt;chr&gt;, job_type5 &lt;chr&gt;,\n#   mil1 &lt;chr&gt;, mil2 &lt;chr&gt;, mil3 &lt;chr&gt;"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#read_csv-can-do-this-directly",
    "href": "slides/07-iterating-on-data.html#read_csv-can-do-this-directly",
    "title": "Iterating on Data",
    "section": "read_csv() can do this directly",
    "text": "read_csv() can do this directly\nIn fact map() is not required for this particular use:\n\ntmp &lt;- read_csv(filenames, id = \"path\",\n                name_repair = janitor::make_clean_names)\n\ntmp |&gt; \n  mutate(congress = str_extract(path, \"_\\\\d{2,3}_congress\"), \n         congress = str_extract(congress, \"\\\\d{2,3}\")) |&gt; \n  relocate(congress)\n\n# A tibble: 20,580 × 27\n   congress path   last  first middle suffix nickname born  death sex   position\n   &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   \n 1 79       /User… Aber… Thom… Gerst… &lt;NA&gt;   &lt;NA&gt;     05/1… 01/2… M     U.S. Re…\n 2 79       /User… Adams Sher… &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     01/0… 10/2… M     U.S. Re…\n 3 79       /User… Aiken Geor… David  &lt;NA&gt;   &lt;NA&gt;     08/2… 11/1… M     U.S. Se…\n 4 79       /User… Allen Asa   Leona… &lt;NA&gt;   &lt;NA&gt;     01/0… 01/0… M     U.S. Re…\n 5 79       /User… Allen Leo   Elwood &lt;NA&gt;   &lt;NA&gt;     10/0… 01/1… M     U.S. Re…\n 6 79       /User… Almo… J.    Linds… Jr.    &lt;NA&gt;     06/1… 04/1… M     U.S. Re…\n 7 79       /User… Ande… Herm… Carl   &lt;NA&gt;   &lt;NA&gt;     01/2… 07/2… M     U.S. Re…\n 8 79       /User… Ande… Clin… Presba &lt;NA&gt;   &lt;NA&gt;     10/2… 11/1… M     U.S. Re…\n 9 79       /User… Ande… John  Zuing… &lt;NA&gt;   &lt;NA&gt;     03/2… 02/0… M     U.S. Re…\n10 79       /User… Andr… Augu… Herman &lt;NA&gt;   &lt;NA&gt;     10/1… 01/1… M     U.S. Re…\n# ℹ 20,570 more rows\n# ℹ 16 more variables: party &lt;chr&gt;, state &lt;chr&gt;, district &lt;chr&gt;, start &lt;chr&gt;,\n#   end &lt;chr&gt;, religion &lt;chr&gt;, race &lt;chr&gt;, educational_attainment &lt;chr&gt;,\n#   job_type1 &lt;chr&gt;, job_type2 &lt;chr&gt;, job_type3 &lt;chr&gt;, job_type4 &lt;chr&gt;,\n#   job_type5 &lt;chr&gt;, mil1 &lt;chr&gt;, mil2 &lt;chr&gt;, mil3 &lt;chr&gt;"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#iterating-on-the-us-census",
    "href": "slides/07-iterating-on-data.html#iterating-on-the-us-census",
    "title": "Iterating on Data",
    "section": "Iterating on the US Census",
    "text": "Iterating on the US Census\nMapped iteration is very general, and not just for local files\n\n## Register for a free Census API key\nlibrary(tidycensus)\n\n\nout &lt;- get_acs(geography = \"county\", \n                    variables = \"B19013_001\",\n                    state = \"NY\", \n                    county = \"New York\", \n                    survey = \"acs1\",\n                    year = 2005)\n\n\nout\n\n# A tibble: 1 × 5\n  GEOID NAME                      variable   estimate   moe\n  &lt;chr&gt; &lt;chr&gt;                     &lt;chr&gt;         &lt;dbl&gt; &lt;dbl&gt;\n1 36061 New York County, New York B19013_001    55973  1462"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#iterating-on-the-us-census-1",
    "href": "slides/07-iterating-on-data.html#iterating-on-the-us-census-1",
    "title": "Iterating on Data",
    "section": "Iterating on the US Census",
    "text": "Iterating on the US Census\nAll counties in New York State for a specific year\n\nout &lt;- get_acs(geography = \"county\", \n                    variables = \"B19013_001\",\n                    state = \"NY\", \n                    survey = \"acs1\",\n                    year = 2005)\n\n\nout\n\n# A tibble: 38 × 5\n   GEOID NAME                         variable   estimate   moe\n   &lt;chr&gt; &lt;chr&gt;                        &lt;chr&gt;         &lt;dbl&gt; &lt;dbl&gt;\n 1 36001 Albany County, New York      B19013_001    50054  2030\n 2 36005 Bronx County, New York       B19013_001    29228   853\n 3 36007 Broome County, New York      B19013_001    36394  2340\n 4 36009 Cattaraugus County, New York B19013_001    37580  2282\n 5 36011 Cayuga County, New York      B19013_001    42057  2406\n 6 36013 Chautauqua County, New York  B19013_001    35495  2077\n 7 36015 Chemung County, New York     B19013_001    37418  3143\n 8 36019 Clinton County, New York     B19013_001    44757  3500\n 9 36027 Dutchess County, New York    B19013_001    61889  2431\n10 36029 Erie County, New York        B19013_001    41967  1231\n# ℹ 28 more rows"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#iterating-on-the-us-census-2",
    "href": "slides/07-iterating-on-data.html#iterating-on-the-us-census-2",
    "title": "Iterating on Data",
    "section": "Iterating on the US Census",
    "text": "Iterating on the US Census\nWhat if we want the results for every available year? First, a handy function: set_names()\n\nx &lt;- c(1:10)\n\nx\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nx &lt;- set_names(x, nm = letters[1:10])\n\nx\n\n a  b  c  d  e  f  g  h  i  j \n 1  2  3  4  5  6  7  8  9 10"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#iterating-on-the-us-census-3",
    "href": "slides/07-iterating-on-data.html#iterating-on-the-us-census-3",
    "title": "Iterating on Data",
    "section": "Iterating on the US Census",
    "text": "Iterating on the US Census\nBy default, set_names() will label a vector with that vector’s values:\n\nc(1:10) |&gt; \n  set_names()\n\n 1  2  3  4  5  6  7  8  9 10 \n 1  2  3  4  5  6  7  8  9 10"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#iterating-on-the-us-census-4",
    "href": "slides/07-iterating-on-data.html#iterating-on-the-us-census-4",
    "title": "Iterating on Data",
    "section": "Iterating on the US Census",
    "text": "Iterating on the US Census\nThis works with map() just fine:\n\ndf &lt;- 2005:2019 |&gt; \n  map(\\(x) get_acs(geography = \"county\",\n                   variables = \"B19013_001\",\n                   state = \"NY\",\n                   survey = \"acs1\",\n                   year = x)) |&gt; \n  list_rbind(names_to = \"year\") \n\n\ndf\n\n# A tibble: 580 × 6\n    year GEOID NAME                         variable   estimate   moe\n   &lt;int&gt; &lt;chr&gt; &lt;chr&gt;                        &lt;chr&gt;         &lt;dbl&gt; &lt;dbl&gt;\n 1     1 36001 Albany County, New York      B19013_001    50054  2030\n 2     1 36005 Bronx County, New York       B19013_001    29228   853\n 3     1 36007 Broome County, New York      B19013_001    36394  2340\n 4     1 36009 Cattaraugus County, New York B19013_001    37580  2282\n 5     1 36011 Cayuga County, New York      B19013_001    42057  2406\n 6     1 36013 Chautauqua County, New York  B19013_001    35495  2077\n 7     1 36015 Chemung County, New York     B19013_001    37418  3143\n 8     1 36019 Clinton County, New York     B19013_001    44757  3500\n 9     1 36027 Dutchess County, New York    B19013_001    61889  2431\n10     1 36029 Erie County, New York        B19013_001    41967  1231\n# ℹ 570 more rows"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#iterating-on-the-us-census-5",
    "href": "slides/07-iterating-on-data.html#iterating-on-the-us-census-5",
    "title": "Iterating on Data",
    "section": "Iterating on the US Census",
    "text": "Iterating on the US Census\nOur id column tracks the year. But we’d like it to be the year. So, we use set_names():\n\ndf &lt;- 2005:2019 |&gt; \n  set_names() |&gt; \n  map(\\(x) get_acs(geography = \"county\",\n                   variables = \"B19013_001\",\n                   state = \"NY\",\n                   survey = \"acs1\",\n                   year = x)) |&gt; \n  list_rbind(names_to = \"year\") |&gt;\n  mutate(year = as.integer(year))"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#iterating-on-the-us-census-6",
    "href": "slides/07-iterating-on-data.html#iterating-on-the-us-census-6",
    "title": "Iterating on Data",
    "section": "Iterating on the US Census",
    "text": "Iterating on the US Census\n\ndf\n\n# A tibble: 580 × 6\n    year GEOID NAME                         variable   estimate   moe\n   &lt;int&gt; &lt;chr&gt; &lt;chr&gt;                        &lt;chr&gt;         &lt;dbl&gt; &lt;dbl&gt;\n 1  2005 36001 Albany County, New York      B19013_001    50054  2030\n 2  2005 36005 Bronx County, New York       B19013_001    29228   853\n 3  2005 36007 Broome County, New York      B19013_001    36394  2340\n 4  2005 36009 Cattaraugus County, New York B19013_001    37580  2282\n 5  2005 36011 Cayuga County, New York      B19013_001    42057  2406\n 6  2005 36013 Chautauqua County, New York  B19013_001    35495  2077\n 7  2005 36015 Chemung County, New York     B19013_001    37418  3143\n 8  2005 36019 Clinton County, New York     B19013_001    44757  3500\n 9  2005 36027 Dutchess County, New York    B19013_001    61889  2431\n10  2005 36029 Erie County, New York        B19013_001    41967  1231\n# ℹ 570 more rows\n\n\nNow year is just the year. The year column will be created as a character vector, so we converted it back to an integer again at the end."
  },
  {
    "objectID": "slides/07-iterating-on-data.html#iterating-on-the-us-census-7",
    "href": "slides/07-iterating-on-data.html#iterating-on-the-us-census-7",
    "title": "Iterating on Data",
    "section": "Iterating on the US Census",
    "text": "Iterating on the US Census\n\np_out &lt;- 2005:2019 |&gt;\n  set_names() |&gt;\n  map(\\(x) get_acs(geography = \"county\",\n                   variables = \"B19013_001\",\n                   state = \"NY\",\n                   survey = \"acs1\",\n                   year = x)) |&gt;\n  list_rbind(names_to = \"year\") |&gt;\n  mutate(year = as.integer(year)) |&gt;\n  ggplot(mapping = aes(x = year, y = estimate, group = year)) +\n  geom_boxplot(fill = \"lightblue\", alpha = 0.5, outlier.alpha = 0) +\n  geom_jitter(position = position_jitter(width = 0.1), shape = 1) +\n  scale_y_continuous(labels = scales::label_dollar()) +\n  labs(x = \"Year\", y = \"Dollars\",\n       title = \"Median Household Income by County in New York State, 2005-2019\",\n       subtitle = \"ACS 1-year estimates\", caption = \"Data: U.S. Census Bureau.\")"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#iterating-on-the-us-census-8",
    "href": "slides/07-iterating-on-data.html#iterating-on-the-us-census-8",
    "title": "Iterating on Data",
    "section": "Iterating on the US Census",
    "text": "Iterating on the US Census\n\nprint(p_out)"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#cleaning-up-congress",
    "href": "slides/07-iterating-on-data.html#cleaning-up-congress",
    "title": "Iterating on Data",
    "section": "Cleaning up congress",
    "text": "Cleaning up congress\n\ndf &lt;- filenames |&gt; \n  map(read_csv) |&gt; \n  list_rbind(names_to = \"congress\") |&gt; \n  janitor::clean_names()\n\ndf |&gt; \n  select(born, death, start, end)\n\n# A tibble: 20,580 × 4\n   born       death      start      end       \n   &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;     \n 1 05/16/1903 01/23/1953 01/03/1945 01/03/1953\n 2 01/08/1899 10/27/1986 01/03/1945 01/03/1947\n 3 08/20/1892 11/19/1984 01/03/1945 01/03/1979\n 4 01/05/1891 01/05/1969 01/03/1945 01/03/1953\n 5 10/05/1898 01/19/1973 01/03/1945 01/02/1949\n 6 06/15/1898 04/14/1986 02/04/1946 04/17/1948\n 7 01/27/1897 07/26/1978 01/03/1945 01/03/1963\n 8 10/23/1895 11/11/1975 01/03/1941 06/30/1945\n 9 03/22/1904 02/09/1981 01/03/1945 01/03/1953\n10 10/11/1890 01/14/1958 01/03/1945 01/14/1958\n# ℹ 20,570 more rows\n\n\nWe’ll use the lubridate package to sort these out.\nLubridate has a wide range of functions to handle dates, times, and durations.\n\nIn particular it has many convenience functions to help with the many different ways that people encode dates that ought to be encoded as YYYY-MM-DD."
  },
  {
    "objectID": "slides/07-iterating-on-data.html#cleaning-up-congress-1",
    "href": "slides/07-iterating-on-data.html#cleaning-up-congress-1",
    "title": "Iterating on Data",
    "section": "Cleaning up congress",
    "text": "Cleaning up congress\n\nlibrary(lubridate)\n\ndate_recodes &lt;- c(\"born\", \"death\", \"start\", \"end\")\ndf &lt;- df |&gt; \n    mutate(across(any_of(date_recodes), mdy), \n           congress = as.integer(congress) + 78)\n\ndf \n\n# A tibble: 20,580 × 26\n   congress last      first   middle suffix nickname born       death      sex  \n      &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;    &lt;date&gt;     &lt;date&gt;     &lt;chr&gt;\n 1       79 Abernethy Thomas  Gerst… &lt;NA&gt;   &lt;NA&gt;     1903-05-16 1953-01-23 M    \n 2       79 Adams     Sherman &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     1899-01-08 1986-10-27 M    \n 3       79 Aiken     George  David  &lt;NA&gt;   &lt;NA&gt;     1892-08-20 1984-11-19 M    \n 4       79 Allen     Asa     Leona… &lt;NA&gt;   &lt;NA&gt;     1891-01-05 1969-01-05 M    \n 5       79 Allen     Leo     Elwood &lt;NA&gt;   &lt;NA&gt;     1898-10-05 1973-01-19 M    \n 6       79 Almond    J.      Linds… Jr.    &lt;NA&gt;     1898-06-15 1986-04-14 M    \n 7       79 Andersen  Herman  Carl   &lt;NA&gt;   &lt;NA&gt;     1897-01-27 1978-07-26 M    \n 8       79 Anderson  Clinton Presba &lt;NA&gt;   &lt;NA&gt;     1895-10-23 1975-11-11 M    \n 9       79 Anderson  John    Zuing… &lt;NA&gt;   &lt;NA&gt;     1904-03-22 1981-02-09 M    \n10       79 Andresen  August  Herman &lt;NA&gt;   &lt;NA&gt;     1890-10-11 1958-01-14 M    \n# ℹ 20,570 more rows\n# ℹ 17 more variables: position &lt;chr&gt;, party &lt;chr&gt;, state &lt;chr&gt;,\n#   district &lt;chr&gt;, start &lt;date&gt;, end &lt;date&gt;, religion &lt;chr&gt;, race &lt;chr&gt;,\n#   educational_attainment &lt;chr&gt;, job_type1 &lt;chr&gt;, job_type2 &lt;chr&gt;,\n#   job_type3 &lt;chr&gt;, job_type4 &lt;chr&gt;, job_type5 &lt;chr&gt;, mil1 &lt;chr&gt;, mil2 &lt;chr&gt;,\n#   mil3 &lt;chr&gt;"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#cleaning-up-congress-2",
    "href": "slides/07-iterating-on-data.html#cleaning-up-congress-2",
    "title": "Iterating on Data",
    "section": "Cleaning up congress",
    "text": "Cleaning up congress\n\nsessions &lt;- tibble(congress = 79:116,\n                   start_year = seq(1945, 2019, by = 2),\n                   end_year = seq(1947, 2021, by = 2)) |&gt; \n  mutate(start_year = ymd(paste(start_year, \"01\", \"03\", sep = \"-\")), \n         end_year = ymd(paste(end_year, \"01\", \"03\", sep = \"-\")))\n\n\nsessions\n\n# A tibble: 38 × 3\n   congress start_year end_year  \n      &lt;int&gt; &lt;date&gt;     &lt;date&gt;    \n 1       79 1945-01-03 1947-01-03\n 2       80 1947-01-03 1949-01-03\n 3       81 1949-01-03 1951-01-03\n 4       82 1951-01-03 1953-01-03\n 5       83 1953-01-03 1955-01-03\n 6       84 1955-01-03 1957-01-03\n 7       85 1957-01-03 1959-01-03\n 8       86 1959-01-03 1961-01-03\n 9       87 1961-01-03 1963-01-03\n10       88 1963-01-03 1965-01-03\n# ℹ 28 more rows"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#were-going-to-join-these-tables",
    "href": "slides/07-iterating-on-data.html#were-going-to-join-these-tables",
    "title": "Iterating on Data",
    "section": "We’re going to join these tables",
    "text": "We’re going to join these tables\n\n\nThe big table:\n\ndf |&gt; \n  select(congress, last, born)\n\n# A tibble: 20,580 × 3\n   congress last      born      \n      &lt;dbl&gt; &lt;chr&gt;     &lt;date&gt;    \n 1       79 Abernethy 1903-05-16\n 2       79 Adams     1899-01-08\n 3       79 Aiken     1892-08-20\n 4       79 Allen     1891-01-05\n 5       79 Allen     1898-10-05\n 6       79 Almond    1898-06-15\n 7       79 Andersen  1897-01-27\n 8       79 Anderson  1895-10-23\n 9       79 Anderson  1904-03-22\n10       79 Andresen  1890-10-11\n# ℹ 20,570 more rows\n\n\n\nThe smaller table\n\nsessions\n\n# A tibble: 38 × 3\n   congress start_year end_year  \n      &lt;int&gt; &lt;date&gt;     &lt;date&gt;    \n 1       79 1945-01-03 1947-01-03\n 2       80 1947-01-03 1949-01-03\n 3       81 1949-01-03 1951-01-03\n 4       82 1951-01-03 1953-01-03\n 5       83 1953-01-03 1955-01-03\n 6       84 1955-01-03 1957-01-03\n 7       85 1957-01-03 1959-01-03\n 8       86 1959-01-03 1961-01-03\n 9       87 1961-01-03 1963-01-03\n10       88 1963-01-03 1965-01-03\n# ℹ 28 more rows"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#were-going-to-join-these-tables-1",
    "href": "slides/07-iterating-on-data.html#were-going-to-join-these-tables-1",
    "title": "Iterating on Data",
    "section": "We’re going to join these tables",
    "text": "We’re going to join these tables\nWe will use left_join() which is what you want most of the time when you are looking to merge a smaller table with additional information into a larger main one.\n\ndf &lt;- left_join(df, sessions) |&gt; \n  relocate(start_year:end_year, .after = congress)  \n\nJoining with `by = join_by(congress)`\n\ndf \n\n# A tibble: 20,580 × 28\n   congress start_year end_year   last   first middle suffix nickname born      \n      &lt;dbl&gt; &lt;date&gt;     &lt;date&gt;     &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;    &lt;date&gt;    \n 1       79 1945-01-03 1947-01-03 Abern… Thom… Gerst… &lt;NA&gt;   &lt;NA&gt;     1903-05-16\n 2       79 1945-01-03 1947-01-03 Adams  Sher… &lt;NA&gt;   &lt;NA&gt;   &lt;NA&gt;     1899-01-08\n 3       79 1945-01-03 1947-01-03 Aiken  Geor… David  &lt;NA&gt;   &lt;NA&gt;     1892-08-20\n 4       79 1945-01-03 1947-01-03 Allen  Asa   Leona… &lt;NA&gt;   &lt;NA&gt;     1891-01-05\n 5       79 1945-01-03 1947-01-03 Allen  Leo   Elwood &lt;NA&gt;   &lt;NA&gt;     1898-10-05\n 6       79 1945-01-03 1947-01-03 Almond J.    Linds… Jr.    &lt;NA&gt;     1898-06-15\n 7       79 1945-01-03 1947-01-03 Ander… Herm… Carl   &lt;NA&gt;   &lt;NA&gt;     1897-01-27\n 8       79 1945-01-03 1947-01-03 Ander… Clin… Presba &lt;NA&gt;   &lt;NA&gt;     1895-10-23\n 9       79 1945-01-03 1947-01-03 Ander… John  Zuing… &lt;NA&gt;   &lt;NA&gt;     1904-03-22\n10       79 1945-01-03 1947-01-03 Andre… Augu… Herman &lt;NA&gt;   &lt;NA&gt;     1890-10-11\n# ℹ 20,570 more rows\n# ℹ 19 more variables: death &lt;date&gt;, sex &lt;chr&gt;, position &lt;chr&gt;, party &lt;chr&gt;,\n#   state &lt;chr&gt;, district &lt;chr&gt;, start &lt;date&gt;, end &lt;date&gt;, religion &lt;chr&gt;,\n#   race &lt;chr&gt;, educational_attainment &lt;chr&gt;, job_type1 &lt;chr&gt;, job_type2 &lt;chr&gt;,\n#   job_type3 &lt;chr&gt;, job_type4 &lt;chr&gt;, job_type5 &lt;chr&gt;, mil1 &lt;chr&gt;, mil2 &lt;chr&gt;,\n#   mil3 &lt;chr&gt;"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#table-joins",
    "href": "slides/07-iterating-on-data.html#table-joins",
    "title": "Iterating on Data",
    "section": "Table joins",
    "text": "Table joins\n\n\n\nSpiffy Join Animatations courtesy Garrick Aden-Buie"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#left-join-left_join",
    "href": "slides/07-iterating-on-data.html#left-join-left_join",
    "title": "Iterating on Data",
    "section": "Left join, left_join()",
    "text": "Left join, left_join()\n\nAll rows from x, and all columns from x and y. Rows in x with no match in y will have NA values in the new columns."
  },
  {
    "objectID": "slides/07-iterating-on-data.html#left-join-contd-left_join",
    "href": "slides/07-iterating-on-data.html#left-join-contd-left_join",
    "title": "Iterating on Data",
    "section": "Left join (contd), left_join()",
    "text": "Left join (contd), left_join()\n\nIf there are multiple matches between x and y, all combinations of the matches are returned."
  },
  {
    "objectID": "slides/07-iterating-on-data.html#inner-join-inner_join",
    "href": "slides/07-iterating-on-data.html#inner-join-inner_join",
    "title": "Iterating on Data",
    "section": "Inner join, inner_join()",
    "text": "Inner join, inner_join()\n\nAll rows from x where there are matching values in y, and all columns from x and y."
  },
  {
    "objectID": "slides/07-iterating-on-data.html#full-join-full_join",
    "href": "slides/07-iterating-on-data.html#full-join-full_join",
    "title": "Iterating on Data",
    "section": "Full join, full_join()",
    "text": "Full join, full_join()\n\nAll rows and all columns from both x and y. Where there are not matching values, returns NA for the one missing."
  },
  {
    "objectID": "slides/07-iterating-on-data.html#semi-join-semi_join",
    "href": "slides/07-iterating-on-data.html#semi-join-semi_join",
    "title": "Iterating on Data",
    "section": "Semi join, semi_join()",
    "text": "Semi join, semi_join()\n\nAll rows from x where there are matching values in y, keeping just columns from x."
  },
  {
    "objectID": "slides/07-iterating-on-data.html#anti-join-anti_join",
    "href": "slides/07-iterating-on-data.html#anti-join-anti_join",
    "title": "Iterating on Data",
    "section": "Anti join, anti_join()",
    "text": "Anti join, anti_join()\n\nAll rows from x where there are not matching values in y, keeping just columns from x."
  },
  {
    "objectID": "slides/07-iterating-on-data.html#left-join-left_join-1",
    "href": "slides/07-iterating-on-data.html#left-join-left_join-1",
    "title": "Iterating on Data",
    "section": "Left join, left_join()",
    "text": "Left join, left_join()\nMost of the time you will be looking to make a left_join()"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#never-test-for-missingness-with",
    "href": "slides/07-iterating-on-data.html#never-test-for-missingness-with",
    "title": "Iterating on Data",
    "section": "Never test for missingness with ==",
    "text": "Never test for missingness with ==\nThe result of almost any operation involving a missing/unknown value will be missing/unknown.\n\ndf &lt;- tribble(\n  ~subject, ~age,\n  \"A\", 20,\n  \"B\", 25,\n  \"C\", NA,\n  \"D\", 34\n)\n\ndf\n\n# A tibble: 4 × 2\n  subject   age\n  &lt;chr&gt;   &lt;dbl&gt;\n1 A          20\n2 B          25\n3 C          NA\n4 D          34"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#never-test-for-missingness-with-1",
    "href": "slides/07-iterating-on-data.html#never-test-for-missingness-with-1",
    "title": "Iterating on Data",
    "section": "Never test for missingness with ==",
    "text": "Never test for missingness with ==\nThe result of almost any operation involving a missing/unknown value will be missing/unknown.\n\n# OK\ndf |&gt; \n  filter(age == 25)\n\n# A tibble: 1 × 2\n  subject   age\n  &lt;chr&gt;   &lt;dbl&gt;\n1 B          25"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#never-test-for-missingness-with-2",
    "href": "slides/07-iterating-on-data.html#never-test-for-missingness-with-2",
    "title": "Iterating on Data",
    "section": "Never test for missingness with ==",
    "text": "Never test for missingness with ==\nThe result of almost any operation involving a missing/unknown value will be missing/unknown.\n\n# Nope\ndf |&gt; \n  filter(age == NA)\n\n# A tibble: 0 × 2\n# ℹ 2 variables: subject &lt;chr&gt;, age &lt;dbl&gt;"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#never-test-for-missingness-with-3",
    "href": "slides/07-iterating-on-data.html#never-test-for-missingness-with-3",
    "title": "Iterating on Data",
    "section": "Never test for missingness with ==",
    "text": "Never test for missingness with ==\nThe result of almost any operation involving a missing/unknown value will be missing/unknown.\n\n# E.g.\n23 == NA\n\n[1] NA"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#never-test-for-missingness-with-4",
    "href": "slides/07-iterating-on-data.html#never-test-for-missingness-with-4",
    "title": "Iterating on Data",
    "section": "Never test for missingness with ==",
    "text": "Never test for missingness with ==\nAlways use is.na() instead\n\n# Yes\ndf |&gt; \n  filter(is.na(age))\n\n# A tibble: 1 × 2\n  subject   age\n  &lt;chr&gt;   &lt;dbl&gt;\n1 C          NA"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#a-quick-plug-for-naniar-and-visdat",
    "href": "slides/07-iterating-on-data.html#a-quick-plug-for-naniar-and-visdat",
    "title": "Iterating on Data",
    "section": "A quick plug for naniar and visdat",
    "text": "A quick plug for naniar and visdat\n\nlibrary(naniar)\nlibrary(visdat)\n\norgandata\n\n# A tibble: 238 × 21\n   country   year       donors   pop pop_dens   gdp gdp_lag health health_lag\n   &lt;chr&gt;     &lt;date&gt;      &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;int&gt;   &lt;int&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n 1 Australia NA          NA    17065    0.220 16774   16591   1300       1224\n 2 Australia 1991-01-01  12.1  17284    0.223 17171   16774   1379       1300\n 3 Australia 1992-01-01  12.4  17495    0.226 17914   17171   1455       1379\n 4 Australia 1993-01-01  12.5  17667    0.228 18883   17914   1540       1455\n 5 Australia 1994-01-01  10.2  17855    0.231 19849   18883   1626       1540\n 6 Australia 1995-01-01  10.2  18072    0.233 21079   19849   1737       1626\n 7 Australia 1996-01-01  10.6  18311    0.237 21923   21079   1846       1737\n 8 Australia 1997-01-01  10.3  18518    0.239 22961   21923   1948       1846\n 9 Australia 1998-01-01  10.5  18711    0.242 24148   22961   2077       1948\n10 Australia 1999-01-01   8.67 18926    0.244 25445   24148   2231       2077\n# ℹ 228 more rows\n# ℹ 12 more variables: pubhealth &lt;dbl&gt;, roads &lt;dbl&gt;, cerebvas &lt;int&gt;,\n#   assault &lt;int&gt;, external &lt;int&gt;, txp_pop &lt;dbl&gt;, world &lt;chr&gt;, opt &lt;chr&gt;,\n#   consent_law &lt;chr&gt;, consent_practice &lt;chr&gt;, consistent &lt;chr&gt;, ccode &lt;chr&gt;"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#a-quick-plug-for-naniar-and-visdat-1",
    "href": "slides/07-iterating-on-data.html#a-quick-plug-for-naniar-and-visdat-1",
    "title": "Iterating on Data",
    "section": "A quick plug for naniar and visdat",
    "text": "A quick plug for naniar and visdat\n\ngg_miss_var(organdata)"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#a-quick-plug-for-naniar-and-visdat-2",
    "href": "slides/07-iterating-on-data.html#a-quick-plug-for-naniar-and-visdat-2",
    "title": "Iterating on Data",
    "section": "A quick plug for naniar and visdat",
    "text": "A quick plug for naniar and visdat\n\nvis_dat(organdata)"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#a-quick-plug-for-naniar-and-visdat-3",
    "href": "slides/07-iterating-on-data.html#a-quick-plug-for-naniar-and-visdat-3",
    "title": "Iterating on Data",
    "section": "A quick plug for naniar and visdat",
    "text": "A quick plug for naniar and visdat\n\nmiss_var_summary(organdata)\n\n# A tibble: 21 × 3\n   variable  n_miss pct_miss\n   &lt;chr&gt;      &lt;int&gt;    &lt;num&gt;\n 1 year          34    14.3 \n 2 donors        34    14.3 \n 3 opt           28    11.8 \n 4 pubhealth     21     8.82\n 5 pop           17     7.14\n 6 pop_dens      17     7.14\n 7 gdp           17     7.14\n 8 roads         17     7.14\n 9 cerebvas      17     7.14\n10 assault       17     7.14\n# ℹ 11 more rows"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#a-quick-plug-for-naniar-and-visdat-4",
    "href": "slides/07-iterating-on-data.html#a-quick-plug-for-naniar-and-visdat-4",
    "title": "Iterating on Data",
    "section": "A quick plug for naniar and visdat",
    "text": "A quick plug for naniar and visdat\n\nmiss_case_summary(organdata)\n\n# A tibble: 238 × 3\n    case n_miss pct_miss\n   &lt;int&gt;  &lt;int&gt;    &lt;dbl&gt;\n 1    84     12     57.1\n 2   182     12     57.1\n 3   210     12     57.1\n 4    14     11     52.4\n 5    28     11     52.4\n 6    42     11     52.4\n 7    56     11     52.4\n 8    70     11     52.4\n 9    98     11     52.4\n10   112     11     52.4\n# ℹ 228 more rows"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#a-quick-plug-for-naniar-and-visdat-5",
    "href": "slides/07-iterating-on-data.html#a-quick-plug-for-naniar-and-visdat-5",
    "title": "Iterating on Data",
    "section": "A quick plug for naniar and visdat",
    "text": "A quick plug for naniar and visdat\n\norgandata |&gt;\n  select(consent_law, year, pubhealth, roads) |&gt;\n  group_by(consent_law) |&gt;\n  miss_var_summary()\n\n# A tibble: 6 × 4\n# Groups:   consent_law [2]\n  consent_law variable  n_miss pct_miss\n  &lt;chr&gt;       &lt;chr&gt;      &lt;int&gt;    &lt;num&gt;\n1 Informed    year          16    14.3 \n2 Informed    pubhealth      8     7.14\n3 Informed    roads          8     7.14\n4 Presumed    year          18    14.3 \n5 Presumed    pubhealth     13    10.3 \n6 Presumed    roads          9     7.14"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#a-quick-plug-for-naniar-and-visdat-6",
    "href": "slides/07-iterating-on-data.html#a-quick-plug-for-naniar-and-visdat-6",
    "title": "Iterating on Data",
    "section": "A quick plug for naniar and visdat",
    "text": "A quick plug for naniar and visdat\n\nvis_miss(organdata)"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#a-quick-plug-for-naniar-and-visdat-7",
    "href": "slides/07-iterating-on-data.html#a-quick-plug-for-naniar-and-visdat-7",
    "title": "Iterating on Data",
    "section": "A quick plug for naniar and visdat",
    "text": "A quick plug for naniar and visdat\n\nlibrary(dwcongress)\ngg_miss_upset(congress)"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#a-quick-plug-for-naniar-and-visdat-8",
    "href": "slides/07-iterating-on-data.html#a-quick-plug-for-naniar-and-visdat-8",
    "title": "Iterating on Data",
    "section": "A quick plug for naniar and visdat",
    "text": "A quick plug for naniar and visdat\n\nvis_miss(organdata, cluster = TRUE)"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#a-quick-plug-for-naniar-and-visdat-9",
    "href": "slides/07-iterating-on-data.html#a-quick-plug-for-naniar-and-visdat-9",
    "title": "Iterating on Data",
    "section": "A quick plug for naniar and visdat",
    "text": "A quick plug for naniar and visdat\n\ngg_miss_upset(organdata)"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#upset-plots-and-a-bit-of-wrangling",
    "href": "slides/07-iterating-on-data.html#upset-plots-and-a-bit-of-wrangling",
    "title": "Iterating on Data",
    "section": "Upset plots and a bit of wrangling",
    "text": "Upset plots and a bit of wrangling\n\n:scale 35%"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#upset-plots-and-a-bit-of-wrangling-1",
    "href": "slides/07-iterating-on-data.html#upset-plots-and-a-bit-of-wrangling-1",
    "title": "Iterating on Data",
    "section": "Upset plots and a bit of wrangling",
    "text": "Upset plots and a bit of wrangling\n\nsymptoms &lt;- c(\"Anosmia\", \"Cough\", \"Fatigue\", \n              \"Diarrhea\", \"Breath\", \"Fever\")\nnames(symptoms) &lt;- symptoms\nsymptoms\n\n   Anosmia      Cough    Fatigue   Diarrhea     Breath      Fever \n \"Anosmia\"    \"Cough\"  \"Fatigue\" \"Diarrhea\"   \"Breath\"    \"Fever\""
  },
  {
    "objectID": "slides/07-iterating-on-data.html#upset-plots-and-a-bit-of-wrangling-2",
    "href": "slides/07-iterating-on-data.html#upset-plots-and-a-bit-of-wrangling-2",
    "title": "Iterating on Data",
    "section": "Upset plots and a bit of wrangling",
    "text": "Upset plots and a bit of wrangling\n\n# An Excel file!\ndat &lt;- readxl::read_xlsx(here(\"data\", \"symptoms.xlsx\")) \ndat |&gt; print(n = nrow(dat))\n\n# A tibble: 32 × 2\n   combination                                 count\n   &lt;chr&gt;                                       &lt;dbl&gt;\n 1 Anosmia                                       140\n 2 Cough                                          57\n 3 Fatigue                                       198\n 4 Diarrhea                                       12\n 5 Breath                                          5\n 6 Fever                                          11\n 7 Cough&Fatigue                                 179\n 8 Fatigue&Fever                                  28\n 9 Breath&Fatigue                                 10\n10 Diarrhea&Fatigue                               43\n11 Anosmia&Fatigue                               281\n12 Breath&Cough                                    1\n13 Anosmia&Diarrhea&Fatigue                       64\n14 Breath&Cough&Fatigue                           22\n15 Anosmia&Cough&Fatigue                         259\n16 Anosmia&Fever&Fatigue                          46\n17 Cough&Fever&Fatigue                            54\n18 Cough&Diarrhea                                  7\n19 Cough&Diarrhea&Fatigue                         31\n20 Anosmia&Breath&Cough&Fatigue                   26\n21 Anosmia&Cough&Fatigue&Fever                    69\n22 Anosmia&Breath&Cough&Diarrhea&Fatigue          18\n23 Anosmia&Breath&Cough&Fatigue&Fever             17\n24 Breath&Cough&Fatigue&Fever                     11\n25 Breath&Cough&Diarrhea&Fatigue                   7\n26 Breath&Cough&Diarrhea&Fatigue&Fever             8\n27 Diarrhea&Fatigue&Fever                         12\n28 Cough&Diarrhea&Fatigue&Fever                   17\n29 Anosmia&Diarrhea&Fatigue&Fever                 17\n30 Anosmia&Diarrhea&Cough&Fatigue                 41\n31 Anosmia&Breath&Cough&Diarrhea&Fatigue&Fever    23\n32 Anosmia&Cough&Diarrhea&Fatigue&Fever           50"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#upset-plots-and-a-bit-of-wrangling-3",
    "href": "slides/07-iterating-on-data.html#upset-plots-and-a-bit-of-wrangling-3",
    "title": "Iterating on Data",
    "section": "Upset plots and a bit of wrangling",
    "text": "Upset plots and a bit of wrangling\n\nsubsets &lt;- dat |&gt; \n  pull(combination)\n\n## Check if each subset mentions each symptom or not\nsymptom_mat &lt;- map(subsets, \\(x) str_detect(x, symptoms)) |&gt; \n  set_names(nm = subsets) |&gt; \n  map(\\(x) set_names(x, nm = symptoms)) |&gt; \n  bind_rows(.id = \"subset\") |&gt; \n  left_join(dat, join_by(subset == combination))"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#upset-plots-and-a-bit-of-wrangling-4",
    "href": "slides/07-iterating-on-data.html#upset-plots-and-a-bit-of-wrangling-4",
    "title": "Iterating on Data",
    "section": "Upset plots and a bit of wrangling",
    "text": "Upset plots and a bit of wrangling\nNow we have a table we can do something with.\n\nsymptom_mat |&gt; print(n = nrow(symptom_mat))\n\n# A tibble: 32 × 8\n   subset                      Anosmia Cough Fatigue Diarrhea Breath Fever count\n   &lt;chr&gt;                       &lt;lgl&gt;   &lt;lgl&gt; &lt;lgl&gt;   &lt;lgl&gt;    &lt;lgl&gt;  &lt;lgl&gt; &lt;dbl&gt;\n 1 Anosmia                     TRUE    FALSE FALSE   FALSE    FALSE  FALSE   140\n 2 Cough                       FALSE   TRUE  FALSE   FALSE    FALSE  FALSE    57\n 3 Fatigue                     FALSE   FALSE TRUE    FALSE    FALSE  FALSE   198\n 4 Diarrhea                    FALSE   FALSE FALSE   TRUE     FALSE  FALSE    12\n 5 Breath                      FALSE   FALSE FALSE   FALSE    TRUE   FALSE     5\n 6 Fever                       FALSE   FALSE FALSE   FALSE    FALSE  TRUE     11\n 7 Cough&Fatigue               FALSE   TRUE  TRUE    FALSE    FALSE  FALSE   179\n 8 Fatigue&Fever               FALSE   FALSE TRUE    FALSE    FALSE  TRUE     28\n 9 Breath&Fatigue              FALSE   FALSE TRUE    FALSE    TRUE   FALSE    10\n10 Diarrhea&Fatigue            FALSE   FALSE TRUE    TRUE     FALSE  FALSE    43\n11 Anosmia&Fatigue             TRUE    FALSE TRUE    FALSE    FALSE  FALSE   281\n12 Breath&Cough                FALSE   TRUE  FALSE   FALSE    TRUE   FALSE     1\n13 Anosmia&Diarrhea&Fatigue    TRUE    FALSE TRUE    TRUE     FALSE  FALSE    64\n14 Breath&Cough&Fatigue        FALSE   TRUE  TRUE    FALSE    TRUE   FALSE    22\n15 Anosmia&Cough&Fatigue       TRUE    TRUE  TRUE    FALSE    FALSE  FALSE   259\n16 Anosmia&Fever&Fatigue       TRUE    FALSE TRUE    FALSE    FALSE  TRUE     46\n17 Cough&Fever&Fatigue         FALSE   TRUE  TRUE    FALSE    FALSE  TRUE     54\n18 Cough&Diarrhea              FALSE   TRUE  FALSE   TRUE     FALSE  FALSE     7\n19 Cough&Diarrhea&Fatigue      FALSE   TRUE  TRUE    TRUE     FALSE  FALSE    31\n20 Anosmia&Breath&Cough&Fatig… TRUE    TRUE  TRUE    FALSE    TRUE   FALSE    26\n21 Anosmia&Cough&Fatigue&Fever TRUE    TRUE  TRUE    FALSE    FALSE  TRUE     69\n22 Anosmia&Breath&Cough&Diarr… TRUE    TRUE  TRUE    TRUE     TRUE   FALSE    18\n23 Anosmia&Breath&Cough&Fatig… TRUE    TRUE  TRUE    FALSE    TRUE   TRUE     17\n24 Breath&Cough&Fatigue&Fever  FALSE   TRUE  TRUE    FALSE    TRUE   TRUE     11\n25 Breath&Cough&Diarrhea&Fati… FALSE   TRUE  TRUE    TRUE     TRUE   FALSE     7\n26 Breath&Cough&Diarrhea&Fati… FALSE   TRUE  TRUE    TRUE     TRUE   TRUE      8\n27 Diarrhea&Fatigue&Fever      FALSE   FALSE TRUE    TRUE     FALSE  TRUE     12\n28 Cough&Diarrhea&Fatigue&Fev… FALSE   TRUE  TRUE    TRUE     FALSE  TRUE     17\n29 Anosmia&Diarrhea&Fatigue&F… TRUE    FALSE TRUE    TRUE     FALSE  TRUE     17\n30 Anosmia&Diarrhea&Cough&Fat… TRUE    TRUE  TRUE    TRUE     FALSE  FALSE    41\n31 Anosmia&Breath&Cough&Diarr… TRUE    TRUE  TRUE    TRUE     TRUE   TRUE     23\n32 Anosmia&Cough&Diarrhea&Fat… TRUE    TRUE  TRUE    TRUE     FALSE  TRUE     50"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#upset-plots-and-a-bit-of-wrangling-5",
    "href": "slides/07-iterating-on-data.html#upset-plots-and-a-bit-of-wrangling-5",
    "title": "Iterating on Data",
    "section": "Upset plots and a bit of wrangling",
    "text": "Upset plots and a bit of wrangling\nUncounting tables:\n\nindvs &lt;- symptom_mat |&gt;\n    uncount(count) \n\nindvs\n\n# A tibble: 1,764 × 7\n   subset  Anosmia Cough Fatigue Diarrhea Breath Fever\n   &lt;chr&gt;   &lt;lgl&gt;   &lt;lgl&gt; &lt;lgl&gt;   &lt;lgl&gt;    &lt;lgl&gt;  &lt;lgl&gt;\n 1 Anosmia TRUE    FALSE FALSE   FALSE    FALSE  FALSE\n 2 Anosmia TRUE    FALSE FALSE   FALSE    FALSE  FALSE\n 3 Anosmia TRUE    FALSE FALSE   FALSE    FALSE  FALSE\n 4 Anosmia TRUE    FALSE FALSE   FALSE    FALSE  FALSE\n 5 Anosmia TRUE    FALSE FALSE   FALSE    FALSE  FALSE\n 6 Anosmia TRUE    FALSE FALSE   FALSE    FALSE  FALSE\n 7 Anosmia TRUE    FALSE FALSE   FALSE    FALSE  FALSE\n 8 Anosmia TRUE    FALSE FALSE   FALSE    FALSE  FALSE\n 9 Anosmia TRUE    FALSE FALSE   FALSE    FALSE  FALSE\n10 Anosmia TRUE    FALSE FALSE   FALSE    FALSE  FALSE\n# ℹ 1,754 more rows\n\n\nNow we’ve reconstructed the individual-level observations."
  },
  {
    "objectID": "slides/07-iterating-on-data.html#upset-plots-and-a-bit-of-wrangling-6",
    "href": "slides/07-iterating-on-data.html#upset-plots-and-a-bit-of-wrangling-6",
    "title": "Iterating on Data",
    "section": "Upset plots and a bit of wrangling",
    "text": "Upset plots and a bit of wrangling\n\n# devtools::install_github(\"krassowski/complex-upset\")\n\nlibrary(ComplexUpset)\n\nupset(data = indvs, intersect = symptoms, \n      name=\"Symptom Groupings by Frequency. Total pool is 1,764 individuals.\", \n      min_size = 0,\n      width_ratio = 0.125) +\n    labs(title = \"Co-Occurence of COVID-19 Symptoms\",\n         caption = \"Data: covid.joinzoe.com/us | Graph: @kjhealy\")"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#upset-plots-and-a-bit-of-wrangling-7",
    "href": "slides/07-iterating-on-data.html#upset-plots-and-a-bit-of-wrangling-7",
    "title": "Iterating on Data",
    "section": "Upset plots and a bit of wrangling",
    "text": "Upset plots and a bit of wrangling"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#this-is-not-a-statistics-seminar",
    "href": "slides/07-iterating-on-data.html#this-is-not-a-statistics-seminar",
    "title": "Iterating on Data",
    "section": "This is not a statistics seminar!",
    "text": "This is not a statistics seminar!\n\nI’ll just give you an example of the sort of thing that many other modeling packages implement for all kinds of modeling techniques.\nAgain, the principle is tidy incorporation of models and their output."
  },
  {
    "objectID": "slides/07-iterating-on-data.html#tidy-regression-output-with-broom",
    "href": "slides/07-iterating-on-data.html#tidy-regression-output-with-broom",
    "title": "Iterating on Data",
    "section": "Tidy regression output with broom",
    "text": "Tidy regression output with broom\n\nlibrary(broom)\nlibrary(gapminder)\n\n\nout &lt;- lm(formula = lifeExp ~ gdpPercap + pop + continent,\n          data = gapminder)"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#tidy-regression-output-with-broom-1",
    "href": "slides/07-iterating-on-data.html#tidy-regression-output-with-broom-1",
    "title": "Iterating on Data",
    "section": "Tidy regression output with broom",
    "text": "Tidy regression output with broom\nWe can’t do anything with this, programatically.\n\nsummary(out)\n\n\nCall:\nlm(formula = lifeExp ~ gdpPercap + pop + continent, data = gapminder)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-49.161  -4.486   0.297   5.110  25.175 \n\nCoefficients:\n                   Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)       4.781e+01  3.395e-01 140.819  &lt; 2e-16 ***\ngdpPercap         4.495e-04  2.346e-05  19.158  &lt; 2e-16 ***\npop               6.570e-09  1.975e-09   3.326 0.000901 ***\ncontinentAmericas 1.348e+01  6.000e-01  22.458  &lt; 2e-16 ***\ncontinentAsia     8.193e+00  5.712e-01  14.342  &lt; 2e-16 ***\ncontinentEurope   1.747e+01  6.246e-01  27.973  &lt; 2e-16 ***\ncontinentOceania  1.808e+01  1.782e+00  10.146  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 8.365 on 1697 degrees of freedom\nMultiple R-squared:  0.5821,    Adjusted R-squared:  0.5806 \nF-statistic: 393.9 on 6 and 1697 DF,  p-value: &lt; 2.2e-16"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#tidy-regression-output-with-broom-2",
    "href": "slides/07-iterating-on-data.html#tidy-regression-output-with-broom-2",
    "title": "Iterating on Data",
    "section": "Tidy regression output with broom",
    "text": "Tidy regression output with broom\n\nlibrary(broom)\n\n\ntidy(out)\n\n# A tibble: 7 × 5\n  term              estimate     std.error statistic   p.value\n  &lt;chr&gt;                &lt;dbl&gt;         &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)        4.78e+1 0.340            141.   0        \n2 gdpPercap          4.50e-4 0.0000235         19.2  3.24e- 74\n3 pop                6.57e-9 0.00000000198      3.33 9.01e-  4\n4 continentAmericas  1.35e+1 0.600             22.5  5.19e- 98\n5 continentAsia      8.19e+0 0.571             14.3  4.06e- 44\n6 continentEurope    1.75e+1 0.625             28.0  6.34e-142\n7 continentOceania   1.81e+1 1.78              10.1  1.59e- 23\n\n\nThat’s a lot nicer. Now it’s just a tibble. We know those."
  },
  {
    "objectID": "slides/07-iterating-on-data.html#tidy-regression-output-with-broom-3",
    "href": "slides/07-iterating-on-data.html#tidy-regression-output-with-broom-3",
    "title": "Iterating on Data",
    "section": "Tidy regression output with broom",
    "text": "Tidy regression output with broom\n\nout_conf &lt;- tidy(out, conf.int = TRUE)\nout_conf \n\n# A tibble: 7 × 7\n  term              estimate    std.error statistic   p.value conf.low conf.high\n  &lt;chr&gt;                &lt;dbl&gt;        &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)        4.78e+1      3.40e-1    141.   0          4.71e+1   4.85e+1\n2 gdpPercap          4.50e-4      2.35e-5     19.2  3.24e- 74  4.03e-4   4.96e-4\n3 pop                6.57e-9      1.98e-9      3.33 9.01e-  4  2.70e-9   1.04e-8\n4 continentAmericas  1.35e+1      6.00e-1     22.5  5.19e- 98  1.23e+1   1.47e+1\n5 continentAsia      8.19e+0      5.71e-1     14.3  4.06e- 44  7.07e+0   9.31e+0\n6 continentEurope    1.75e+1      6.25e-1     28.0  6.34e-142  1.62e+1   1.87e+1\n7 continentOceania   1.81e+1      1.78e+0     10.1  1.59e- 23  1.46e+1   2.16e+1"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#tidy-regression-output-with-broom-4",
    "href": "slides/07-iterating-on-data.html#tidy-regression-output-with-broom-4",
    "title": "Iterating on Data",
    "section": "Tidy regression output with broom",
    "text": "Tidy regression output with broom\n\nout_conf |&gt;\n    filter(term %nin% \"(Intercept)\") |&gt;\n    mutate(nicelabs = prefix_strip(term, \"continent\")) |&gt;\n    select(nicelabs, everything())\n\n# A tibble: 6 × 8\n  nicelabs  term       estimate std.error statistic   p.value conf.low conf.high\n  &lt;chr&gt;     &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 gdpPercap gdpPercap   4.50e-4   2.35e-5     19.2  3.24e- 74  4.03e-4   4.96e-4\n2 Pop       pop         6.57e-9   1.98e-9      3.33 9.01e-  4  2.70e-9   1.04e-8\n3 Americas  continent…  1.35e+1   6.00e-1     22.5  5.19e- 98  1.23e+1   1.47e+1\n4 Asia      continent…  8.19e+0   5.71e-1     14.3  4.06e- 44  7.07e+0   9.31e+0\n5 Europe    continent…  1.75e+1   6.25e-1     28.0  6.34e-142  1.62e+1   1.87e+1\n6 Oceania   continent…  1.81e+1   1.78e+0     10.1  1.59e- 23  1.46e+1   2.16e+1"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#grouped-analysis-and-list-columns",
    "href": "slides/07-iterating-on-data.html#grouped-analysis-and-list-columns",
    "title": "Iterating on Data",
    "section": "Grouped analysis and list columns",
    "text": "Grouped analysis and list columns\n\neu77 &lt;- gapminder |&gt; filter(continent == \"Europe\", year == 1977)\nfit &lt;- lm(lifeExp ~ log(gdpPercap), data = eu77)\n\n\nsummary(fit)\n\n\nCall:\nlm(formula = lifeExp ~ log(gdpPercap), data = eu77)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-7.4956 -1.0306  0.0935  1.1755  3.7125 \n\nCoefficients:\n               Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      29.489      7.161   4.118 0.000306 ***\nlog(gdpPercap)    4.488      0.756   5.936 2.17e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.114 on 28 degrees of freedom\nMultiple R-squared:  0.5572,    Adjusted R-squared:  0.5414 \nF-statistic: 35.24 on 1 and 28 DF,  p-value: 2.173e-06"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#grouped-analysis-and-list-columns-1",
    "href": "slides/07-iterating-on-data.html#grouped-analysis-and-list-columns-1",
    "title": "Iterating on Data",
    "section": "Grouped analysis and list columns",
    "text": "Grouped analysis and list columns\n\nout_le &lt;- gapminder |&gt;\n    group_by(continent, year) |&gt;\n    nest()\n\nout_le\n\n# A tibble: 60 × 3\n# Groups:   continent, year [60]\n   continent  year data             \n   &lt;fct&gt;     &lt;int&gt; &lt;list&gt;           \n 1 Asia       1952 &lt;tibble [33 × 4]&gt;\n 2 Asia       1957 &lt;tibble [33 × 4]&gt;\n 3 Asia       1962 &lt;tibble [33 × 4]&gt;\n 4 Asia       1967 &lt;tibble [33 × 4]&gt;\n 5 Asia       1972 &lt;tibble [33 × 4]&gt;\n 6 Asia       1977 &lt;tibble [33 × 4]&gt;\n 7 Asia       1982 &lt;tibble [33 × 4]&gt;\n 8 Asia       1987 &lt;tibble [33 × 4]&gt;\n 9 Asia       1992 &lt;tibble [33 × 4]&gt;\n10 Asia       1997 &lt;tibble [33 × 4]&gt;\n# ℹ 50 more rows\n\n\nThink of nesting as a kind of “super-grouping”. Look in the object inspector."
  },
  {
    "objectID": "slides/07-iterating-on-data.html#grouped-analysis-and-list-columns-2",
    "href": "slides/07-iterating-on-data.html#grouped-analysis-and-list-columns-2",
    "title": "Iterating on Data",
    "section": "Grouped analysis and list columns",
    "text": "Grouped analysis and list columns\nIt’s still in there.\n\nout_le |&gt; filter(continent == \"Europe\" & year == 1977) |&gt; \n    unnest(cols = c(data))\n\n# A tibble: 30 × 6\n# Groups:   continent, year [1]\n   continent  year country                lifeExp      pop gdpPercap\n   &lt;fct&gt;     &lt;int&gt; &lt;fct&gt;                    &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Europe     1977 Albania                   68.9  2509048     3533.\n 2 Europe     1977 Austria                   72.2  7568430    19749.\n 3 Europe     1977 Belgium                   72.8  9821800    19118.\n 4 Europe     1977 Bosnia and Herzegovina    69.9  4086000     3528.\n 5 Europe     1977 Bulgaria                  70.8  8797022     7612.\n 6 Europe     1977 Croatia                   70.6  4318673    11305.\n 7 Europe     1977 Czech Republic            70.7 10161915    14800.\n 8 Europe     1977 Denmark                   74.7  5088419    20423.\n 9 Europe     1977 Finland                   72.5  4738902    15605.\n10 Europe     1977 France                    73.8 53165019    18293.\n# ℹ 20 more rows"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#grouped-analysis-and-list-columns-3",
    "href": "slides/07-iterating-on-data.html#grouped-analysis-and-list-columns-3",
    "title": "Iterating on Data",
    "section": "Grouped analysis and list columns",
    "text": "Grouped analysis and list columns\nHere we map() a custom function to every row in the data column.\n\nfit_ols &lt;- function(df) {\n    lm(lifeExp ~ log(gdpPercap), data = df)\n}\n\nout_le &lt;- gapminder |&gt;\n    group_by(continent, year) |&gt;\n    nest() |&gt; \n    mutate(model = map(data, fit_ols))"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#grouped-analysis-and-list-columns-4",
    "href": "slides/07-iterating-on-data.html#grouped-analysis-and-list-columns-4",
    "title": "Iterating on Data",
    "section": "Grouped analysis and list columns",
    "text": "Grouped analysis and list columns\n\nout_le\n\n# A tibble: 60 × 4\n# Groups:   continent, year [60]\n   continent  year data              model \n   &lt;fct&gt;     &lt;int&gt; &lt;list&gt;            &lt;list&gt;\n 1 Asia       1952 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n 2 Asia       1957 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n 3 Asia       1962 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n 4 Asia       1967 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n 5 Asia       1972 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n 6 Asia       1977 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n 7 Asia       1982 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n 8 Asia       1987 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n 9 Asia       1992 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n10 Asia       1997 &lt;tibble [33 × 4]&gt; &lt;lm&gt;  \n# ℹ 50 more rows"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#grouped-analysis-and-list-columns-5",
    "href": "slides/07-iterating-on-data.html#grouped-analysis-and-list-columns-5",
    "title": "Iterating on Data",
    "section": "Grouped analysis and list columns",
    "text": "Grouped analysis and list columns\nWe can tidy the nested models, too.\n\nfit_ols &lt;- function(df) {\n    lm(lifeExp ~ log(gdpPercap), data = df)\n}\n\nout_tidy &lt;- gapminder |&gt;\n    group_by(continent, year) |&gt;\n    nest() |&gt; \n    mutate(model = map(data, fit_ols),\n           tidied = map(model, tidy)) |&gt;\n    unnest(cols = c(tidied)) |&gt;\n    filter(term %nin% \"(Intercept)\" &\n           continent %nin% \"Oceania\")"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#grouped-analysis-and-list-columns-6",
    "href": "slides/07-iterating-on-data.html#grouped-analysis-and-list-columns-6",
    "title": "Iterating on Data",
    "section": "Grouped analysis and list columns",
    "text": "Grouped analysis and list columns\n\nout_tidy\n\n# A tibble: 48 × 9\n# Groups:   continent, year [48]\n   continent  year data     model  term     estimate std.error statistic p.value\n   &lt;fct&gt;     &lt;int&gt; &lt;list&gt;   &lt;list&gt; &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n 1 Asia       1952 &lt;tibble&gt; &lt;lm&gt;   log(gdp…     4.16     1.25       3.33 2.28e-3\n 2 Asia       1957 &lt;tibble&gt; &lt;lm&gt;   log(gdp…     4.17     1.28       3.26 2.71e-3\n 3 Asia       1962 &lt;tibble&gt; &lt;lm&gt;   log(gdp…     4.59     1.24       3.72 7.94e-4\n 4 Asia       1967 &lt;tibble&gt; &lt;lm&gt;   log(gdp…     4.50     1.15       3.90 4.77e-4\n 5 Asia       1972 &lt;tibble&gt; &lt;lm&gt;   log(gdp…     4.44     1.01       4.41 1.16e-4\n 6 Asia       1977 &lt;tibble&gt; &lt;lm&gt;   log(gdp…     4.87     1.03       4.75 4.42e-5\n 7 Asia       1982 &lt;tibble&gt; &lt;lm&gt;   log(gdp…     4.78     0.852      5.61 3.77e-6\n 8 Asia       1987 &lt;tibble&gt; &lt;lm&gt;   log(gdp…     5.17     0.727      7.12 5.31e-8\n 9 Asia       1992 &lt;tibble&gt; &lt;lm&gt;   log(gdp…     5.09     0.649      7.84 7.60e-9\n10 Asia       1997 &lt;tibble&gt; &lt;lm&gt;   log(gdp…     5.11     0.628      8.15 3.35e-9\n# ℹ 38 more rows"
  },
  {
    "objectID": "slides/07-iterating-on-data.html#grouped-analysis-and-list-columns-7",
    "href": "slides/07-iterating-on-data.html#grouped-analysis-and-list-columns-7",
    "title": "Iterating on Data",
    "section": "Grouped analysis and list columns",
    "text": "Grouped analysis and list columns\n\nout_tidy |&gt; \n    ungroup() |&gt;\n    sample_n(5)\n\n# A tibble: 5 × 9\n  continent  year data     model  term      estimate std.error statistic p.value\n  &lt;fct&gt;     &lt;int&gt; &lt;list&gt;   &lt;list&gt; &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 Africa     1957 &lt;tibble&gt; &lt;lm&gt;   log(gdpP…     2.69     1.06       2.55 1.40e-2\n2 Europe     2002 &lt;tibble&gt; &lt;lm&gt;   log(gdpP…     3.74     0.445      8.40 3.91e-9\n3 Europe     1982 &lt;tibble&gt; &lt;lm&gt;   log(gdpP…     4.37     0.791      5.52 6.63e-6\n4 Americas   2007 &lt;tibble&gt; &lt;lm&gt;   log(gdpP…     4.49     0.752      5.98 4.26e-6\n5 Europe     1992 &lt;tibble&gt; &lt;lm&gt;   log(gdpP…     3.48     0.545      6.39 6.44e-7"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#load-our-libraries",
    "href": "slides/03b-dplyr-basics.html#load-our-libraries",
    "title": "Manipulating tables with dplyr",
    "section": "Load our libraries",
    "text": "Load our libraries\n\nlibrary(here)      # manage file paths\nlibrary(socviz)    # data and some useful functions\nlibrary(tidyverse) # your friend and mine"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#dplyrs-window-functions",
    "href": "slides/03b-dplyr-basics.html#dplyrs-window-functions",
    "title": "Manipulating tables with dplyr",
    "section": "dplyr’s window functions",
    "text": "dplyr’s window functions\nRanking and cumulation within groups.\n\n## Data on COVID-19\nlibrary(covdata)\n\ncovnat_weekly \n\n# A tibble: 4,966 × 11\n   date       year_week cname   iso3      pop cases deaths cu_cases cu_deaths\n   &lt;date&gt;     &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 2019-12-30 2020-01   Austria AUT   8932664    NA     NA       NA        NA\n 2 2020-01-06 2020-02   Austria AUT   8932664    NA     NA       NA        NA\n 3 2020-01-13 2020-03   Austria AUT   8932664    NA     NA       NA        NA\n 4 2020-01-20 2020-04   Austria AUT   8932664    NA     NA       NA        NA\n 5 2020-01-27 2020-05   Austria AUT   8932664    NA     NA       NA        NA\n 6 2020-02-03 2020-06   Austria AUT   8932664    NA     NA       NA        NA\n 7 2020-02-10 2020-07   Austria AUT   8932664    NA     NA       NA        NA\n 8 2020-02-17 2020-08   Austria AUT   8932664    NA     NA       NA        NA\n 9 2020-02-24 2020-09   Austria AUT   8932664    12      0       12         0\n10 2020-03-02 2020-10   Austria AUT   8932664   115      0      127         0\n# ℹ 4,956 more rows\n# ℹ 2 more variables: r14_cases &lt;dbl&gt;, r14_deaths &lt;dbl&gt;"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#dplyrs-window-functions-1",
    "href": "slides/03b-dplyr-basics.html#dplyrs-window-functions-1",
    "title": "Manipulating tables with dplyr",
    "section": "dplyr’s window functions",
    "text": "dplyr’s window functions\ncumsum() gives cumulative sums\n\ncovnat_weekly |&gt; \n  filter(iso3 == \"FRA\") |&gt; \n  select(date, cname, iso3, cases) |&gt; \n  mutate(cases = ifelse(is.na(cases), 0, cases), # convert NA vals in `cases` to 0\n         cumulative = cumsum(cases)) \n\n# A tibble: 159 × 5\n   date       cname  iso3  cases cumulative\n   &lt;date&gt;     &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt;      &lt;dbl&gt;\n 1 2019-12-30 France FRA       0          0\n 2 2020-01-06 France FRA       0          0\n 3 2020-01-13 France FRA       0          0\n 4 2020-01-20 France FRA       3          3\n 5 2020-01-27 France FRA       3          6\n 6 2020-02-03 France FRA       6         12\n 7 2020-02-10 France FRA       0         12\n 8 2020-02-17 France FRA       4         16\n 9 2020-02-24 France FRA     133        149\n10 2020-03-02 France FRA     981       1130\n# ℹ 149 more rows"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#dplyrs-window-functions-2",
    "href": "slides/03b-dplyr-basics.html#dplyrs-window-functions-2",
    "title": "Manipulating tables with dplyr",
    "section": "dplyr’s window functions",
    "text": "dplyr’s window functions\ncume_dist() gives the proportion of values &lt;= to the current value.\n\ncovnat_weekly |&gt; \n  select(date, cname, iso3, deaths) |&gt; \n  filter(iso3 == \"FRA\") |&gt; \n  filter(cume_dist(desc(deaths)) &lt; 0.1) # i.e. Top 10%\n\n# A tibble: 15 × 4\n   date       cname  iso3  deaths\n   &lt;date&gt;     &lt;chr&gt;  &lt;chr&gt;  &lt;dbl&gt;\n 1 2020-04-06 France FRA     3348\n 2 2020-10-26 France FRA     3517\n 3 2020-11-02 France FRA     5281\n 4 2020-11-09 France FRA     6018\n 5 2020-11-16 France FRA     6208\n 6 2020-11-23 France FRA     5215\n 7 2020-11-30 France FRA     4450\n 8 2020-12-07 France FRA     4257\n 9 2020-12-14 France FRA     3786\n10 2020-12-21 France FRA     3560\n11 2021-01-04 France FRA     3851\n12 2021-01-11 France FRA     3833\n13 2021-01-18 France FRA     3754\n14 2021-01-25 France FRA     3535\n15 2021-02-01 France FRA     3431\n\n\n\n\nThe dplyr vignette on Window functions is good."
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#an-application",
    "href": "slides/03b-dplyr-basics.html#an-application",
    "title": "Manipulating tables with dplyr",
    "section": "An application",
    "text": "An application\n\ncovus |&gt; \n  filter(measure == \"death\") |&gt; \n  group_by(state) |&gt; \n  arrange(state, desc(date)) |&gt; \n  filter(state %in% \"NY\")\n\n# A tibble: 371 × 7\n# Groups:   state [1]\n   date       state fips  data_quality_grade measure count measure_label\n   &lt;date&gt;     &lt;chr&gt; &lt;chr&gt; &lt;lgl&gt;              &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;        \n 1 2021-03-07 NY    36    NA                 death   39029 Deaths       \n 2 2021-03-06 NY    36    NA                 death   38970 Deaths       \n 3 2021-03-05 NY    36    NA                 death   38891 Deaths       \n 4 2021-03-04 NY    36    NA                 death   38796 Deaths       \n 5 2021-03-03 NY    36    NA                 death   38735 Deaths       \n 6 2021-03-02 NY    36    NA                 death   38660 Deaths       \n 7 2021-03-01 NY    36    NA                 death   38577 Deaths       \n 8 2021-02-28 NY    36    NA                 death   38497 Deaths       \n 9 2021-02-27 NY    36    NA                 death   38407 Deaths       \n10 2021-02-26 NY    36    NA                 death   38321 Deaths       \n# ℹ 361 more rows\n\n\nHere the count measure is cumulative deaths. What if we want to recover the daily count for all the states in the data?"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#an-application-1",
    "href": "slides/03b-dplyr-basics.html#an-application-1",
    "title": "Manipulating tables with dplyr",
    "section": "An application",
    "text": "An application\ndplyr has lead() and lag() functions. These allow you to access the previous and next values in a vector. You can calculate offsets this way.\n\nmy_vec &lt;- c(1:20)\nmy_vec\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\n\nlag(my_vec) # first element has no lag\n\n [1] NA  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19\n\nmy_vec - lag(my_vec)\n\n [1] NA  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#an-application-2",
    "href": "slides/03b-dplyr-basics.html#an-application-2",
    "title": "Manipulating tables with dplyr",
    "section": "An application",
    "text": "An application\nWe can write the expression directly:\n\ncovus |&gt;\n  select(-data_quality_grade) |&gt; \n  filter(measure == \"death\") |&gt;\n  group_by(state) |&gt;\n  arrange(date) |&gt; \n  mutate(deaths_daily = count - lag(count, order_by = date)) |&gt; \n  arrange(state, desc(date)) |&gt; \n  filter(state %in% \"NY\")\n\n# A tibble: 371 × 7\n# Groups:   state [1]\n   date       state fips  measure count measure_label deaths_daily\n   &lt;date&gt;     &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;                &lt;dbl&gt;\n 1 2021-03-07 NY    36    death   39029 Deaths                  59\n 2 2021-03-06 NY    36    death   38970 Deaths                  79\n 3 2021-03-05 NY    36    death   38891 Deaths                  95\n 4 2021-03-04 NY    36    death   38796 Deaths                  61\n 5 2021-03-03 NY    36    death   38735 Deaths                  75\n 6 2021-03-02 NY    36    death   38660 Deaths                  83\n 7 2021-03-01 NY    36    death   38577 Deaths                  80\n 8 2021-02-28 NY    36    death   38497 Deaths                  90\n 9 2021-02-27 NY    36    death   38407 Deaths                  86\n10 2021-02-26 NY    36    death   38321 Deaths                  94\n# ℹ 361 more rows"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#writing-our-own-functions",
    "href": "slides/03b-dplyr-basics.html#writing-our-own-functions",
    "title": "Manipulating tables with dplyr",
    "section": "Writing our own functions",
    "text": "Writing our own functions\nWe write functions using the special function() function.*\n\nmy_fun &lt;- function(x) {\n  x + 1\n}\n\nmy_fun # we've created the function; it's just an object\n\nfunction(x) {\n  x + 1\n}\n\nmy_fun(x = 1) # But we can supply it with an input!\n\n[1] 2\n\nmy_fun(10)\n\n[1] 11\n\n\n\n\n*Nerds love this sort of stuff."
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#writing-our-own-functions-1",
    "href": "slides/03b-dplyr-basics.html#writing-our-own-functions-1",
    "title": "Manipulating tables with dplyr",
    "section": "Writing our own functions",
    "text": "Writing our own functions\nWe write our function. It’s just the expression we originally wrote, wrapped up.\n\nget_daily_count &lt;- function(count, date){\n  count - lag(count, order_by = date)\n}\n\nThis function has no generality, error-handling, or anything else. It’s a once-off."
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#writing-our-own-functions-2",
    "href": "slides/03b-dplyr-basics.html#writing-our-own-functions-2",
    "title": "Manipulating tables with dplyr",
    "section": "Writing our own functions",
    "text": "Writing our own functions\nNow we can use it like any other:\n\ncovus |&gt;\n  filter(measure == \"death\") |&gt;\n  select(-data_quality_grade) |&gt; \n  group_by(state) |&gt;\n  arrange(date) |&gt; \n  mutate(deaths_daily = get_daily_count(count, date)) |&gt; \n  arrange(state, desc(date)) |&gt; \n  filter(state %in% \"NY\")\n\n# A tibble: 371 × 7\n# Groups:   state [1]\n   date       state fips  measure count measure_label deaths_daily\n   &lt;date&gt;     &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;                &lt;dbl&gt;\n 1 2021-03-07 NY    36    death   39029 Deaths                  59\n 2 2021-03-06 NY    36    death   38970 Deaths                  79\n 3 2021-03-05 NY    36    death   38891 Deaths                  95\n 4 2021-03-04 NY    36    death   38796 Deaths                  61\n 5 2021-03-03 NY    36    death   38735 Deaths                  75\n 6 2021-03-02 NY    36    death   38660 Deaths                  83\n 7 2021-03-01 NY    36    death   38577 Deaths                  80\n 8 2021-02-28 NY    36    death   38497 Deaths                  90\n 9 2021-02-27 NY    36    death   38407 Deaths                  86\n10 2021-02-26 NY    36    death   38321 Deaths                  94\n# ℹ 361 more rows\n\n\nNot super-useful quite yet, but if our task had more steps …"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#tidy-moving-averages-with-slider",
    "href": "slides/03b-dplyr-basics.html#tidy-moving-averages-with-slider",
    "title": "Manipulating tables with dplyr",
    "section": "Tidy moving averages with slider",
    "text": "Tidy moving averages with slider\ndplyr’s window functions don’t include moving averages.\nThere are several options, notably RcppRoll\nWe’ll use the slider package.\n\n# install.packages(\"slider\")\nlibrary(slider)"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#tidy-moving-averages-with-slider-1",
    "href": "slides/03b-dplyr-basics.html#tidy-moving-averages-with-slider-1",
    "title": "Manipulating tables with dplyr",
    "section": "Tidy moving averages with slider",
    "text": "Tidy moving averages with slider\n\ncovus |&gt;\n  filter(measure == \"death\") |&gt;\n  select(-data_quality_grade) |&gt; \n  group_by(state) |&gt;\n  arrange(date) |&gt; \n  mutate(\n    deaths_daily = get_daily_count(count, date), \n    deaths7 = slide_mean(deaths_daily, \n                         before = 7, \n                         na_rm = TRUE)) |&gt; \n  arrange(state, desc(date)) |&gt; \n  filter(state %in% \"NY\")\n\n# A tibble: 371 × 8\n# Groups:   state [1]\n   date       state fips  measure count measure_label deaths_daily deaths7\n   &lt;date&gt;     &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;                &lt;dbl&gt;   &lt;dbl&gt;\n 1 2021-03-07 NY    36    death   39029 Deaths                  59    77.8\n 2 2021-03-06 NY    36    death   38970 Deaths                  79    81.1\n 3 2021-03-05 NY    36    death   38891 Deaths                  95    83  \n 4 2021-03-04 NY    36    death   38796 Deaths                  61    82.6\n 5 2021-03-03 NY    36    death   38735 Deaths                  75    88  \n 6 2021-03-02 NY    36    death   38660 Deaths                  83    89.9\n 7 2021-03-01 NY    36    death   38577 Deaths                  80    90.8\n 8 2021-02-28 NY    36    death   38497 Deaths                  90    90.1\n 9 2021-02-27 NY    36    death   38407 Deaths                  86    91.5\n10 2021-02-26 NY    36    death   38321 Deaths                  94    95.6\n# ℹ 361 more rows"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#tidy-moving-averages-with-slider-2",
    "href": "slides/03b-dplyr-basics.html#tidy-moving-averages-with-slider-2",
    "title": "Manipulating tables with dplyr",
    "section": "Tidy moving averages with slider",
    "text": "Tidy moving averages with slider\n    deaths7 = slide_mean(deaths_daily, \n                         before = 7, \n                         na_rm = TRUE)) |&gt; \nNotice the Tidyverse-style na_rm argument rather than the usual base na.rm\nThe package provides a lot of different functions, from general-purpose slide_max(), slide_min() to more specialized sliding functions. In particular note e.g. slide_index_mean() that addresses some subtleties in averaging over dates with gaps."
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#move-columns-with-relocate",
    "href": "slides/03b-dplyr-basics.html#move-columns-with-relocate",
    "title": "Manipulating tables with dplyr",
    "section": "Move columns with relocate()",
    "text": "Move columns with relocate()\n\ngss_sm\n\n# A tibble: 2,867 × 32\n    year    id ballot       age childs sibs   degree race  sex   region income16\n   &lt;dbl&gt; &lt;dbl&gt; &lt;labelled&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;labe&gt; &lt;fct&gt;  &lt;fct&gt; &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;   \n 1  2016     1 1             47      3 2      Bache… White Male  New E… $170000…\n 2  2016     2 2             61      0 3      High … White Male  New E… $50000 …\n 3  2016     3 3             72      2 3      Bache… White Male  New E… $75000 …\n 4  2016     4 1             43      4 3      High … White Fema… New E… $170000…\n 5  2016     5 3             55      2 2      Gradu… White Fema… New E… $170000…\n 6  2016     6 2             53      2 2      Junio… White Fema… New E… $60000 …\n 7  2016     7 1             50      2 2      High … White Male  New E… $170000…\n 8  2016     8 3             23      3 6      High … Other Fema… Middl… $30000 …\n 9  2016     9 1             45      3 5      High … Black Male  Middl… $60000 …\n10  2016    10 3             71      4 1      Junio… White Male  Middl… $60000 …\n# ℹ 2,857 more rows\n# ℹ 21 more variables: relig &lt;fct&gt;, marital &lt;fct&gt;, padeg &lt;fct&gt;, madeg &lt;fct&gt;,\n#   partyid &lt;fct&gt;, polviews &lt;fct&gt;, happy &lt;fct&gt;, partners &lt;fct&gt;, grass &lt;fct&gt;,\n#   zodiac &lt;fct&gt;, pres12 &lt;labelled&gt;, wtssall &lt;dbl&gt;, income_rc &lt;fct&gt;,\n#   agegrp &lt;fct&gt;, ageq &lt;fct&gt;, siblings &lt;fct&gt;, kids &lt;fct&gt;, religion &lt;fct&gt;,\n#   bigregion &lt;fct&gt;, partners_rc &lt;fct&gt;, obama &lt;dbl&gt;"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#shuffle-columns-around",
    "href": "slides/03b-dplyr-basics.html#shuffle-columns-around",
    "title": "Manipulating tables with dplyr",
    "section": "Shuffle columns around",
    "text": "Shuffle columns around\n\n\n\ngss_sm\n\n\n\n\n# A tibble: 2,867 × 32\n    year    id ballot       age childs sibs   degree race  sex   region income16\n   &lt;dbl&gt; &lt;dbl&gt; &lt;labelled&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;labe&gt; &lt;fct&gt;  &lt;fct&gt; &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;   \n 1  2016     1 1             47      3 2      Bache… White Male  New E… $170000…\n 2  2016     2 2             61      0 3      High … White Male  New E… $50000 …\n 3  2016     3 3             72      2 3      Bache… White Male  New E… $75000 …\n 4  2016     4 1             43      4 3      High … White Fema… New E… $170000…\n 5  2016     5 3             55      2 2      Gradu… White Fema… New E… $170000…\n 6  2016     6 2             53      2 2      Junio… White Fema… New E… $60000 …\n 7  2016     7 1             50      2 2      High … White Male  New E… $170000…\n 8  2016     8 3             23      3 6      High … Other Fema… Middl… $30000 …\n 9  2016     9 1             45      3 5      High … Black Male  Middl… $60000 …\n10  2016    10 3             71      4 1      Junio… White Male  Middl… $60000 …\n# ℹ 2,857 more rows\n# ℹ 21 more variables: relig &lt;fct&gt;, marital &lt;fct&gt;, padeg &lt;fct&gt;, madeg &lt;fct&gt;,\n#   partyid &lt;fct&gt;, polviews &lt;fct&gt;, happy &lt;fct&gt;, partners &lt;fct&gt;, grass &lt;fct&gt;,\n#   zodiac &lt;fct&gt;, pres12 &lt;labelled&gt;, wtssall &lt;dbl&gt;, income_rc &lt;fct&gt;,\n#   agegrp &lt;fct&gt;, ageq &lt;fct&gt;, siblings &lt;fct&gt;, kids &lt;fct&gt;, religion &lt;fct&gt;,\n#   bigregion &lt;fct&gt;, partners_rc &lt;fct&gt;, obama &lt;dbl&gt;"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#shuffle-columns-around-1",
    "href": "slides/03b-dplyr-basics.html#shuffle-columns-around-1",
    "title": "Manipulating tables with dplyr",
    "section": "Shuffle columns around",
    "text": "Shuffle columns around\n\n\n\ngss_sm |&gt;\n  select(region, bigregion, year,\n         id:region,\n         starts_with(\"p\"),\n         contains(\"income\"))\n\n\n\n\n# A tibble: 2,867 × 19\n   region     bigregion  year    id ballot   age childs sibs  degree race  sex  \n   &lt;fct&gt;      &lt;fct&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;labe&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;lab&gt; &lt;fct&gt;  &lt;fct&gt; &lt;fct&gt;\n 1 New Engla… Northeast  2016     1 1         47      3 2     Bache… White Male \n 2 New Engla… Northeast  2016     2 2         61      0 3     High … White Male \n 3 New Engla… Northeast  2016     3 3         72      2 3     Bache… White Male \n 4 New Engla… Northeast  2016     4 1         43      4 3     High … White Fema…\n 5 New Engla… Northeast  2016     5 3         55      2 2     Gradu… White Fema…\n 6 New Engla… Northeast  2016     6 2         53      2 2     Junio… White Fema…\n 7 New Engla… Northeast  2016     7 1         50      2 2     High … White Male \n 8 Middle At… Northeast  2016     8 3         23      3 6     High … Other Fema…\n 9 Middle At… Northeast  2016     9 1         45      3 5     High … Black Male \n10 Middle At… Northeast  2016    10 3         71      4 1     Junio… White Male \n# ℹ 2,857 more rows\n# ℹ 8 more variables: padeg &lt;fct&gt;, partyid &lt;fct&gt;, polviews &lt;fct&gt;,\n#   partners &lt;fct&gt;, pres12 &lt;labelled&gt;, partners_rc &lt;fct&gt;, income16 &lt;fct&gt;,\n#   income_rc &lt;fct&gt;"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#shuffle-columns-around-2",
    "href": "slides/03b-dplyr-basics.html#shuffle-columns-around-2",
    "title": "Manipulating tables with dplyr",
    "section": "Shuffle columns around",
    "text": "Shuffle columns around\n\n\n\ngss_sm |&gt;\n  select(region, bigregion, year,\n         id:region,\n         starts_with(\"p\"),\n         contains(\"income\")) |&gt;\n  rename(children = childs,\n         siblings = sibs)\n\n\n\n\n# A tibble: 2,867 × 19\n   region      bigregion  year    id ballot   age children siblings degree race \n   &lt;fct&gt;       &lt;fct&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;labe&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;labell&gt; &lt;fct&gt;  &lt;fct&gt;\n 1 New England Northeast  2016     1 1         47        3 2        Bache… White\n 2 New England Northeast  2016     2 2         61        0 3        High … White\n 3 New England Northeast  2016     3 3         72        2 3        Bache… White\n 4 New England Northeast  2016     4 1         43        4 3        High … White\n 5 New England Northeast  2016     5 3         55        2 2        Gradu… White\n 6 New England Northeast  2016     6 2         53        2 2        Junio… White\n 7 New England Northeast  2016     7 1         50        2 2        High … White\n 8 Middle Atl… Northeast  2016     8 3         23        3 6        High … Other\n 9 Middle Atl… Northeast  2016     9 1         45        3 5        High … Black\n10 Middle Atl… Northeast  2016    10 3         71        4 1        Junio… White\n# ℹ 2,857 more rows\n# ℹ 9 more variables: sex &lt;fct&gt;, padeg &lt;fct&gt;, partyid &lt;fct&gt;, polviews &lt;fct&gt;,\n#   partners &lt;fct&gt;, pres12 &lt;labelled&gt;, partners_rc &lt;fct&gt;, income16 &lt;fct&gt;,\n#   income_rc &lt;fct&gt;"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#shuffle-columns-around-3",
    "href": "slides/03b-dplyr-basics.html#shuffle-columns-around-3",
    "title": "Manipulating tables with dplyr",
    "section": "Shuffle columns around",
    "text": "Shuffle columns around\n\n\n\ngss_sm |&gt;\n  select(region, bigregion, year,\n         id:region,\n         starts_with(\"p\"),\n         contains(\"income\")) |&gt;\n  rename(children = childs,\n         siblings = sibs) |&gt;\n  relocate(id)\n\n\n\n\n# A tibble: 2,867 × 19\n      id region      bigregion  year ballot   age children siblings degree race \n   &lt;dbl&gt; &lt;fct&gt;       &lt;fct&gt;     &lt;dbl&gt; &lt;labe&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;labell&gt; &lt;fct&gt;  &lt;fct&gt;\n 1     1 New England Northeast  2016 1         47        3 2        Bache… White\n 2     2 New England Northeast  2016 2         61        0 3        High … White\n 3     3 New England Northeast  2016 3         72        2 3        Bache… White\n 4     4 New England Northeast  2016 1         43        4 3        High … White\n 5     5 New England Northeast  2016 3         55        2 2        Gradu… White\n 6     6 New England Northeast  2016 2         53        2 2        Junio… White\n 7     7 New England Northeast  2016 1         50        2 2        High … White\n 8     8 Middle Atl… Northeast  2016 3         23        3 6        High … Other\n 9     9 Middle Atl… Northeast  2016 1         45        3 5        High … Black\n10    10 Middle Atl… Northeast  2016 3         71        4 1        Junio… White\n# ℹ 2,857 more rows\n# ℹ 9 more variables: sex &lt;fct&gt;, padeg &lt;fct&gt;, partyid &lt;fct&gt;, polviews &lt;fct&gt;,\n#   partners &lt;fct&gt;, pres12 &lt;labelled&gt;, partners_rc &lt;fct&gt;, income16 &lt;fct&gt;,\n#   income_rc &lt;fct&gt;"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#shuffle-columns-around-4",
    "href": "slides/03b-dplyr-basics.html#shuffle-columns-around-4",
    "title": "Manipulating tables with dplyr",
    "section": "Shuffle columns around",
    "text": "Shuffle columns around\n\n\n\ngss_sm |&gt;\n  select(region, bigregion, year,\n         id:region,\n         starts_with(\"p\"),\n         contains(\"income\")) |&gt;\n  rename(children = childs,\n         siblings = sibs) |&gt;\n  relocate(id) |&gt;\n  select(-ballot)\n\n\n\n\n# A tibble: 2,867 × 18\n      id region bigregion  year   age children siblings degree race  sex   padeg\n   &lt;dbl&gt; &lt;fct&gt;  &lt;fct&gt;     &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;labell&gt; &lt;fct&gt;  &lt;fct&gt; &lt;fct&gt; &lt;fct&gt;\n 1     1 New E… Northeast  2016    47        3 2        Bache… White Male  Grad…\n 2     2 New E… Northeast  2016    61        0 3        High … White Male  Lt H…\n 3     3 New E… Northeast  2016    72        2 3        Bache… White Male  High…\n 4     4 New E… Northeast  2016    43        4 3        High … White Fema… &lt;NA&gt; \n 5     5 New E… Northeast  2016    55        2 2        Gradu… White Fema… Bach…\n 6     6 New E… Northeast  2016    53        2 2        Junio… White Fema… &lt;NA&gt; \n 7     7 New E… Northeast  2016    50        2 2        High … White Male  High…\n 8     8 Middl… Northeast  2016    23        3 6        High … Other Fema… Lt H…\n 9     9 Middl… Northeast  2016    45        3 5        High … Black Male  Lt H…\n10    10 Middl… Northeast  2016    71        4 1        Junio… White Male  High…\n# ℹ 2,857 more rows\n# ℹ 7 more variables: partyid &lt;fct&gt;, polviews &lt;fct&gt;, partners &lt;fct&gt;,\n#   pres12 &lt;labelled&gt;, partners_rc &lt;fct&gt;, income16 &lt;fct&gt;, income_rc &lt;fct&gt;"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#shuffle-columns-around-5",
    "href": "slides/03b-dplyr-basics.html#shuffle-columns-around-5",
    "title": "Manipulating tables with dplyr",
    "section": "Shuffle columns around",
    "text": "Shuffle columns around\n\n\n\ngss_sm |&gt;\n  select(region, bigregion, year,\n         id:region,\n         starts_with(\"p\"),\n         contains(\"income\")) |&gt;\n  rename(children = childs,\n         siblings = sibs) |&gt;\n  relocate(id) |&gt;\n  select(-ballot) |&gt;\n  relocate(where(is.numeric),\n           .before = where(is.factor))\n\n\n\n\n# A tibble: 2,867 × 18\n      id  year   age children siblings   pres12    region bigregion degree race \n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;labelled&gt; &lt;labelle&gt; &lt;fct&gt;  &lt;fct&gt;     &lt;fct&gt;  &lt;fct&gt;\n 1     1  2016    47        3 2           3        New E… Northeast Bache… White\n 2     2  2016    61        0 3           1        New E… Northeast High … White\n 3     3  2016    72        2 3           2        New E… Northeast Bache… White\n 4     4  2016    43        4 3           2        New E… Northeast High … White\n 5     5  2016    55        2 2           1        New E… Northeast Gradu… White\n 6     6  2016    53        2 2           1        New E… Northeast Junio… White\n 7     7  2016    50        2 2          NA        New E… Northeast High … White\n 8     8  2016    23        3 6          NA        Middl… Northeast High … Other\n 9     9  2016    45        3 5          NA        Middl… Northeast High … Black\n10    10  2016    71        4 1           2        Middl… Northeast Junio… White\n# ℹ 2,857 more rows\n# ℹ 8 more variables: sex &lt;fct&gt;, padeg &lt;fct&gt;, partyid &lt;fct&gt;, polviews &lt;fct&gt;,\n#   partners &lt;fct&gt;, partners_rc &lt;fct&gt;, income16 &lt;fct&gt;, income_rc &lt;fct&gt;"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#shuffle-columns-around-6",
    "href": "slides/03b-dplyr-basics.html#shuffle-columns-around-6",
    "title": "Manipulating tables with dplyr",
    "section": "Shuffle columns around",
    "text": "Shuffle columns around\n\n\n\ngss_sm |&gt;\n  select(region, bigregion, year,\n         id:region,\n         starts_with(\"p\"),\n         contains(\"income\")) |&gt;\n  rename(children = childs,\n         siblings = sibs) |&gt;\n  relocate(id) |&gt;\n  select(-ballot) |&gt;\n  relocate(where(is.numeric),\n           .before = where(is.factor)) |&gt;\n  relocate(contains(\"region\"),\n           .after = year)\n\n\n\n\n# A tibble: 2,867 × 18\n      id  year region      bigregion   age children siblings pres12 degree race \n   &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;       &lt;fct&gt;     &lt;dbl&gt;    &lt;dbl&gt; &lt;labell&gt; &lt;labe&gt; &lt;fct&gt;  &lt;fct&gt;\n 1     1  2016 New England Northeast    47        3 2         3     Bache… White\n 2     2  2016 New England Northeast    61        0 3         1     High … White\n 3     3  2016 New England Northeast    72        2 3         2     Bache… White\n 4     4  2016 New England Northeast    43        4 3         2     High … White\n 5     5  2016 New England Northeast    55        2 2         1     Gradu… White\n 6     6  2016 New England Northeast    53        2 2         1     Junio… White\n 7     7  2016 New England Northeast    50        2 2        NA     High … White\n 8     8  2016 Middle Atl… Northeast    23        3 6        NA     High … Other\n 9     9  2016 Middle Atl… Northeast    45        3 5        NA     High … Black\n10    10  2016 Middle Atl… Northeast    71        4 1         2     Junio… White\n# ℹ 2,857 more rows\n# ℹ 8 more variables: sex &lt;fct&gt;, padeg &lt;fct&gt;, partyid &lt;fct&gt;, polviews &lt;fct&gt;,\n#   partners &lt;fct&gt;, partners_rc &lt;fct&gt;, income16 &lt;fct&gt;, income_rc &lt;fct&gt;"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#example-uk-election-data",
    "href": "slides/03b-dplyr-basics.html#example-uk-election-data",
    "title": "Manipulating tables with dplyr",
    "section": "Example: UK Election Data",
    "text": "Example: UK Election Data\n\nlibrary(ukelection2019)\n\nukvote2019\n\n# A tibble: 3,320 × 13\n   cid     constituency electorate party_name candidate votes vote_share_percent\n   &lt;chr&gt;   &lt;chr&gt;             &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;int&gt;              &lt;dbl&gt;\n 1 W07000… Aberavon          50747 Labour     Stephen … 17008               53.8\n 2 W07000… Aberavon          50747 Conservat… Charlott…  6518               20.6\n 3 W07000… Aberavon          50747 The Brexi… Glenda D…  3108                9.8\n 4 W07000… Aberavon          50747 Plaid Cym… Nigel Hu…  2711                8.6\n 5 W07000… Aberavon          50747 Liberal D… Sheila K…  1072                3.4\n 6 W07000… Aberavon          50747 Independe… Captain …   731                2.3\n 7 W07000… Aberavon          50747 Green      Giorgia …   450                1.4\n 8 W07000… Aberconwy         44699 Conservat… Robin Mi… 14687               46.1\n 9 W07000… Aberconwy         44699 Labour     Emily Ow… 12653               39.7\n10 W07000… Aberconwy         44699 Plaid Cym… Lisa Goo…  2704                8.5\n# ℹ 3,310 more rows\n# ℹ 6 more variables: vote_share_change &lt;dbl&gt;, total_votes_cast &lt;int&gt;,\n#   vrank &lt;int&gt;, turnout &lt;dbl&gt;, fname &lt;chr&gt;, lname &lt;chr&gt;"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#example-uk-election-data-1",
    "href": "slides/03b-dplyr-basics.html#example-uk-election-data-1",
    "title": "Manipulating tables with dplyr",
    "section": "Example: UK Election Data",
    "text": "Example: UK Election Data\nUse sample_n() to sample n rows of your tibble.\n\nlibrary(ukelection2019)\n\nukvote2019 |&gt; \n  sample_n(10)\n\n# A tibble: 10 × 13\n   cid     constituency electorate party_name candidate votes vote_share_percent\n   &lt;chr&gt;   &lt;chr&gt;             &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;int&gt;              &lt;dbl&gt;\n 1 E14001… Wythenshawe…      76313 Labour     Mike Kane 23855               53.3\n 2 E14000… Mole Valley       74665 Independe… Robin Ho…   536                0.9\n 3 W07000… Clwyd South       53919 Liberal D… Calum Da…  1496                4.1\n 4 E14000… Kettering         73187 Labour     Clare Pa… 13022               26.4\n 5 E14001… Truro & Fal…      76719 Green      Tom Scott  1714                2.9\n 6 E14000… Knowsley          84060 Green      Paul Woo…  1262                2.3\n 7 W07000… Merthyr Tyd…      56322 Plaid Cym… Mark Eva…  2446                7.6\n 8 E14000… Chelsea & F…      67110 Labour     Matt Ube… 10872               23.2\n 9 E14000… Romsey & So…      68228 Liberal D… Craig Fl… 16990               33.1\n10 E14000… Leigh             77417 The Brexi… James Me…  3161                6.7\n# ℹ 6 more variables: vote_share_change &lt;dbl&gt;, total_votes_cast &lt;int&gt;,\n#   vrank &lt;int&gt;, turnout &lt;dbl&gt;, fname &lt;chr&gt;, lname &lt;chr&gt;"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#example-uk-election-data-2",
    "href": "slides/03b-dplyr-basics.html#example-uk-election-data-2",
    "title": "Manipulating tables with dplyr",
    "section": "Example: UK Election Data",
    "text": "Example: UK Election Data\n\nA vector of unique constituency names\n\n\nukvote2019 |&gt; \n  distinct(constituency)\n\n# A tibble: 650 × 1\n   constituency                   \n   &lt;chr&gt;                          \n 1 Aberavon                       \n 2 Aberconwy                      \n 3 Aberdeen North                 \n 4 Aberdeen South                 \n 5 Aberdeenshire West & Kincardine\n 6 Airdrie & Shotts               \n 7 Aldershot                      \n 8 Aldridge-Brownhills            \n 9 Altrincham & Sale West         \n10 Alyn & Deeside                 \n# ℹ 640 more rows"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#example-uk-election-data-3",
    "href": "slides/03b-dplyr-basics.html#example-uk-election-data-3",
    "title": "Manipulating tables with dplyr",
    "section": "Example: UK Election Data",
    "text": "Example: UK Election Data\n\nTally them up\n\n\nukvote2019 |&gt; \n  distinct(constituency) |&gt; \n  tally()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1   650\n\n\n\n# Base R / non-pipeline version\n\nlength(unique(ukvote2019$constituency))\n\n[1] 650"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#example-uk-election-data-4",
    "href": "slides/03b-dplyr-basics.html#example-uk-election-data-4",
    "title": "Manipulating tables with dplyr",
    "section": "Example: UK Election Data",
    "text": "Example: UK Election Data\nWhich parties fielded the most candidates?\n\nukvote2019 |&gt; \n  count(party_name) |&gt; \n  arrange(desc(n))\n\n# A tibble: 69 × 2\n   party_name                     n\n   &lt;chr&gt;                      &lt;int&gt;\n 1 Conservative                 636\n 2 Labour                       631\n 3 Liberal Democrat             611\n 4 Green                        497\n 5 The Brexit Party             275\n 6 Independent                  224\n 7 Scottish National Party       59\n 8 UKIP                          44\n 9 Plaid Cymru                   36\n10 Christian Peoples Alliance    29\n# ℹ 59 more rows"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#example-uk-election-data-5",
    "href": "slides/03b-dplyr-basics.html#example-uk-election-data-5",
    "title": "Manipulating tables with dplyr",
    "section": "Example: UK Election Data",
    "text": "Example: UK Election Data\n\n\n\nTop 5\n\n\nukvote2019 |&gt; \n  count(party_name) |&gt; \n  slice_max(order_by = n, n = 5)\n\n# A tibble: 5 × 2\n  party_name           n\n  &lt;chr&gt;            &lt;int&gt;\n1 Conservative       636\n2 Labour             631\n3 Liberal Democrat   611\n4 Green              497\n5 The Brexit Party   275"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#example-uk-election-data-6",
    "href": "slides/03b-dplyr-basics.html#example-uk-election-data-6",
    "title": "Manipulating tables with dplyr",
    "section": "Example: UK Election Data",
    "text": "Example: UK Election Data\n\n\n\nTop 5\n\n\nukvote2019 |&gt; \n  count(party_name) |&gt; \n  slice_max(order_by = n, n = 5)\n\n# A tibble: 5 × 2\n  party_name           n\n  &lt;chr&gt;            &lt;int&gt;\n1 Conservative       636\n2 Labour             631\n3 Liberal Democrat   611\n4 Green              497\n5 The Brexit Party   275\n\n\n\n\nBottom 5\n\n\nukvote2019 |&gt; \n  count(party_name) |&gt; \n  slice_min(order_by = n, n = 5)\n\n# A tibble: 25 × 2\n   party_name                              n\n   &lt;chr&gt;                               &lt;int&gt;\n 1 Ashfield Independents                   1\n 2 Best for Luton                          1\n 3 Birkenhead Social Justice Party         1\n 4 British National Party                  1\n 5 Burnley & Padiham Independent Party     1\n 6 Church of the Militant Elvis Party      1\n 7 Citizens Movement Party UK              1\n 8 CumbriaFirst                            1\n 9 Heavy Woollen District Independents     1\n10 Independent Network                     1\n# ℹ 15 more rows"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#example-uk-election-data-7",
    "href": "slides/03b-dplyr-basics.html#example-uk-election-data-7",
    "title": "Manipulating tables with dplyr",
    "section": "Example: UK Election Data",
    "text": "Example: UK Election Data\nHow many constituencies are there?\n\n\n\nukvote2019 |&gt; \n  count(constituency) \n\n# A tibble: 650 × 2\n   constituency                        n\n   &lt;chr&gt;                           &lt;int&gt;\n 1 Aberavon                            7\n 2 Aberconwy                           4\n 3 Aberdeen North                      6\n 4 Aberdeen South                      4\n 5 Aberdeenshire West & Kincardine     4\n 6 Airdrie & Shotts                    5\n 7 Aldershot                           4\n 8 Aldridge-Brownhills                 5\n 9 Altrincham & Sale West              6\n10 Alyn & Deeside                      5\n# ℹ 640 more rows\n\n\n\n\nukvote2019 |&gt; \n  distinct(constituency) |&gt; \n  count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1   650\n\n\n\n# Base R style ...\nlength(unique(ukvote2019$constituency))\n\n[1] 650"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#counting-twice-over",
    "href": "slides/03b-dplyr-basics.html#counting-twice-over",
    "title": "Manipulating tables with dplyr",
    "section": "Counting Twice Over",
    "text": "Counting Twice Over\n\nukvote2019 |&gt; \n  count(constituency) |&gt; \n  count(n)\n\n# A tibble: 8 × 2\n      n    nn\n  &lt;int&gt; &lt;int&gt;\n1     3    21\n2     4   194\n3     5   226\n4     6   139\n5     7    49\n6     8    18\n7     9     2\n8    12     1"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#counting-twice-over-1",
    "href": "slides/03b-dplyr-basics.html#counting-twice-over-1",
    "title": "Manipulating tables with dplyr",
    "section": "Counting Twice Over",
    "text": "Counting Twice Over\n\n\n\nukvote2019\n\n\n\n\n# A tibble: 3,320 × 13\n   cid     constituency electorate party_name candidate votes vote_share_percent\n   &lt;chr&gt;   &lt;chr&gt;             &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;int&gt;              &lt;dbl&gt;\n 1 W07000… Aberavon          50747 Labour     Stephen … 17008               53.8\n 2 W07000… Aberavon          50747 Conservat… Charlott…  6518               20.6\n 3 W07000… Aberavon          50747 The Brexi… Glenda D…  3108                9.8\n 4 W07000… Aberavon          50747 Plaid Cym… Nigel Hu…  2711                8.6\n 5 W07000… Aberavon          50747 Liberal D… Sheila K…  1072                3.4\n 6 W07000… Aberavon          50747 Independe… Captain …   731                2.3\n 7 W07000… Aberavon          50747 Green      Giorgia …   450                1.4\n 8 W07000… Aberconwy         44699 Conservat… Robin Mi… 14687               46.1\n 9 W07000… Aberconwy         44699 Labour     Emily Ow… 12653               39.7\n10 W07000… Aberconwy         44699 Plaid Cym… Lisa Goo…  2704                8.5\n# ℹ 3,310 more rows\n# ℹ 6 more variables: vote_share_change &lt;dbl&gt;, total_votes_cast &lt;int&gt;,\n#   vrank &lt;int&gt;, turnout &lt;dbl&gt;, fname &lt;chr&gt;, lname &lt;chr&gt;"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#counting-twice-over-2",
    "href": "slides/03b-dplyr-basics.html#counting-twice-over-2",
    "title": "Manipulating tables with dplyr",
    "section": "Counting Twice Over",
    "text": "Counting Twice Over\n\n\n\nukvote2019 |&gt;\n  count(constituency, name = \"n_cands\")\n\n\n\n\n# A tibble: 650 × 2\n   constituency                    n_cands\n   &lt;chr&gt;                             &lt;int&gt;\n 1 Aberavon                              7\n 2 Aberconwy                             4\n 3 Aberdeen North                        6\n 4 Aberdeen South                        4\n 5 Aberdeenshire West & Kincardine       4\n 6 Airdrie & Shotts                      5\n 7 Aldershot                             4\n 8 Aldridge-Brownhills                   5\n 9 Altrincham & Sale West                6\n10 Alyn & Deeside                        5\n# ℹ 640 more rows"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#counting-twice-over-3",
    "href": "slides/03b-dplyr-basics.html#counting-twice-over-3",
    "title": "Manipulating tables with dplyr",
    "section": "Counting Twice Over",
    "text": "Counting Twice Over\n\n\n\nukvote2019 |&gt;\n  count(constituency, name = \"n_cands\") |&gt;\n  count(n_cands, name = \"n_const\")\n\n\n\n\n# A tibble: 8 × 2\n  n_cands n_const\n    &lt;int&gt;   &lt;int&gt;\n1       3      21\n2       4     194\n3       5     226\n4       6     139\n5       7      49\n6       8      18\n7       9       2\n8      12       1"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#recap-and-looking-ahead-1",
    "href": "slides/03b-dplyr-basics.html#recap-and-looking-ahead-1",
    "title": "Manipulating tables with dplyr",
    "section": "Recap and Looking Ahead",
    "text": "Recap and Looking Ahead\nCoding as gardening\nWorking in RStudio with RMarkdown documents"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#core-dplyr-verbs",
    "href": "slides/03b-dplyr-basics.html#core-dplyr-verbs",
    "title": "Manipulating tables with dplyr",
    "section": "Core dplyr verbs",
    "text": "Core dplyr verbs\n\nSubset your table: filter() rows, select() columns\nLogically group_by() one or more columns\nAdd columns with mutate()\nSummarize (by group, or the whole table) with summarize()"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#expand-your-dplyr-actions",
    "href": "slides/03b-dplyr-basics.html#expand-your-dplyr-actions",
    "title": "Manipulating tables with dplyr",
    "section": "Expand your dplyr actions",
    "text": "Expand your dplyr actions\n\nCount up rows with n(), tally() or count()\nCalculate quantities with sum(), mean(), min(), etc\nSubset rows with logical expressions or slice functions\nConditionally select columns by name directly, with %in% or %nin%, or with tidy selectors like starts_with(), ends_with(), contains()\nConditionally select columns by type with where() and some criterion, e.g. where(is.numeric)\nConditionally select and then act on columns with across(where(&lt;condition&gt;), &lt;action&gt;)"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#expand-your-dplyr-actions-1",
    "href": "slides/03b-dplyr-basics.html#expand-your-dplyr-actions-1",
    "title": "Manipulating tables with dplyr",
    "section": "Expand your dplyr actions",
    "text": "Expand your dplyr actions\n\nTidy up columns with relocate() and rename()\nTidy up rows with arrange()"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#a-dplyr-shortcut-1",
    "href": "slides/03b-dplyr-basics.html#a-dplyr-shortcut-1",
    "title": "Manipulating tables with dplyr",
    "section": "A dplyr shortcut",
    "text": "A dplyr shortcut\nSo far we have been writing, e.g.,\n\ngss_sm |&gt; \n  group_by(bigregion, religion) |&gt; \n  summarize(total = n())\n\n# A tibble: 24 × 3\n# Groups:   bigregion [4]\n   bigregion religion   total\n   &lt;fct&gt;     &lt;fct&gt;      &lt;int&gt;\n 1 Northeast Protestant   158\n 2 Northeast Catholic     162\n 3 Northeast Jewish        27\n 4 Northeast None         112\n 5 Northeast Other         28\n 6 Northeast &lt;NA&gt;           1\n 7 Midwest   Protestant   325\n 8 Midwest   Catholic     172\n 9 Midwest   Jewish         3\n10 Midwest   None         157\n# ℹ 14 more rows"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#a-dplyr-shortcut-2",
    "href": "slides/03b-dplyr-basics.html#a-dplyr-shortcut-2",
    "title": "Manipulating tables with dplyr",
    "section": "A dplyr shortcut",
    "text": "A dplyr shortcut\nOr\n\ngss_sm |&gt; \n  group_by(bigregion, religion) |&gt; \n  tally()\n\n# A tibble: 24 × 3\n# Groups:   bigregion [4]\n   bigregion religion       n\n   &lt;fct&gt;     &lt;fct&gt;      &lt;int&gt;\n 1 Northeast Protestant   158\n 2 Northeast Catholic     162\n 3 Northeast Jewish        27\n 4 Northeast None         112\n 5 Northeast Other         28\n 6 Northeast &lt;NA&gt;           1\n 7 Midwest   Protestant   325\n 8 Midwest   Catholic     172\n 9 Midwest   Jewish         3\n10 Midwest   None         157\n# ℹ 14 more rows"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#a-dplyr-shortcut-3",
    "href": "slides/03b-dplyr-basics.html#a-dplyr-shortcut-3",
    "title": "Manipulating tables with dplyr",
    "section": "A dplyr shortcut",
    "text": "A dplyr shortcut\nOr\n\ngss_sm |&gt; \n  count(bigregion, religion) \n\n# A tibble: 24 × 3\n   bigregion religion       n\n   &lt;fct&gt;     &lt;fct&gt;      &lt;int&gt;\n 1 Northeast Protestant   158\n 2 Northeast Catholic     162\n 3 Northeast Jewish        27\n 4 Northeast None         112\n 5 Northeast Other         28\n 6 Northeast &lt;NA&gt;           1\n 7 Midwest   Protestant   325\n 8 Midwest   Catholic     172\n 9 Midwest   Jewish         3\n10 Midwest   None         157\n# ℹ 14 more rows\n\n\nWith this last one the final result is ungrouped, no matter how many levels of grouping there are going in."
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#a-dplyr-shortcut-4",
    "href": "slides/03b-dplyr-basics.html#a-dplyr-shortcut-4",
    "title": "Manipulating tables with dplyr",
    "section": "A dplyr shortcut",
    "text": "A dplyr shortcut\nBut we can also write this:\n\ngss_sm |&gt; \n  summarize(total = n(), .by = c(bigregion, religion))\n\n# A tibble: 24 × 3\n   bigregion religion   total\n   &lt;fct&gt;     &lt;fct&gt;      &lt;int&gt;\n 1 Northeast None         112\n 2 Northeast Catholic     162\n 3 Northeast Protestant   158\n 4 Northeast Other         28\n 5 Northeast Jewish        27\n 6 West      Jewish        10\n 7 West      None         180\n 8 West      Other         48\n 9 West      Protestant   238\n10 West      Catholic     155\n# ℹ 14 more rows\n\n\n\nBy default the result is an ungrouped tibble, whereas with group_by() … summarize() the result would still be grouped by bigregion at the end. To prevent unexpected results, you can’t use .by on tibble that’s already grouped."
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#data-as-implicitly-first",
    "href": "slides/03b-dplyr-basics.html#data-as-implicitly-first",
    "title": "Manipulating tables with dplyr",
    "section": "Data as implicitly first",
    "text": "Data as implicitly first\nThis code:\n\ngss_sm |&gt; \n  summarize(total = n(), .by = c(bigregion, religion))\n\n# A tibble: 24 × 3\n   bigregion religion   total\n   &lt;fct&gt;     &lt;fct&gt;      &lt;int&gt;\n 1 Northeast None         112\n 2 Northeast Catholic     162\n 3 Northeast Protestant   158\n 4 Northeast Other         28\n 5 Northeast Jewish        27\n 6 West      Jewish        10\n 7 West      None         180\n 8 West      Other         48\n 9 West      Protestant   238\n10 West      Catholic     155\n# ℹ 14 more rows"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#data-as-implicitly-first-1",
    "href": "slides/03b-dplyr-basics.html#data-as-implicitly-first-1",
    "title": "Manipulating tables with dplyr",
    "section": "Data as implicitly first",
    "text": "Data as implicitly first\n… is equivalent to this:\n\nsummarize(gss_sm, total = n(), .by = c(bigregion, religion))\n\n# A tibble: 24 × 3\n   bigregion religion   total\n   &lt;fct&gt;     &lt;fct&gt;      &lt;int&gt;\n 1 Northeast None         112\n 2 Northeast Catholic     162\n 3 Northeast Protestant   158\n 4 Northeast Other         28\n 5 Northeast Jewish        27\n 6 West      Jewish        10\n 7 West      None         180\n 8 West      Other         48\n 9 West      Protestant   238\n10 West      Catholic     155\n# ℹ 14 more rows\n\n\nThis is true of Tidyverse pipelines in general. Let’s look at the help for summarize() to see why."
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#comparisons-filtering-on-proportions",
    "href": "slides/03b-dplyr-basics.html#comparisons-filtering-on-proportions",
    "title": "Manipulating tables with dplyr",
    "section": "Comparisons filtering on proportions",
    "text": "Comparisons filtering on proportions\nLet’s say you are working with proportions …\n\ndf\n\n# A tibble: 4 × 3\n  id    prop1 prop2\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 A      0.1   0.2 \n2 B      0.1   0.21\n3 C      0.11  0.2 \n4 D      0.1   0.1"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#comparisons-filtering-on-proportions-1",
    "href": "slides/03b-dplyr-basics.html#comparisons-filtering-on-proportions-1",
    "title": "Manipulating tables with dplyr",
    "section": "Comparisons filtering on proportions",
    "text": "Comparisons filtering on proportions\nAnd you want to focus on cases where prop1 plus prop2 is greater than 0.3:\n\ndf |&gt; \n  filter(prop1 + prop2 &gt; 0.3)\n\n# A tibble: 3 × 3\n  id    prop1 prop2\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 A      0.1   0.2 \n2 B      0.1   0.21\n3 C      0.11  0.2 \n\n\n\n\nThe row with id A shouldn’t have been included there.\n\nThis is not dplyr’s fault. It’s our floating point friend again."
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#comparisons-filtering-on-proportions-2",
    "href": "slides/03b-dplyr-basics.html#comparisons-filtering-on-proportions-2",
    "title": "Manipulating tables with dplyr",
    "section": "Comparisons filtering on proportions",
    "text": "Comparisons filtering on proportions\n\ndf |&gt; \n  filter(prop1 + prop2 == 0.3)\n\n# A tibble: 0 × 3\n# ℹ 3 variables: id &lt;chr&gt;, prop1 &lt;dbl&gt;, prop2 &lt;dbl&gt;\n\n\nThe row with id A should have been included here!"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#comparisons-filtering-on-proportions-3",
    "href": "slides/03b-dplyr-basics.html#comparisons-filtering-on-proportions-3",
    "title": "Manipulating tables with dplyr",
    "section": "Comparisons filtering on proportions",
    "text": "Comparisons filtering on proportions\nThis won’t give the right behavior either:\n\ndf |&gt; \n  mutate(prop3 = prop1 + prop2) |&gt; \n  filter(prop3 == 0.3)\n\n# A tibble: 0 × 4\n# ℹ 4 variables: id &lt;chr&gt;, prop1 &lt;dbl&gt;, prop2 &lt;dbl&gt;, prop3 &lt;dbl&gt;"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#comparisons-filtering-on-proportions-4",
    "href": "slides/03b-dplyr-basics.html#comparisons-filtering-on-proportions-4",
    "title": "Manipulating tables with dplyr",
    "section": "Comparisons filtering on proportions",
    "text": "Comparisons filtering on proportions\nSo, beware.\n\ndf |&gt; \n  filter(prop1*100 + prop2*100 == 0.3*100)\n\n# A tibble: 1 × 3\n  id    prop1 prop2\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 A       0.1   0.2\n\n\nBetter:\n\ndf |&gt; \n  filter(near(prop1 + prop2, 0.3))\n\n# A tibble: 1 × 3\n  id    prop1 prop2\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 A       0.1   0.2"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#zero-counts-in-dplyr",
    "href": "slides/03b-dplyr-basics.html#zero-counts-in-dplyr",
    "title": "Manipulating tables with dplyr",
    "section": "Zero Counts in dplyr",
    "text": "Zero Counts in dplyr\n\ndf &lt;- read_csv(here(\"data\", \"first_terms.csv\"))\n\ndf\n\n# A tibble: 280 × 4\n     pid start_year party      sex  \n   &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;      &lt;chr&gt;\n 1  3160 2013-01-03 Republican M    \n 2  3161 2013-01-03 Democrat   F    \n 3  3162 2013-01-03 Democrat   M    \n 4  3163 2013-01-03 Republican M    \n 5  3164 2013-01-03 Democrat   M    \n 6  3165 2013-01-03 Republican M    \n 7  3166 2013-01-03 Republican M    \n 8  3167 2013-01-03 Democrat   F    \n 9  3168 2013-01-03 Republican M    \n10  3169 2013-01-03 Democrat   M    \n# ℹ 270 more rows"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#zero-counts-in-dplyr-1",
    "href": "slides/03b-dplyr-basics.html#zero-counts-in-dplyr-1",
    "title": "Manipulating tables with dplyr",
    "section": "Zero Counts in dplyr",
    "text": "Zero Counts in dplyr\n\ndf |&gt;\n    group_by(start_year, party, sex) |&gt;\n    summarize(N = n()) |&gt;\n    mutate(freq = N / sum(N))\n\n# A tibble: 14 × 5\n# Groups:   start_year, party [8]\n   start_year party      sex       N   freq\n   &lt;date&gt;     &lt;chr&gt;      &lt;chr&gt; &lt;int&gt;  &lt;dbl&gt;\n 1 2013-01-03 Democrat   F        21 0.362 \n 2 2013-01-03 Democrat   M        37 0.638 \n 3 2013-01-03 Republican F         8 0.101 \n 4 2013-01-03 Republican M        71 0.899 \n 5 2015-01-03 Democrat   M         1 1     \n 6 2015-01-03 Republican M         5 1     \n 7 2017-01-03 Democrat   F         6 0.24  \n 8 2017-01-03 Democrat   M        19 0.76  \n 9 2017-01-03 Republican F         2 0.0667\n10 2017-01-03 Republican M        28 0.933 \n11 2019-01-03 Democrat   F        33 0.647 \n12 2019-01-03 Democrat   M        18 0.353 \n13 2019-01-03 Republican F         1 0.0323\n14 2019-01-03 Republican M        30 0.968"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#zero-counts-in-dplyr-2",
    "href": "slides/03b-dplyr-basics.html#zero-counts-in-dplyr-2",
    "title": "Manipulating tables with dplyr",
    "section": "Zero Counts in dplyr",
    "text": "Zero Counts in dplyr\n\np_col &lt;- df |&gt;\n    group_by(start_year, party, sex) |&gt;\n    summarize(N = n()) |&gt;\n    mutate(freq = N / sum(N)) |&gt;\n    ggplot(aes(x = start_year,\n               y = freq,\n               fill = sex)) +\n    geom_col() +\n    scale_y_continuous(labels = scales::percent) +\n    scale_fill_manual(values = sex_colors, labels = c(\"Women\", \"Men\")) +\n    labs(x = \"Year\", y = \"Percent\", fill = \"Group\") +\n    facet_wrap(~ party)"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#zero-counts-in-dplyr-3",
    "href": "slides/03b-dplyr-basics.html#zero-counts-in-dplyr-3",
    "title": "Manipulating tables with dplyr",
    "section": "Zero Counts in dplyr",
    "text": "Zero Counts in dplyr\n\np_col"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#zero-counts-in-dplyr-4",
    "href": "slides/03b-dplyr-basics.html#zero-counts-in-dplyr-4",
    "title": "Manipulating tables with dplyr",
    "section": "2. Zero Counts in dplyr",
    "text": "2. Zero Counts in dplyr\n\np_line &lt;- df |&gt;\n    group_by(start_year, party, sex) |&gt;\n    summarize(N = n()) |&gt;\n    mutate(freq = N / sum(N)) |&gt;\n    ggplot(aes(x = start_year,\n               y = freq,\n               color = sex)) +\n    geom_line(size = 1.1) +\n    scale_y_continuous(labels = scales::percent) +\n    scale_color_manual(values = sex_colors, labels = c(\"Women\", \"Men\")) +\n    guides(color = guide_legend(reverse = TRUE)) +\n    labs(x = \"Year\", y = \"Percent\", color = \"Group\") +\n    facet_wrap(~ party)"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#zero-counts-in-dplyr-5",
    "href": "slides/03b-dplyr-basics.html#zero-counts-in-dplyr-5",
    "title": "Manipulating tables with dplyr",
    "section": "Zero Counts in dplyr",
    "text": "Zero Counts in dplyr\n\np_line"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#option-1-factors-and-.drop",
    "href": "slides/03b-dplyr-basics.html#option-1-factors-and-.drop",
    "title": "Manipulating tables with dplyr",
    "section": "Option 1: factors and .drop",
    "text": "Option 1: factors and .drop\nFactors are for categorical variables and are stored differently from characters.\nThis can matter when modeling, and also now.\n\ndf_f &lt;- df |&gt; \n  mutate(party_f = factor(party))\n\ndf_f\n\n# A tibble: 280 × 5\n     pid start_year party      sex   party_f   \n   &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;      &lt;chr&gt; &lt;fct&gt;     \n 1  3160 2013-01-03 Republican M     Republican\n 2  3161 2013-01-03 Democrat   F     Democrat  \n 3  3162 2013-01-03 Democrat   M     Democrat  \n 4  3163 2013-01-03 Republican M     Republican\n 5  3164 2013-01-03 Democrat   M     Democrat  \n 6  3165 2013-01-03 Republican M     Republican\n 7  3166 2013-01-03 Republican M     Republican\n 8  3167 2013-01-03 Democrat   F     Democrat  \n 9  3168 2013-01-03 Republican M     Republican\n10  3169 2013-01-03 Democrat   M     Democrat  \n# ℹ 270 more rows"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#option-1-factors-and-.drop-1",
    "href": "slides/03b-dplyr-basics.html#option-1-factors-and-.drop-1",
    "title": "Manipulating tables with dplyr",
    "section": "Option 1: factors and .drop",
    "text": "Option 1: factors and .drop\n\ndf_f |&gt; \n  group_by(party_f) |&gt; \n  tally()\n\n# A tibble: 2 × 2\n  party_f        n\n  &lt;fct&gt;      &lt;int&gt;\n1 Democrat     135\n2 Republican   145\n\n\nFactors are integer values with named labels, or levels:\n\ntypeof(df_f$party_f)\n\n[1] \"integer\"\n\nlevels(df_f$party_f)\n\n[1] \"Democrat\"   \"Republican\""
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#option-1-factors-and-.drop-2",
    "href": "slides/03b-dplyr-basics.html#option-1-factors-and-.drop-2",
    "title": "Manipulating tables with dplyr",
    "section": "Option 1: factors and .drop",
    "text": "Option 1: factors and .drop\nBy default, unused levels won’t display:\n\ndf_f &lt;- df |&gt; \n  mutate(party_f = factor(party, \n                          levels = c(\"Democrat\", \n                                     \"Republican\", \n                                     \"Libertarian\")))\ndf_f |&gt; \n  group_by(party_f) |&gt; \n  tally()\n\n# A tibble: 2 × 2\n  party_f        n\n  &lt;fct&gt;      &lt;int&gt;\n1 Democrat     135\n2 Republican   145\n\nlevels(df_f$party_f)\n\n[1] \"Democrat\"    \"Republican\"  \"Libertarian\""
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#option-1-factors-and-.drop-3",
    "href": "slides/03b-dplyr-basics.html#option-1-factors-and-.drop-3",
    "title": "Manipulating tables with dplyr",
    "section": "Option 1: factors and .drop",
    "text": "Option 1: factors and .drop\nBy default, unused levels won’t display:\n\ndf |&gt; \n  mutate(across(where(is.character), as_factor)) |&gt; \n  group_by(start_year, party, sex) |&gt;\n  summarize(N = n()) |&gt;\n  mutate(freq = N / sum(N))\n\n# A tibble: 14 × 5\n# Groups:   start_year, party [8]\n   start_year party      sex       N   freq\n   &lt;date&gt;     &lt;fct&gt;      &lt;fct&gt; &lt;int&gt;  &lt;dbl&gt;\n 1 2013-01-03 Republican M        71 0.899 \n 2 2013-01-03 Republican F         8 0.101 \n 3 2013-01-03 Democrat   M        37 0.638 \n 4 2013-01-03 Democrat   F        21 0.362 \n 5 2015-01-03 Republican M         5 1     \n 6 2015-01-03 Democrat   M         1 1     \n 7 2017-01-03 Republican M        28 0.933 \n 8 2017-01-03 Republican F         2 0.0667\n 9 2017-01-03 Democrat   M        19 0.76  \n10 2017-01-03 Democrat   F         6 0.24  \n11 2019-01-03 Republican M        30 0.968 \n12 2019-01-03 Republican F         1 0.0323\n13 2019-01-03 Democrat   M        18 0.353 \n14 2019-01-03 Democrat   F        33 0.647"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#option-1-factors-and-.drop-4",
    "href": "slides/03b-dplyr-basics.html#option-1-factors-and-.drop-4",
    "title": "Manipulating tables with dplyr",
    "section": "Option 1: factors and .drop",
    "text": "Option 1: factors and .drop\nYou can make dplyr keep empty factor levels though:\n\ndf |&gt; \n  mutate(across(where(is.character), as_factor)) |&gt; \n  group_by(start_year, party, sex, .drop = FALSE) |&gt; \n  summarize(N = n()) |&gt;\n  mutate(freq = N / sum(N))\n\n# A tibble: 16 × 5\n# Groups:   start_year, party [8]\n   start_year party      sex       N   freq\n   &lt;date&gt;     &lt;fct&gt;      &lt;fct&gt; &lt;int&gt;  &lt;dbl&gt;\n 1 2013-01-03 Republican M        71 0.899 \n 2 2013-01-03 Republican F         8 0.101 \n 3 2013-01-03 Democrat   M        37 0.638 \n 4 2013-01-03 Democrat   F        21 0.362 \n 5 2015-01-03 Republican M         5 1     \n 6 2015-01-03 Republican F         0 0     \n 7 2015-01-03 Democrat   M         1 1     \n 8 2015-01-03 Democrat   F         0 0     \n 9 2017-01-03 Republican M        28 0.933 \n10 2017-01-03 Republican F         2 0.0667\n11 2017-01-03 Democrat   M        19 0.76  \n12 2017-01-03 Democrat   F         6 0.24  \n13 2019-01-03 Republican M        30 0.968 \n14 2019-01-03 Republican F         1 0.0323\n15 2019-01-03 Democrat   M        18 0.353 \n16 2019-01-03 Democrat   F        33 0.647"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#option-2-ungroup-and-complete",
    "href": "slides/03b-dplyr-basics.html#option-2-ungroup-and-complete",
    "title": "Manipulating tables with dplyr",
    "section": "Option 2: ungroup() and complete()",
    "text": "Option 2: ungroup() and complete()\nMaybe you don’t want to deal with factors.\n\ndf_c &lt;- df |&gt;\n    group_by(start_year, party, sex) |&gt;\n    summarize(N = n()) |&gt;\n    mutate(freq = N / sum(N)) |&gt;\n    ungroup() |&gt;\n    complete(start_year, party, sex,\n             fill = list(N = 0, freq = 0))"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#option-2-ungroup-and-complete-1",
    "href": "slides/03b-dplyr-basics.html#option-2-ungroup-and-complete-1",
    "title": "Manipulating tables with dplyr",
    "section": "Option 2: ungroup() and complete()",
    "text": "Option 2: ungroup() and complete()\n\ndf_c\n\n# A tibble: 16 × 5\n   start_year party      sex       N   freq\n   &lt;date&gt;     &lt;chr&gt;      &lt;chr&gt; &lt;int&gt;  &lt;dbl&gt;\n 1 2013-01-03 Democrat   F        21 0.362 \n 2 2013-01-03 Democrat   M        37 0.638 \n 3 2013-01-03 Republican F         8 0.101 \n 4 2013-01-03 Republican M        71 0.899 \n 5 2015-01-03 Democrat   F         0 0     \n 6 2015-01-03 Democrat   M         1 1     \n 7 2015-01-03 Republican F         0 0     \n 8 2015-01-03 Republican M         5 1     \n 9 2017-01-03 Democrat   F         6 0.24  \n10 2017-01-03 Democrat   M        19 0.76  \n11 2017-01-03 Republican F         2 0.0667\n12 2017-01-03 Republican M        28 0.933 \n13 2019-01-03 Democrat   F        33 0.647 \n14 2019-01-03 Democrat   M        18 0.353 \n15 2019-01-03 Republican F         1 0.0323\n16 2019-01-03 Republican M        30 0.968"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#option-2-ungroup-and-complete-2",
    "href": "slides/03b-dplyr-basics.html#option-2-ungroup-and-complete-2",
    "title": "Manipulating tables with dplyr",
    "section": "Option 2: ungroup() and complete()",
    "text": "Option 2: ungroup() and complete()\n\np_out &lt;- df_c |&gt; \n  ggplot(aes(x = start_year,\n               y = freq,\n               color = sex)) +\n    geom_line(size = 1.1) +\n    scale_y_continuous(labels = scales::percent) +\n    scale_color_manual(values = sex_colors, labels = c(\"Women\", \"Men\")) +\n    guides(color = guide_legend(reverse = TRUE)) +\n    labs(x = \"Year\", y = \"Percent\", color = \"Group\") +\n    facet_wrap(~ party)"
  },
  {
    "objectID": "slides/03b-dplyr-basics.html#option-2-ungroup-and-complete-3",
    "href": "slides/03b-dplyr-basics.html#option-2-ungroup-and-complete-3",
    "title": "Manipulating tables with dplyr",
    "section": "Option 2: ungroup() and complete()",
    "text": "Option 2: ungroup() and complete()\n\np_out"
  },
  {
    "objectID": "scratch.html",
    "href": "scratch.html",
    "title": "Scratch File",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "scratch.html#quarto",
    "href": "scratch.html#quarto",
    "title": "Scratch File",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "scratch.html#running-code",
    "href": "scratch.html#running-code",
    "title": "Scratch File",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Wrangling with R and the Tidyverse",
    "section": "",
    "text": "Slides\n\n01 Overview\n02 About R\n03a dplyr basics (a)\n03b dplyr basics (b)\n04 Tidy data\n05 Strings and Regular Expressions\n06 Getting and cleaning data\n07 Iterating on data\n08 Making tidy work easier"
  },
  {
    "objectID": "slides/07d-parallelism.html#load-the-packages-as-always",
    "href": "slides/07d-parallelism.html#load-the-packages-as-always",
    "title": "Parallel Processing",
    "section": "Load the packages, as always",
    "text": "Load the packages, as always\n\nlibrary(here)      # manage file paths\nlibrary(socviz)    # data and some useful functions\nlibrary(tidyverse) # your friend and mine\n\n## Magic new package\n# install.packages(\"furrr\")\nlibrary(furrr) # Also loads `future`\n\nLoading required package: future"
  },
  {
    "objectID": "slides/07d-parallelism.html#a-lot-of-analysis-has-this-pattern",
    "href": "slides/07d-parallelism.html#a-lot-of-analysis-has-this-pattern",
    "title": "Parallel Processing",
    "section": "A lot of analysis has this pattern",
    "text": "A lot of analysis has this pattern\nWe start with a dataset\nWe split it into pieces, usually according to some feature or categorical variable, or by file or something.\nWe do something—the same thing—to each of those pieces. That is we apply a function or procedure to the pieces. That procedure returns some result for each piece. The result will be of the same form: a number, a vector of counts, summary statistics, a model, a list, whatever.\nFinally we combine those results into a final piece of output, usually a tibble or somesuch."
  },
  {
    "objectID": "slides/07d-parallelism.html#for-example",
    "href": "slides/07d-parallelism.html#for-example",
    "title": "Parallel Processing",
    "section": "For example",
    "text": "For example\ndplyr is all about this.\n\ngss_sm |&gt; \n  count(bigregion)\n\n# A tibble: 4 × 2\n  bigregion     n\n  &lt;fct&gt;     &lt;int&gt;\n1 Northeast   488\n2 Midwest     695\n3 South      1052\n4 West        632\n\n\nWe split into groups, apply the sum() function within the groups, and combine the results into a new tibble showing the resulting sum per group. The various dplyr functions are oriented to doing this in a way that gives you a consistent set of outputs."
  },
  {
    "objectID": "slides/07d-parallelism.html#for-example-split",
    "href": "slides/07d-parallelism.html#for-example-split",
    "title": "Parallel Processing",
    "section": "For example: split",
    "text": "For example: split\nWe can split, apply, combine in various ways.\nBase R has the split() function:\n\nout &lt;- mtcars |&gt; \n  split(mtcars$cyl)\nsummary(out) # mtcars split into a list of data frames by the `cyl` variable\n\n  Length Class      Mode\n4 11     data.frame list\n6 11     data.frame list\n8 11     data.frame list"
  },
  {
    "objectID": "slides/07d-parallelism.html#for-example-split-1",
    "href": "slides/07d-parallelism.html#for-example-split-1",
    "title": "Parallel Processing",
    "section": "For example: split",
    "text": "For example: split\nTidyverse has group_split():\n\nout &lt;- mtcars |&gt; \n  group_split(cyl)\nout\n\n&lt;list_of&lt;\n  tbl_df&lt;\n    mpg : double\n    cyl : double\n    disp: double\n    hp  : double\n    drat: double\n    wt  : double\n    qsec: double\n    vs  : double\n    am  : double\n    gear: double\n    carb: double\n  &gt;\n&gt;[3]&gt;\n[[1]]\n# A tibble: 11 × 11\n     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  22.8     4 108      93  3.85  2.32  18.6     1     1     4     1\n 2  24.4     4 147.     62  3.69  3.19  20       1     0     4     2\n 3  22.8     4 141.     95  3.92  3.15  22.9     1     0     4     2\n 4  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1\n 5  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2\n 6  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4     1\n 7  21.5     4 120.     97  3.7   2.46  20.0     1     0     3     1\n 8  27.3     4  79      66  4.08  1.94  18.9     1     1     4     1\n 9  26       4 120.     91  4.43  2.14  16.7     0     1     5     2\n10  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5     2\n11  21.4     4 121     109  4.11  2.78  18.6     1     1     4     2\n\n[[2]]\n# A tibble: 7 × 11\n    mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n3  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n4  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n5  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n6  17.8     6  168.   123  3.92  3.44  18.9     1     0     4     4\n7  19.7     6  145    175  3.62  2.77  15.5     0     1     5     6\n\n[[3]]\n# A tibble: 14 × 11\n     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 2  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 3  16.4     8  276.   180  3.07  4.07  17.4     0     0     3     3\n 4  17.3     8  276.   180  3.07  3.73  17.6     0     0     3     3\n 5  15.2     8  276.   180  3.07  3.78  18       0     0     3     3\n 6  10.4     8  472    205  2.93  5.25  18.0     0     0     3     4\n 7  10.4     8  460    215  3     5.42  17.8     0     0     3     4\n 8  14.7     8  440    230  3.23  5.34  17.4     0     0     3     4\n 9  15.5     8  318    150  2.76  3.52  16.9     0     0     3     2\n10  15.2     8  304    150  3.15  3.44  17.3     0     0     3     2\n11  13.3     8  350    245  3.73  3.84  15.4     0     0     3     4\n12  19.2     8  400    175  3.08  3.84  17.0     0     0     3     2\n13  15.8     8  351    264  4.22  3.17  14.5     0     1     5     4\n14  15       8  301    335  3.54  3.57  14.6     0     1     5     8"
  },
  {
    "objectID": "slides/07d-parallelism.html#for-example-apply",
    "href": "slides/07d-parallelism.html#for-example-apply",
    "title": "Parallel Processing",
    "section": "For example: apply",
    "text": "For example: apply\nThe application step is “I want to fit a linear model to each piece”\n\nout &lt;- mtcars |&gt; \n  group_split(cyl) |&gt; \n  map(\\(df) lm(mpg ~ wt + hp + gear, data = df))"
  },
  {
    "objectID": "slides/07d-parallelism.html#for-example-apply-1",
    "href": "slides/07d-parallelism.html#for-example-apply-1",
    "title": "Parallel Processing",
    "section": "For example: apply",
    "text": "For example: apply\nThe application step is “I want to fit a linear model to each piece” and get a summary\n\nmtcars |&gt; \n  group_split(cyl) |&gt; \n  map(\\(df) lm(mpg ~ wt + hp + gear, data = df))  |&gt; \n  map(summary) |&gt; \n  map_dbl(\"r.squared\")\n\n[1] 0.7301860 0.6597413 0.4995237"
  },
  {
    "objectID": "slides/07d-parallelism.html#for-example-combine",
    "href": "slides/07d-parallelism.html#for-example-combine",
    "title": "Parallel Processing",
    "section": "For example: combine",
    "text": "For example: combine\nIn this case the “combine” step is implicitly at the end: we get a vector of R squareds back, and it’s as long as the number of groups.\n\nmtcars |&gt; \n  group_split(cyl) |&gt; \n  map(\\(df) lm(mpg ~ wt + hp + gear, data = df))  |&gt; \n  map(summary) |&gt; \n  map_dbl(\"r.squared\")\n\n[1] 0.7301860 0.6597413 0.4995237"
  },
  {
    "objectID": "slides/07d-parallelism.html#for-example-apply-2",
    "href": "slides/07d-parallelism.html#for-example-apply-2",
    "title": "Parallel Processing",
    "section": "For example: apply",
    "text": "For example: apply\nThis is also what we’re doing more elegantly (staying within a tibble structure) if we nest() and use broom to get a summary out.\n\nmtcars |&gt;\n  group_by(cyl) |&gt; \n  nest() |&gt; \n  mutate(model = map(data, \\(df) lm(mpg ~ wt + hp + gear, data = df)), \n         perf = map(model, broom::glance)) |&gt; \n  unnest(perf)\n\n# A tibble: 3 × 15\n# Groups:   cyl [3]\n    cyl data     model  r.squared adj.r.squared sigma statistic p.value    df\n  &lt;dbl&gt; &lt;list&gt;   &lt;list&gt;     &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1     6 &lt;tibble&gt; &lt;lm&gt;       0.660         0.319  1.20      1.94  0.300      3\n2     4 &lt;tibble&gt; &lt;lm&gt;       0.730         0.615  2.80      6.31  0.0211     3\n3     8 &lt;tibble&gt; &lt;lm&gt;       0.500         0.349  2.06      3.33  0.0648     3\n# ℹ 6 more variables: logLik &lt;dbl&gt;, AIC &lt;dbl&gt;, BIC &lt;dbl&gt;, deviance &lt;dbl&gt;,\n#   df.residual &lt;int&gt;, nobs &lt;int&gt;"
  },
  {
    "objectID": "slides/07d-parallelism.html#how-this-happens",
    "href": "slides/07d-parallelism.html#how-this-happens",
    "title": "Parallel Processing",
    "section": "How this happens",
    "text": "How this happens\nIn each of these cases, the data is processed sequentially or serially. R splits the data according to your instructions, applies the function or procedure to each one in turn, and combines the outputs in order out the other side. Your computer’s processor is handed each piece in turn."
  },
  {
    "objectID": "slides/07d-parallelism.html#how-this-happens-1",
    "href": "slides/07d-parallelism.html#how-this-happens-1",
    "title": "Parallel Processing",
    "section": "How this happens",
    "text": "How this happens\nFor small tasks that’s fine. But for bigger tasks it gets inefficient quickly.\n\n\n## From Henrik Bengtsson's documentation for future/furr\nslow_sum &lt;- function(x) {\n  sum &lt;- 0\n  for (value in x) {\n    Sys.sleep(1.0)  ## one-second slowdown per value\n    sum &lt;- sum + value\n  }\n  sum\n}\n\n# This takes &gt; ten seconds to run.\ntictoc::tic()\nslow_sum(1:10)\n\n[1] 55\n\ntictoc::toc()\n\n10.036 sec elapsed\n\n\n\nIf this is the sort of task we have to apply to a bunch of things, it’s going to take ages."
  },
  {
    "objectID": "slides/07d-parallelism.html#thats-embarrassing",
    "href": "slides/07d-parallelism.html#thats-embarrassing",
    "title": "Parallel Processing",
    "section": "That’s Embarrassing",
    "text": "That’s Embarrassing\nA feature of many split-apply-combine activities is that it does not matter what order the “apply” part happens to the groups. All that matters is that we can combine the results at the end, no matter what order they come back in. E.g. in the mtcars example the model being fit to the 4-cylinder cars group doesn’t depend in any way on the results of the model being fit to the 8-cylinder group.\nThis sort of situation is embarrassingly parallel."
  },
  {
    "objectID": "slides/07d-parallelism.html#thats-embarrassing-1",
    "href": "slides/07d-parallelism.html#thats-embarrassing-1",
    "title": "Parallel Processing",
    "section": "That’s Embarrassing",
    "text": "That’s Embarrassing\nWhen a task is embarrassingly parallel, and the number of pieces or groups is large enough or complex enough, then if we can do them at the same time then we should. There is some overhead—we have to keep track of where each piece was sent and when the results come back in—but if that’s low enough in comparison to doing things serially, then we should parallelize the task."
  },
  {
    "objectID": "slides/07d-parallelism.html#multicore-computing",
    "href": "slides/07d-parallelism.html#multicore-computing",
    "title": "Parallel Processing",
    "section": "Multicore Computing",
    "text": "Multicore Computing\nParallel computing used to mean “I have a cluster of computers at my disposal”. But modern CPUs are constructed in a semi-modular fashion. They have some number of “cores”, each one of which is like a small processor in its own right. In effect you have a computer cluster already."
  },
  {
    "objectID": "slides/07d-parallelism.html#some-terms",
    "href": "slides/07d-parallelism.html#some-terms",
    "title": "Parallel Processing",
    "section": "Some Terms",
    "text": "Some Terms\n\nSocket: The physical connection on your computer that houses the processor. These days, mostly there’s just one.\nCore: The part of the processor that actually performs the computation. Most modern processors have multiple cores. Each one can do wholly independent work.\nProcess: A single instance of a running task or program (R, Slack, Chrome, etc). A core can only run one process at a time. But, cores are fast. And so, they can run many threads\nThread: A piece of a process that can share memory and resources with other threads. If you have enough power you can do something Intel called hyperthreading, which is a way of dividing up a physical core into (usually) two logical cores that work on the same clock cycle and share some resources on the physical core.\nCluster: A collection of things that are capable of hosting cores. Might be a single socket (on your laptop) or an old-fashioned room full of many physical computers that can be made to act as if they were a single machine."
  },
  {
    "objectID": "slides/07d-parallelism.html#multicore-computing-1",
    "href": "slides/07d-parallelism.html#multicore-computing-1",
    "title": "Parallel Processing",
    "section": "Multicore Computing",
    "text": "Multicore Computing\nMost of the time, even when we are using them, our computers sit around doing PRETTY MUCH NOTHING.\n\n\n## How many cores do we have?\nparallelly::availableCores()\n\nsystem \n    16 \n\n\nRemember, processor clock cycles are really fast. They’re measured in billions of cycles per second.\nWe need to put those cores to work!"
  },
  {
    "objectID": "slides/07d-parallelism.html#future-and-furrr",
    "href": "slides/07d-parallelism.html#future-and-furrr",
    "title": "Parallel Processing",
    "section": "Future and furrr",
    "text": "Future and furrr\nThese packages make parallel computing way more straightforward than it used to be. In particular, for Tidyverse-centric workflows, furrr provides a set of future_ functions that are drop-in replacements for map and friends. So map() becomes future_map() and so on.\nWe set things up like this:\n\n# library(furrr) # We did this already\nplan(multisession) # Default will use the available resources\n## Note difference between multisession and multicore \n## [tl;dr: the latter is faster, but you can't use it on Windows]"
  },
  {
    "objectID": "slides/07d-parallelism.html#toy-example",
    "href": "slides/07d-parallelism.html#toy-example",
    "title": "Parallel Processing",
    "section": "Toy Example",
    "text": "Toy Example\n\n# Another slow function (from \n# Grant McDermott this time)\nslow_square &lt;- function(x = 1) {\n    x_sq &lt;- x^2 \n    out &lt;-  tibble(value = x, value_sq = x_sq)\n    Sys.sleep(2) # Zzzz\n    out\n}\n\ntictoc::tic(\"Serially\")\n## This is of course way slower than just writing \n## slow_square(1:15) but nvm that for now\nserial_out &lt;- map(1:15, slow_square) |&gt; \n  list_rbind()\ntictoc::toc()\n\nSerially: 30.099 sec elapsed"
  },
  {
    "objectID": "slides/07d-parallelism.html#toy-example-1",
    "href": "slides/07d-parallelism.html#toy-example-1",
    "title": "Parallel Processing",
    "section": "Toy Example",
    "text": "Toy Example\n\ntictoc::tic(\"Parallelized\")\nparallel_out &lt;-  future_map_dfr(1:15, slow_square)\ntictoc::toc()\n\nParallelized: 3.825 sec elapsed\n\n\n\nidentical(serial_out, parallel_out)\n\n[1] TRUE"
  },
  {
    "objectID": "slides/07d-parallelism.html#noaa-data",
    "href": "slides/07d-parallelism.html#noaa-data",
    "title": "Parallel Processing",
    "section": "NOAA Data",
    "text": "NOAA Data\nData obtained with:\nmkdir raw\ncd raw\nwget --no-parent -r -l inf --wait 5 --random-wait 'https://www.ncei.noaa.gov/data/sea-surface-temperature-optimum-interpolation/v2.1/access/avhrr/'\nThis tries to be polite with the NOAA: it enforces a wait time and in addition randomizes it to make it variably longer. Note also no boundary on depth of folder recursion. There are a lot of files (&gt;15,000). Doing it this way will take several days in real time (though much much less in actual transfer time of course)."
  },
  {
    "objectID": "slides/07d-parallelism.html#noaa-temperature-data",
    "href": "slides/07d-parallelism.html#noaa-temperature-data",
    "title": "Parallel Processing",
    "section": "NOAA Temperature Data",
    "text": "NOAA Temperature Data\nRaw data directories:\n\nbasename(fs::dir_ls(here::here(\"avhrr\")))\n\n  [1] \"198109\" \"198110\" \"198111\" \"198112\" \"198201\" \"198202\" \"198203\" \"198204\"\n  [9] \"198205\" \"198206\" \"198207\" \"198208\" \"198209\" \"198210\" \"198211\" \"198212\"\n [17] \"198301\" \"198302\" \"198303\" \"198304\" \"198305\" \"198306\" \"198307\" \"198308\"\n [25] \"198309\" \"198310\" \"198311\" \"198312\" \"198401\" \"198402\" \"198403\" \"198404\"\n [33] \"198405\" \"198406\" \"198407\" \"198408\" \"198409\" \"198410\" \"198411\" \"198412\"\n [41] \"198501\" \"198502\" \"198503\" \"198504\" \"198505\" \"198506\" \"198507\" \"198508\"\n [49] \"198509\" \"198510\" \"198511\" \"198512\" \"198601\" \"198602\" \"198603\" \"198604\"\n [57] \"198605\" \"198606\" \"198607\" \"198608\" \"198609\" \"198610\" \"198611\" \"198612\"\n [65] \"198701\" \"198702\" \"198703\" \"198704\" \"198705\" \"198706\" \"198707\" \"198708\"\n [73] \"198709\" \"198710\" \"198711\" \"198712\" \"198801\" \"198802\" \"198803\" \"198804\"\n [81] \"198805\" \"198806\" \"198807\" \"198808\" \"198809\" \"198810\" \"198811\" \"198812\"\n [89] \"198901\" \"198902\" \"198903\" \"198904\" \"198905\" \"198906\" \"198907\" \"198908\"\n [97] \"198909\" \"198910\" \"198911\" \"198912\"\n [ reached getOption(\"max.print\") -- omitted 421 entries ]"
  },
  {
    "objectID": "slides/07d-parallelism.html#noaa-temperature-data-1",
    "href": "slides/07d-parallelism.html#noaa-temperature-data-1",
    "title": "Parallel Processing",
    "section": "NOAA Temperature Data",
    "text": "NOAA Temperature Data\nRaw data files, in netCDF (Version 4) format\n\nbasename(fs::dir_ls(here::here(\"avhrr\", \"202402\")))\n\n [1] \"oisst-avhrr-v02r01.20240201.nc\" \"oisst-avhrr-v02r01.20240202.nc\"\n [3] \"oisst-avhrr-v02r01.20240203.nc\" \"oisst-avhrr-v02r01.20240204.nc\"\n [5] \"oisst-avhrr-v02r01.20240205.nc\" \"oisst-avhrr-v02r01.20240206.nc\"\n [7] \"oisst-avhrr-v02r01.20240207.nc\" \"oisst-avhrr-v02r01.20240208.nc\"\n [9] \"oisst-avhrr-v02r01.20240209.nc\" \"oisst-avhrr-v02r01.20240210.nc\"\n[11] \"oisst-avhrr-v02r01.20240211.nc\" \"oisst-avhrr-v02r01.20240212.nc\"\n[13] \"oisst-avhrr-v02r01.20240213.nc\" \"oisst-avhrr-v02r01.20240214.nc\"\n[15] \"oisst-avhrr-v02r01.20240215.nc\" \"oisst-avhrr-v02r01.20240216.nc\"\n[17] \"oisst-avhrr-v02r01.20240217.nc\" \"oisst-avhrr-v02r01.20240218.nc\"\n[19] \"oisst-avhrr-v02r01.20240219.nc\" \"oisst-avhrr-v02r01.20240220.nc\"\n[21] \"oisst-avhrr-v02r01.20240221.nc\" \"oisst-avhrr-v02r01.20240222.nc\"\n[23] \"oisst-avhrr-v02r01.20240223.nc\" \"oisst-avhrr-v02r01.20240224.nc\"\n[25] \"oisst-avhrr-v02r01.20240225.nc\" \"oisst-avhrr-v02r01.20240226.nc\"\n[27] \"oisst-avhrr-v02r01.20240227.nc\" \"oisst-avhrr-v02r01.20240228.nc\"\n[29] \"oisst-avhrr-v02r01.20240229.nc\""
  },
  {
    "objectID": "slides/07d-parallelism.html#some-prep",
    "href": "slides/07d-parallelism.html#some-prep",
    "title": "Parallel Processing",
    "section": "Some Prep",
    "text": "Some Prep\n\n## Seasons for plotting\nseason &lt;-  function(in_date){\n  br = yday(as.Date(c(\"2019-03-01\",\n                      \"2019-06-01\",\n                      \"2019-09-01\",\n                      \"2019-12-01\")))\n  x = yday(in_date)\n  x = cut(x, breaks = c(0, br, 366))\n  levels(x) = c(\"Winter\", \"Spring\", \"Summer\", \"Autumn\", \"Winter\")\n  x\n}\n\nseason_lab &lt;-  tibble(yrday = yday(as.Date(c(\"2019-03-01\",\n                                             \"2019-06-01\",\n                                             \"2019-09-01\",\n                                             \"2019-12-01\"))),\n                      lab = c(\"Spring\", \"Summer\", \"Autumn\", \"Winter\"))"
  },
  {
    "objectID": "slides/07d-parallelism.html#noaa-temperature-data-2",
    "href": "slides/07d-parallelism.html#noaa-temperature-data-2",
    "title": "Parallel Processing",
    "section": "NOAA Temperature Data",
    "text": "NOAA Temperature Data\nRaw data files\n\n#install.packages(\"ncdf4\")\n#install.packages(\"terra\")\nlibrary(terra)\n\n## For the filename processing\n## This one gives you an unknown number of chunks each with approx n elements\nchunk &lt;- function(x, n) split(x, ceiling(seq_along(x)/n))\n\n## This one gives you n chunks each with an approx equal but unknown number of elements\nchunk2 &lt;- function(x, n) split(x, cut(seq_along(x), n, labels = FALSE))\n\n## All the daily .nc files:\nall_fnames &lt;- as.character(fs::dir_ls(here(\"avhrr\"), recurse = TRUE, glob = \"*.nc\"))\nchunked_fnames &lt;- chunk(all_fnames, 25)\n\nlength(all_fnames)\n\n[1] 15549\n\nlength(chunked_fnames)\n\n[1] 622"
  },
  {
    "objectID": "slides/07d-parallelism.html#noaa-temperature-data-3",
    "href": "slides/07d-parallelism.html#noaa-temperature-data-3",
    "title": "Parallel Processing",
    "section": "NOAA Temperature Data",
    "text": "NOAA Temperature Data\nThe data is in netCDF (Version 4) format. An interesting self-documenting format. Read one in with the netCDF reader.\n\ntmp &lt;- ncdf4::nc_open(all_fnames[10000])\ntmp\n\nFile /Users/kjhealy/Documents/courses/data_wrangling/avhrr/200901/oisst-avhrr-v02r01.20090120.nc (NC_FORMAT_NETCDF4):\n\n     4 variables (excluding dimension variables):\n        short anom[lon,lat,zlev,time]   (Chunking: [1440,720,1,1])  (Compression: shuffle,level 4)\n            long_name: Daily sea surface temperature anomalies\n            _FillValue: -999\n            add_offset: 0\n            scale_factor: 0.00999999977648258\n            valid_min: -1200\n            valid_max: 1200\n            units: Celsius\n        short err[lon,lat,zlev,time]   (Chunking: [1440,720,1,1])  (Compression: shuffle,level 4)\n            long_name: Estimated error standard deviation of analysed_sst\n            units: Celsius\n            _FillValue: -999\n            add_offset: 0\n            scale_factor: 0.00999999977648258\n            valid_min: 0\n            valid_max: 1000\n        short ice[lon,lat,zlev,time]   (Chunking: [1440,720,1,1])  (Compression: shuffle,level 4)\n            long_name: Sea ice concentration\n            units: %\n            _FillValue: -999\n            add_offset: 0\n            scale_factor: 0.00999999977648258\n            valid_min: 0\n            valid_max: 100\n        short sst[lon,lat,zlev,time]   (Chunking: [1440,720,1,1])  (Compression: shuffle,level 4)\n            long_name: Daily sea surface temperature\n            units: Celsius\n            _FillValue: -999\n            add_offset: 0\n            scale_factor: 0.00999999977648258\n            valid_min: -300\n            valid_max: 4500\n\n     4 dimensions:\n        time  Size:1   *** is unlimited *** \n            long_name: Center time of the day\n            units: days since 1978-01-01 12:00:00\n        zlev  Size:1 \n            long_name: Sea surface height\n            units: meters\n            actual_range: 0, 0\n            positive: down\n        lat  Size:720 \n            long_name: Latitude\n            units: degrees_north\n            grids: Uniform grid from -89.875 to 89.875 by 0.25\n        lon  Size:1440 \n            long_name: Longitude\n            units: degrees_east\n            grids: Uniform grid from 0.125 to 359.875 by 0.25\n\n    38 global attributes:\n        title: NOAA/NCEI 1/4 Degree Daily Optimum Interpolation Sea Surface Temperature (OISST) Analysis, Version 2.1 - Final\n        Description: Reynolds, et al.(2007) Daily High-resolution Blended Analyses. Available at ftp://eclipse.ncdc.noaa.gov/pub/OI-daily/daily-sst.pdf  Climatology is based on 1971-2000 OI.v2 SST, Satellite data: Navy  NOAA18 METOP AVHRR, Ice data: NCEP ice\n        source: ICOADS, NCEP_GTS, GSFC_ICE, NCEP_ICE, Pathfinder_AVHRR, Navy_AVHRR\n        id: oisst-avhrr-v02r01.20090120.nc\n        naming_authority: gov.noaa.ncei\n        summary: NOAAs 1/4-degree Daily Optimum Interpolation Sea Surface Temperature (OISST) (sometimes referred to as Reynolds SST, which however also refers to earlier products at different resolution), currently available as version v02r01, is created by interpolating and extrapolating SST observations from different sources, resulting in a smoothed complete field. The sources of data are satellite (AVHRR) and in situ platforms (i.e., ships and buoys), and the specific datasets employed may change over time. At the marginal ice zone, sea ice concentrations are used to generate proxy SSTs.  A preliminary version of this file is produced in near-real time (1-day latency), and then replaced with a final version after 2 weeks. Note that this is the AVHRR-ONLY DOISST, available from Oct 1981, but there is a companion DOISST product that includes microwave satellite data, available from June 2002\n        cdm_data_type: Grid\n        history: Final file created using preliminary as first guess, and 3 days of AVHRR data. Preliminary uses only 1 day of AVHRR data.\n        date_modified: 2020-05-08T19:05:13Z\n        date_created: 2020-05-08T19:05:13Z\n        product_version: Version v02r01\n        processing_level: NOAA Level 4\n        institution: NOAA/National Centers for Environmental Information\n        creator_url: https://www.ncei.noaa.gov/\n        creator_email: oisst-help@noaa.gov\n        keywords: Earth Science &gt; Oceans &gt; Ocean Temperature &gt; Sea Surface Temperature\n        keywords_vocabulary: Global Change Master Directory (GCMD) Earth Science Keywords\n        platform: Ships, buoys, Argo floats, MetOp-A, MetOp-B\n        platform_vocabulary: Global Change Master Directory (GCMD) Platform Keywords\n        instrument: Earth Remote Sensing Instruments &gt; Passive Remote Sensing &gt; Spectrometers/Radiometers &gt; Imaging Spectrometers/Radiometers &gt; AVHRR &gt; Advanced Very High Resolution Radiometer\n        instrument_vocabulary: Global Change Master Directory (GCMD) Instrument Keywords\n        standard_name_vocabulary: CF Standard Name Table (v40, 25 January 2017)\n        geospatial_lat_min: -90\n        geospatial_lat_max: 90\n        geospatial_lon_min: 0\n        geospatial_lon_max: 360\n        geospatial_lat_units: degrees_north\n        geospatial_lat_resolution: 0.25\n        geospatial_lon_units: degrees_east\n        geospatial_lon_resolution: 0.25\n        time_coverage_start: 2009-01-20T00:00:00Z\n        time_coverage_end: 2009-01-20T23:59:59Z\n        metadata_link: https://doi.org/10.25921/RE9P-PT57\n        ncei_template_version: NCEI_NetCDF_Grid_Template_v2.0\n        comment: Data was converted from NetCDF-3 to NetCDF-4 format with metadata updates in November 2017.\n        sensor: Thermometer, AVHRR\n        Conventions: CF-1.6, ACDD-1.3\n        references: Reynolds, et al.(2007) Daily High-Resolution-Blended Analyses for Sea Surface Temperature (available at https://doi.org/10.1175/2007JCLI1824.1). Banzon, et al.(2016) A long-term record of blended satellite and in situ sea-surface temperature for climate monitoring, modeling and environmental studies (available at https://doi.org/10.5194/essd-8-165-2016). Huang et al. (2020) Improvements of the Daily Optimum Interpolation Sea Surface Temperature (DOISST) Version v02r01, submitted.Climatology is based on 1971-2000 OI.v2 SST. Satellite data: Pathfinder AVHRR SST and Navy AVHRR SST. Ice data: NCEP Ice and GSFC Ice."
  },
  {
    "objectID": "slides/07d-parallelism.html#noaa-temperature-data-4",
    "href": "slides/07d-parallelism.html#noaa-temperature-data-4",
    "title": "Parallel Processing",
    "section": "NOAA Temperature Data",
    "text": "NOAA Temperature Data\nFor analysis we are going to use the terra package, which understands many GIS type formats. Fundamentally we have a grid or raster of data that’s 1440 x 720 in size. The data has several layers, each one a specific measure, such as sea-surface temperature, sea ice coverage, and so on.\n\ntmp &lt;- terra::rast(all_fnames[10000])\ntmp\n\nclass       : SpatRaster \ndimensions  : 720, 1440, 4  (nrow, ncol, nlyr)\nresolution  : 0.25, 0.25  (x, y)\nextent      : 0, 360, -90, 90  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 \nsources     : oisst-avhrr-v02r01.20090120.nc:anom  \n              oisst-avhrr-v02r01.20090120.nc:err  \n              oisst-avhrr-v02r01.20090120.nc:ice  \n              oisst-avhrr-v02r01.20090120.nc:sst  \nvarnames    : anom (Daily sea surface temperature anomalies) \n              err (Estimated error standard deviation of analysed_sst) \n              ice (Sea ice concentration) \n              ...\nnames       : anom_zlev=0, err_zlev=0, ice_zlev=0, sst_zlev=0 \nunit        :     Celsius,    Celsius,          %,    Celsius \ntime (days) : 2009-01-20 \n\n\nTerra can understand rasters that are aggregated into slabs or “bricks” covering the same area repeatedly, and has methods for aggregating these arrays in different ways."
  },
  {
    "objectID": "slides/07d-parallelism.html#noaa-temperature-data-5",
    "href": "slides/07d-parallelism.html#noaa-temperature-data-5",
    "title": "Parallel Processing",
    "section": "NOAA Temperature Data",
    "text": "NOAA Temperature Data\nRead one in with terra. Get the sst (Sea Surface Temperature) layer only.\n\ntmp &lt;- terra::rast(all_fnames[10000])[\"sst\"]\ntmp\n\nclass       : SpatRaster \ndimensions  : 720, 1440, 1  (nrow, ncol, nlyr)\nresolution  : 0.25, 0.25  (x, y)\nextent      : 0, 360, -90, 90  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 \nsource      : oisst-avhrr-v02r01.20090120.nc:sst \nvarname     : sst (Daily sea surface temperature) \nname        : sst_zlev=0 \nunit        :    Celsius \ntime (days) : 2009-01-20"
  },
  {
    "objectID": "slides/07d-parallelism.html#noaa-temperature-data-6",
    "href": "slides/07d-parallelism.html#noaa-temperature-data-6",
    "title": "Parallel Processing",
    "section": "NOAA Temperature Data",
    "text": "NOAA Temperature Data\nWhat reading a chunk of filenames (with all their layers) does:\n\ntmp2 &lt;- terra::rast(chunked_fnames[[10]])\ntmp2\n\nclass       : SpatRaster \ndimensions  : 720, 1440, 100  (nrow, ncol, nlyr)\nresolution  : 0.25, 0.25  (x, y)\nextent      : 0, 360, -90, 90  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 \nsources     : oisst-avhrr-v02r01.19820414.nc:anom  \n              oisst-avhrr-v02r01.19820414.nc:err  \n              oisst-avhrr-v02r01.19820414.nc:ice  \n              ... and 97 more source(s)\nvarnames    : anom (Daily sea surface temperature anomalies) \n              err (Estimated error standard deviation of analysed_sst) \n              ice (Sea ice concentration) \n              ...\nnames       : anom_zlev=0, err_zlev=0, ice_zlev=0, sst_zlev=0, anom_zlev=0, err_zlev=0, ... \nunit        :     Celsius,    Celsius,          %,    Celsius,     Celsius,    Celsius, ... \ntime (days) : 1982-04-14 to 1982-05-08"
  },
  {
    "objectID": "slides/07d-parallelism.html#noaa-temperature-data-7",
    "href": "slides/07d-parallelism.html#noaa-temperature-data-7",
    "title": "Parallel Processing",
    "section": "NOAA Temperature Data",
    "text": "NOAA Temperature Data\nWrite a function to get a file, read in the SST raster, and get its area-weighted mean, for the North Atlantic region only.\n\nprocess_raster &lt;- function(fnames, crop_area = c(-80, 0, 0, 60), var = \"sst\") {\n\n  tdf &lt;- terra::rast(as.character(fnames))[var] |&gt;\n    terra::rotate() |&gt;   # Fix 0-360 lon\n    terra::crop(crop_area) # Manually crop to a defined box. Default is Atlantic lat/lon box\n\n  wts &lt;- terra::cellSize(tdf, unit = \"km\") # For scaling\n\n  data.frame(\n    date = terra::time(tdf),\n    # global() calculates a quantity for the whole grid on a particular SpatRaster\n    # so we get one weighted mean per file that comes in\n    wt_mean_sst = terra::global(tdf, \"mean\", weights = wts, na.rm=TRUE)$weighted_mean\n  )\n}"
  },
  {
    "objectID": "slides/07d-parallelism.html#noaa-temperature-data-8",
    "href": "slides/07d-parallelism.html#noaa-temperature-data-8",
    "title": "Parallel Processing",
    "section": "NOAA Temperature Data",
    "text": "NOAA Temperature Data\nTry it on one data file:\n\nprocess_raster(all_fnames[1000]) |&gt; \n  as_tibble()\n\n# A tibble: 1 × 2\n  date       wt_mean_sst\n  &lt;date&gt;           &lt;dbl&gt;\n1 1984-05-27        20.6"
  },
  {
    "objectID": "slides/07d-parallelism.html#try-it-on-one-chunk-of-data-files",
    "href": "slides/07d-parallelism.html#try-it-on-one-chunk-of-data-files",
    "title": "Parallel Processing",
    "section": "Try it on one chunk of data files:",
    "text": "Try it on one chunk of data files:\n\nprocess_raster(chunked_fnames[[500]]) |&gt; \n  as_tibble()\n\n# A tibble: 25 × 2\n   date       wt_mean_sst\n   &lt;date&gt;           &lt;dbl&gt;\n 1 2015-11-02        22.8\n 2 2015-11-03        22.8\n 3 2015-11-04        22.8\n 4 2015-11-05        22.7\n 5 2015-11-06        22.7\n 6 2015-11-07        22.7\n 7 2015-11-08        22.6\n 8 2015-11-09        22.5\n 9 2015-11-10        22.5\n10 2015-11-11        22.4\n# ℹ 15 more rows"
  },
  {
    "objectID": "slides/07d-parallelism.html#noaa-temperature-data-9",
    "href": "slides/07d-parallelism.html#noaa-temperature-data-9",
    "title": "Parallel Processing",
    "section": "NOAA Temperature Data",
    "text": "NOAA Temperature Data\nDo it in parallel for all files:\n\n# library(furrr) # We did this already\n# plan(multisession) \n\ntictoc::tic(\"Terra Method\")\ndf &lt;- future_map(chunked_fnames, process_raster) |&gt;\n  list_rbind() |&gt;\n  as_tibble() |&gt; \n  mutate(date = ymd(date),\n         year = lubridate::year(date),\n         month = lubridate::month(date),\n         day = lubridate::day(date),\n         yrday = lubridate::yday(date),\n         season = season(date))\ntictoc::toc()\n\nTerra Method: 30.309 sec elapsed\n\ndim(df)\n\n[1] 15549     7"
  },
  {
    "objectID": "slides/07d-parallelism.html#noaa-temperature-data-10",
    "href": "slides/07d-parallelism.html#noaa-temperature-data-10",
    "title": "Parallel Processing",
    "section": "NOAA Temperature Data",
    "text": "NOAA Temperature Data\n\ndf |&gt; \n  slice_sample(n = 10)\n\n# A tibble: 10 × 7\n   date       wt_mean_sst  year month   day yrday season\n   &lt;date&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;fct&gt; \n 1 2000-07-12        22.8  2000     7    12   194 Summer\n 2 1991-11-12        21.6  1991    11    12   316 Autumn\n 3 2016-06-01        21.6  2016     6     1   153 Summer\n 4 2016-08-04        24.1  2016     8     4   217 Summer\n 5 2005-04-23        20.3  2005     4    23   113 Spring\n 6 2012-01-25        19.7  2012     1    25    25 Winter\n 7 2006-11-18        22.3  2006    11    18   322 Autumn\n 8 2001-12-22        20.7  2001    12    22   356 Winter\n 9 1986-09-20        23.2  1986     9    20   263 Autumn\n10 2016-04-01        19.6  2016     4     1    92 Spring"
  },
  {
    "objectID": "slides/07d-parallelism.html#noaa-temperature-data-11",
    "href": "slides/07d-parallelism.html#noaa-temperature-data-11",
    "title": "Parallel Processing",
    "section": "NOAA Temperature Data",
    "text": "NOAA Temperature Data\nMake our cores work even harder\n\n## Seas of the world polygons\nseas &lt;- sf::read_sf(here(\"seas\")) \n\nseas\n\nSimple feature collection with 101 features and 10 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -180 ymin: -85.5625 xmax: 180 ymax: 90\nGeodetic CRS:  WGS 84\n# A tibble: 101 × 11\n   NAME          ID    Longitude Latitude min_X  min_Y max_X  max_Y   area MRGID\n   &lt;chr&gt;         &lt;chr&gt;     &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n 1 Rio de La Pl… 33        -56.8   -35.1  -59.8 -36.4  -54.9 -31.5  3.18e4  4325\n 2 Bass Strait   62A       146.    -39.5  144.  -41.4  150.  -37.5  1.13e5  4366\n 3 Great Austra… 62        133.    -36.7  118.  -43.6  146.  -31.5  1.33e6  4276\n 4 Tasman Sea    63        161.    -39.7  147.  -50.9  175.  -30    3.34e6  4365\n 5 Mozambique C… 45A        40.9   -19.3   32.4 -26.8   49.2 -10.5  1.39e6  4261\n 6 Savu Sea      48o       122.     -9.48 119.  -10.9  125.   -8.21 1.06e5  4343\n 7 Timor Sea     48i       128.    -11.2  123.  -15.8  133.   -8.18 4.34e5  4344\n 8 Bali Sea      48l       116.     -7.93 114.   -9.00 117.   -7.01 3.99e4  4340\n 9 Coral Sea     64        157.    -18.2  141.  -30.0  170.   -6.79 4.13e6  4364\n10 Flores Sea    48j       120.     -7.51 117.   -8.74 123.   -5.51 1.03e5  4341\n# ℹ 91 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;"
  },
  {
    "objectID": "slides/07d-parallelism.html#noaa-temperature-data-12",
    "href": "slides/07d-parallelism.html#noaa-temperature-data-12",
    "title": "Parallel Processing",
    "section": "NOAA Temperature Data",
    "text": "NOAA Temperature Data\n\n## Rasterize the seas polygons using one of the nc files\n## as a reference grid for the rasterization process\n## They're all on the same grid so it doesn't matter which one\none_raster &lt;- all_fnames[1]\nseas_vect &lt;- terra::vect(seas)\ntmp_tdf_seas &lt;- terra::rast(one_raster)[\"sst\"] |&gt;\n  terra::rotate()\nseas_zonal &lt;- terra::rasterize(seas_vect, tmp_tdf_seas, \"NAME\")"
  },
  {
    "objectID": "slides/07d-parallelism.html#noaa-temperature-data-13",
    "href": "slides/07d-parallelism.html#noaa-temperature-data-13",
    "title": "Parallel Processing",
    "section": "NOAA Temperature Data",
    "text": "NOAA Temperature Data\n\nplot(seas_zonal, legend = FALSE)"
  },
  {
    "objectID": "slides/07d-parallelism.html#pointers-and-wrapping",
    "href": "slides/07d-parallelism.html#pointers-and-wrapping",
    "title": "Parallel Processing",
    "section": "Pointers and wrapping",
    "text": "Pointers and wrapping\nWe’ll need to apply this grid of seas and oceans repeatedly — once for each .nc file — which means it has to get passed to all our worker cores. But it is stored as a pointer, so we can’t do that directly. We need to wrap it:\n\n# If we don't do this it can't be passed around\n# across the processes that future_map() will spawn\nseas_zonal_wrapped &lt;- terra::wrap(seas_zonal)"
  },
  {
    "objectID": "slides/07d-parallelism.html#noaa-temperature-data-14",
    "href": "slides/07d-parallelism.html#noaa-temperature-data-14",
    "title": "Parallel Processing",
    "section": "NOAA Temperature Data",
    "text": "NOAA Temperature Data\nWrite a function very similar to the other one.\n\nprocess_raster_zonal &lt;- function(fnames, var = \"sst\") {\n\n  tdf_seas &lt;- terra::rast(as.character(fnames))[var] |&gt;\n    terra::rotate() |&gt;\n    terra::zonal(terra::unwrap(seas_zonal_wrapped), mean, na.rm = TRUE)\n\n  colnames(tdf_seas) &lt;- c(\"ID\", paste0(\"d_\", terra::time(terra::rast(as.character(fnames))[var])))\n  tdf_seas |&gt;\n    pivot_longer(-ID, names_to = \"date\", values_to = \"sst_wt_mean\")\n\n}"
  },
  {
    "objectID": "slides/07d-parallelism.html#noaa-temperature-data-15",
    "href": "slides/07d-parallelism.html#noaa-temperature-data-15",
    "title": "Parallel Processing",
    "section": "NOAA Temperature Data",
    "text": "NOAA Temperature Data\nTry it on one record:\n\nprocess_raster_zonal(all_fnames[10000])\n\n# A tibble: 101 × 3\n   ID                     date         sst_wt_mean\n   &lt;chr&gt;                  &lt;chr&gt;              &lt;dbl&gt;\n 1 Adriatic Sea           d_2009-01-20       13.5 \n 2 Aegean Sea             d_2009-01-20       15.9 \n 3 Alboran Sea            d_2009-01-20       14.8 \n 4 Andaman or Burma Sea   d_2009-01-20       27.1 \n 5 Arabian Sea            d_2009-01-20       26.6 \n 6 Arafura Sea            d_2009-01-20       29.6 \n 7 Arctic Ocean           d_2009-01-20       -1.74\n 8 Baffin Bay             d_2009-01-20       -1.58\n 9 Balearic (Iberian Sea) d_2009-01-20       14.0 \n10 Bali Sea               d_2009-01-20       28.7 \n# ℹ 91 more rows\n\n\nWe’ll tidy the date later. You can see we get 101 summary records per day."
  },
  {
    "objectID": "slides/07d-parallelism.html#noaa-temperature-data-16",
    "href": "slides/07d-parallelism.html#noaa-temperature-data-16",
    "title": "Parallel Processing",
    "section": "NOAA Temperature Data",
    "text": "NOAA Temperature Data\nTry it on one chunk of records:\n\nprocess_raster_zonal(chunked_fnames[[1]])\n\n# A tibble: 2,525 × 3\n   ID           date         sst_wt_mean\n   &lt;chr&gt;        &lt;chr&gt;              &lt;dbl&gt;\n 1 Adriatic Sea d_1981-09-01        23.0\n 2 Adriatic Sea d_1981-09-02        23.1\n 3 Adriatic Sea d_1981-09-03        22.9\n 4 Adriatic Sea d_1981-09-04        22.9\n 5 Adriatic Sea d_1981-09-05        22.5\n 6 Adriatic Sea d_1981-09-06        22.4\n 7 Adriatic Sea d_1981-09-07        22.4\n 8 Adriatic Sea d_1981-09-08        22.5\n 9 Adriatic Sea d_1981-09-09        22.6\n10 Adriatic Sea d_1981-09-10        22.5\n# ℹ 2,515 more rows"
  },
  {
    "objectID": "slides/07d-parallelism.html#noaa-temperature-data-17",
    "href": "slides/07d-parallelism.html#noaa-temperature-data-17",
    "title": "Parallel Processing",
    "section": "NOAA Temperature Data",
    "text": "NOAA Temperature Data\nNow future_map() it:\n\ntictoc::tic(\"Big op\")\nseameans_df &lt;- future_map(chunked_fnames, process_raster_zonal) |&gt;\n  list_rbind() |&gt;\n  mutate(date = str_remove(date, \"d_\"),\n         date = ymd(date),\n         year = lubridate::year(date),\n         month = lubridate::month(date),\n         day = lubridate::day(date),\n         yrday = lubridate::yday(date),\n         season = season(date)) |&gt;\n  rename(sea = ID)\ntictoc::toc()\n\nBig op: 48.553 sec elapsed"
  },
  {
    "objectID": "slides/07d-parallelism.html#noaa-temperature-data-18",
    "href": "slides/07d-parallelism.html#noaa-temperature-data-18",
    "title": "Parallel Processing",
    "section": "NOAA Temperature Data",
    "text": "NOAA Temperature Data\n\nseameans_df\n\n# A tibble: 1,570,449 × 8\n   sea          date       sst_wt_mean  year month   day yrday season\n   &lt;chr&gt;        &lt;date&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;fct&gt; \n 1 Adriatic Sea 1981-09-01        23.0  1981     9     1   244 Summer\n 2 Adriatic Sea 1981-09-02        23.1  1981     9     2   245 Autumn\n 3 Adriatic Sea 1981-09-03        22.9  1981     9     3   246 Autumn\n 4 Adriatic Sea 1981-09-04        22.9  1981     9     4   247 Autumn\n 5 Adriatic Sea 1981-09-05        22.5  1981     9     5   248 Autumn\n 6 Adriatic Sea 1981-09-06        22.4  1981     9     6   249 Autumn\n 7 Adriatic Sea 1981-09-07        22.4  1981     9     7   250 Autumn\n 8 Adriatic Sea 1981-09-08        22.5  1981     9     8   251 Autumn\n 9 Adriatic Sea 1981-09-09        22.6  1981     9     9   252 Autumn\n10 Adriatic Sea 1981-09-10        22.5  1981     9    10   253 Autumn\n# ℹ 1,570,439 more rows"
  },
  {
    "objectID": "slides/07d-parallelism.html#noaa-thats-more-like-it",
    "href": "slides/07d-parallelism.html#noaa-thats-more-like-it",
    "title": "Parallel Processing",
    "section": "NOAA that’s more like it",
    "text": "NOAA that’s more like it"
  },
  {
    "objectID": "slides/01-overview.html#housekeeping",
    "href": "slides/01-overview.html#housekeeping",
    "title": "Overview",
    "section": "Housekeeping",
    "text": "Housekeeping\n10:30am till 12:30pm US EST each day\n1:30pm to 3:00pm US EST each day\nUse the Zoom chat to ask questions, or raise a hand with"
  },
  {
    "objectID": "slides/01-overview.html#in-between-class-sessions",
    "href": "slides/01-overview.html#in-between-class-sessions",
    "title": "Overview",
    "section": "In between class sessions",
    "text": "In between class sessions"
  },
  {
    "objectID": "slides/01-overview.html#for-a-better-zoom-experience",
    "href": "slides/01-overview.html#for-a-better-zoom-experience",
    "title": "Overview",
    "section": "For a better Zoom experience",
    "text": "For a better Zoom experience\n\n\n\n\n\nIf you’re watching in full-screen view and I’m sharing my screen, then from Zoom’s “View options” menu turn off “Side-by-Side” mode."
  },
  {
    "objectID": "slides/01-overview.html#my-setup-and-yours",
    "href": "slides/01-overview.html#my-setup-and-yours",
    "title": "Overview",
    "section": "My Setup and Yours",
    "text": "My Setup and Yours\nTalking, Slides, and Live-Coding in RStudio\nFollow along with RStudio yourself if you can\nThe course packet is also an RStudio project and the place for your notes"
  },
  {
    "objectID": "slides/01-overview.html#goals-for-this-first-session",
    "href": "slides/01-overview.html#goals-for-this-first-session",
    "title": "Overview",
    "section": "Goals for this first session",
    "text": "Goals for this first session\nSome big-picture motivation & perspective\nGetting familiar with RStudio and its relationship to R\nGetting oriented to R and how it thinks"
  },
  {
    "objectID": "slides/01-overview.html#wrangling-data-is-frustrating",
    "href": "slides/01-overview.html#wrangling-data-is-frustrating",
    "title": "Overview",
    "section": "Wrangling data is frustrating",
    "text": "Wrangling data is frustrating\n\nSad Mac"
  },
  {
    "objectID": "slides/01-overview.html#can-we-make-it-fun",
    "href": "slides/01-overview.html#can-we-make-it-fun",
    "title": "Overview",
    "section": "Can we make it fun?",
    "text": "Can we make it fun?\n\n\n\n\n\nFun data wrangling\n\n\n\nNo."
  },
  {
    "objectID": "slides/01-overview.html#can-we-make-it-fun-1",
    "href": "slides/01-overview.html#can-we-make-it-fun-1",
    "title": "Overview",
    "section": "Can we make it fun?",
    "text": "Can we make it fun?\n\n\n\n\n\nFun data wrangling\n\n\n\n\nNo.\n  ⇦ Not this much fun, at any rate"
  },
  {
    "objectID": "slides/01-overview.html#ok-but-can-we-eliminate-frustration",
    "href": "slides/01-overview.html#ok-but-can-we-eliminate-frustration",
    "title": "Overview",
    "section": "OK but can we eliminate frustration?",
    "text": "OK but can we eliminate frustration?\n\n\n\n\n\nFrustration-free data wrangling\n\n\n\n\nAlso no."
  },
  {
    "objectID": "slides/01-overview.html#ok-but-can-we-eliminate-frustration-1",
    "href": "slides/01-overview.html#ok-but-can-we-eliminate-frustration-1",
    "title": "Overview",
    "section": "OK but can we eliminate frustration?",
    "text": "OK but can we eliminate frustration?\n\n\n\n\n\nFrustration-free data wrangling\n\n\n\n\nAlso no.\n(Sorry.)"
  },
  {
    "objectID": "slides/01-overview.html#we-take-a-broadly-plain-text-approach",
    "href": "slides/01-overview.html#we-take-a-broadly-plain-text-approach",
    "title": "Overview",
    "section": "We take a broadly Plain Text approach",
    "text": "We take a broadly Plain Text approach\n\n\n\n\n\nThe plain person’s guide\n\n\n\n\nUsing R and the Tidyverse can be understood within this broader context.\nThe same principles would apply to, e.g., using Python or similar tools."
  },
  {
    "objectID": "slides/01-overview.html#where-the-action-is",
    "href": "slides/01-overview.html#where-the-action-is",
    "title": "Overview",
    "section": "Where the action is",
    "text": "Where the action is\n\n\n\n\n\niPhone and iPad\n\n\n\n\nTouch-based user interface\nForegrounds a single application\nDislikes multi-tasking*\nHides the file system\n“Laundry basket” model of where things are"
  },
  {
    "objectID": "slides/01-overview.html#multitasking",
    "href": "slides/01-overview.html#multitasking",
    "title": "Overview",
    "section": "*Multitasking",
    "text": "*Multitasking\n\nI mean, “Making different specialized applications and resources work together in the service of a single but multi-dimensional project”, not “Checking Twitter while also listening to a talk and waiting for an update from the school nurse.”"
  },
  {
    "objectID": "slides/01-overview.html#where-statistical-computing-lives",
    "href": "slides/01-overview.html#where-statistical-computing-lives",
    "title": "Overview",
    "section": "Where statistical computing lives",
    "text": "Where statistical computing lives\n\n\n\n\n\nDesktop and laptop\n\n\n\n\nWindows and pointers.\nMulti-tasking, multiple windows.\nExposes and leverages the file system.\nMany specialized tools in concert.\nUnderneath, it’s the 1970s, UNIX, and the command-line."
  },
  {
    "objectID": "slides/01-overview.html#plain-text-tools-for-data-analysis",
    "href": "slides/01-overview.html#plain-text-tools-for-data-analysis",
    "title": "Overview",
    "section": "Plain-Text Tools for Data Analysis",
    "text": "Plain-Text Tools for Data Analysis\n\n\n\n\n\nDesktop and laptop\n\n\n\n\nBetter than they’ve ever been!\nFree! Open! Powerful!\nFriendly community! Many resources!\nBut grounded in a UI paradigm that is increasingly far away from the everyday use of computing devices\nSo why do we use these tools?"
  },
  {
    "objectID": "slides/01-overview.html#office-vs-engineering-approaches",
    "href": "slides/01-overview.html#office-vs-engineering-approaches",
    "title": "Overview",
    "section": "“Office” vs “Engineering” approaches",
    "text": "“Office” vs “Engineering” approaches\nQuestions\n\nWhat is “real” in your project?\nWhat is the final output?\nHow is it produced?\nHow are changes managed?"
  },
  {
    "objectID": "slides/01-overview.html#different-answers",
    "href": "slides/01-overview.html#different-answers",
    "title": "Overview",
    "section": "Different Answers",
    "text": "Different Answers\n\n\nOffice model\n\nFormatted documents are real.\nIntermediate outputs are cut and pasted into documents.\nChanges are tracked inside files.\nFinal output is often in the same format you’ve been working in, e.g. a Word file, or perhaps a PDF."
  },
  {
    "objectID": "slides/01-overview.html#different-answers-1",
    "href": "slides/01-overview.html#different-answers-1",
    "title": "Overview",
    "section": "Different Answers",
    "text": "Different Answers\n\n\nOffice model\n\nFormatted documents are real.\nIntermediate outputs are cut and pasted into documents.\nChanges are tracked inside files.\nFinal output is often in the same format you’ve been working in, e.g. a Word file, or perhaps a PDF.\n\n\nEngineering model\n\nPlain-text files are real.\nIntermediate outputs are produced via code, often inside documents.\nChanges are tracked outside files.\nFinal outputs are assembled programatically and converted to a desired output format."
  },
  {
    "objectID": "slides/01-overview.html#different-strengths-and-weaknesses",
    "href": "slides/01-overview.html#different-strengths-and-weaknesses",
    "title": "Overview",
    "section": "Different strengths and weaknesses",
    "text": "Different strengths and weaknesses\n\n\nOffice model\n\nEveryone knows Word, Excel, or Google Docs.\n“Track changes” is powerful and easy.\nHm, why can’t I remember how I made this figure?\nWhere did this table of results come from? Where did my file go?\nPaper_Final_edits_FINAL_kh-1a.docx"
  },
  {
    "objectID": "slides/01-overview.html#different-strengths-and-weaknesses-1",
    "href": "slides/01-overview.html#different-strengths-and-weaknesses-1",
    "title": "Overview",
    "section": "Different strengths and weaknesses",
    "text": "Different strengths and weaknesses\n\n\nOffice model\n\nEveryone knows Word, Excel, or Google Docs.\n“Track changes” is powerful and easy.\nHm, why can’t I remember how I made this figure?\nWhere did this table of results come from? Where did my file go?\nPaper_Final_edits_FINAL_kh-1a.docx\n\n\nEngineering model\n\nPlain text is universally portable.\nPush button, recreate analysis.\nGaaah, Why can’t I make R do this simple thing?\nThis version control stuff is a pain.\nObject of type 'closure' is not subsettable"
  },
  {
    "objectID": "slides/01-overview.html#each-approach-generates-solutions-to-its-own-problems",
    "href": "slides/01-overview.html#each-approach-generates-solutions-to-its-own-problems",
    "title": "Overview",
    "section": "Each approach generates solutions to its own problems",
    "text": "Each approach generates solutions to its own problems\n\n\nOffice model\n\nMake a suite of applications.\nPut everything on a cloud server, not your computer.\nRely on search to find stuff.\nAllow users to treat documents like plain-text (e.g. Markdown).\nPut more advanced functions back in, somewhere.\n\n\nEngineering model\n\nTry to guess what the user wants and offer hints or suggestions.\nTalk to version control via a GUI client.\nMake help and code assistance easily available.\nAllow users treat their code more like a formatted document."
  },
  {
    "objectID": "slides/01-overview.html#rstudio-is-an-ide-for-r",
    "href": "slides/01-overview.html#rstudio-is-an-ide-for-r",
    "title": "Overview",
    "section": "RStudio is an IDE for R",
    "text": "RStudio is an IDE for R"
  },
  {
    "objectID": "slides/01-overview.html#a-kitchen-is-an-ide-for-meals",
    "href": "slides/01-overview.html#a-kitchen-is-an-ide-for-meals",
    "title": "Overview",
    "section": "A kitchen is an IDE for Meals",
    "text": "A kitchen is an IDE for Meals"
  },
  {
    "objectID": "slides/01-overview.html#r-and-rstudio",
    "href": "slides/01-overview.html#r-and-rstudio",
    "title": "Overview",
    "section": "R and RStudio",
    "text": "R and RStudio\n\nRStudio at startup"
  },
  {
    "objectID": "slides/01-overview.html#your-code-is-whats-real-in-your-project",
    "href": "slides/01-overview.html#your-code-is-whats-real-in-your-project",
    "title": "Overview",
    "section": "Your code is what’s real in your project",
    "text": "Your code is what’s real in your project"
  },
  {
    "objectID": "slides/01-overview.html#consider-not-showing-output-inline",
    "href": "slides/01-overview.html#consider-not-showing-output-inline",
    "title": "Overview",
    "section": "Consider not showing output inline",
    "text": "Consider not showing output inline"
  },
  {
    "objectID": "slides/07c-databases.html#load-the-packages-as-always",
    "href": "slides/07c-databases.html#load-the-packages-as-always",
    "title": "Wrangling with Databases",
    "section": "Load the packages, as always",
    "text": "Load the packages, as always\n\nlibrary(here)      # manage file paths\nlibrary(socviz)    # data and some useful functions\nlibrary(tidyverse) # your friend and mine\nlibrary(gapminder) # inescapable\n\nlibrary(DBI) # DBMS interface layer\nlibrary(duckdb) # Local database server"
  },
  {
    "objectID": "slides/07c-databases.html#what-were-talking-about",
    "href": "slides/07c-databases.html#what-were-talking-about",
    "title": "Wrangling with Databases",
    "section": "What we’re talking about",
    "text": "What we’re talking about\nMostly in this case, datasets that are nominally larger than your laptop’s memory.\nThere are other more specific uses, and truly huge data is beyond the scope of the course. But we can look at methods for working with data that’s “big” for all practical purposes."
  },
  {
    "objectID": "slides/07c-databases.html#databases",
    "href": "slides/07c-databases.html#databases",
    "title": "Wrangling with Databases",
    "section": "Databases",
    "text": "Databases\nWhen we’re working with data in the social sciences the basic case is a single table that we’re going to do something with, like run a regression or make a plot.\n\ngapminder\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\nBut the bigger a dataset gets, the more we have to think about whether we really want (or even can have) all of it in memory all the time."
  },
  {
    "objectID": "slides/07c-databases.html#databases-1",
    "href": "slides/07c-databases.html#databases-1",
    "title": "Wrangling with Databases",
    "section": "Databases",
    "text": "Databases\nIn addition, much of what we want to do with a specific dataset will involve actually acting on some relatively small subset of it.\n\ngapminder |&gt; \n  select(gdpPercap, lifeExp)\n\n# A tibble: 1,704 × 2\n   gdpPercap lifeExp\n       &lt;dbl&gt;   &lt;dbl&gt;\n 1      779.    28.8\n 2      821.    30.3\n 3      853.    32.0\n 4      836.    34.0\n 5      740.    36.1\n 6      786.    38.4\n 7      978.    39.9\n 8      852.    40.8\n 9      649.    41.7\n10      635.    41.8\n# ℹ 1,694 more rows"
  },
  {
    "objectID": "slides/07c-databases.html#databases-2",
    "href": "slides/07c-databases.html#databases-2",
    "title": "Wrangling with Databases",
    "section": "Databases",
    "text": "Databases\nIn addition, much of what we want to do with a specific dataset will involve actually acting on some relatively small subset of it.\n\ngapminder |&gt; \n  filter(continent == \"Europe\", \n         year == 1977)\n\n# A tibble: 30 × 6\n   country                continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;                  &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Albania                Europe     1977    68.9  2509048     3533.\n 2 Austria                Europe     1977    72.2  7568430    19749.\n 3 Belgium                Europe     1977    72.8  9821800    19118.\n 4 Bosnia and Herzegovina Europe     1977    69.9  4086000     3528.\n 5 Bulgaria               Europe     1977    70.8  8797022     7612.\n 6 Croatia                Europe     1977    70.6  4318673    11305.\n 7 Czech Republic         Europe     1977    70.7 10161915    14800.\n 8 Denmark                Europe     1977    74.7  5088419    20423.\n 9 Finland                Europe     1977    72.5  4738902    15605.\n10 France                 Europe     1977    73.8 53165019    18293.\n# ℹ 20 more rows"
  },
  {
    "objectID": "slides/07c-databases.html#databases-3",
    "href": "slides/07c-databases.html#databases-3",
    "title": "Wrangling with Databases",
    "section": "Databases",
    "text": "Databases\nIn addition, much of what we want to do with a specific dataset will involve actually acting on some relatively small subset of it.\n\ngapminder |&gt; \n  group_by(continent) |&gt; \n  summarize(lifeExp = mean(lifeExp), \n            pop = mean(pop), \n            gdpPercap = mean(gdpPercap))\n\n# A tibble: 5 × 4\n  continent lifeExp       pop gdpPercap\n  &lt;fct&gt;       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 Africa       48.9  9916003.     2194.\n2 Americas     64.7 24504795.     7136.\n3 Asia         60.1 77038722.     7902.\n4 Europe       71.9 17169765.    14469.\n5 Oceania      74.3  8874672.    18622."
  },
  {
    "objectID": "slides/07c-databases.html#databases-4",
    "href": "slides/07c-databases.html#databases-4",
    "title": "Wrangling with Databases",
    "section": "Databases",
    "text": "Databases\nEfficiently storing and querying really large quantities of data is the realm of the database and of Structured Query Languages.\nAs with everything in information technology there is a long and interesting story about various efforts to come up with a good theory of data storage and retrieval, and efficient algorithms for it. If you are interested, watch e.g. this lecture from a DBMS course from about twelve minutes in."
  },
  {
    "objectID": "slides/07c-databases.html#wheres-the-database",
    "href": "slides/07c-databases.html#wheres-the-database",
    "title": "Wrangling with Databases",
    "section": "Where’s the database?",
    "text": "Where’s the database?\nLocal or remote?\nOn disk or in memory?\nThe important thing from the database admin’s point of view is that the data is stored efficiently, that we have a means of querying it, and those queries rely on some search-and-retrieval method that’s really fast.\nThere’s no free lunch. We want storage methods to be efficient and queries to be fast because the datasets are gonna be gigantic, and accessing them will take time."
  },
  {
    "objectID": "slides/07c-databases.html#database-layouts",
    "href": "slides/07c-databases.html#database-layouts",
    "title": "Wrangling with Databases",
    "section": "Database layouts",
    "text": "Database layouts\nA real database is usually not a single giant table. Instead it is more like a list of tables that are partially connected through keys shared between tables. Those keys are indexed and the tables are stored in a tree-like way that makes searching much faster than just going down each row and looking for matches.\nFrom a social science perspective, putting things in different tables might be thought of a matter of logically organizing entities at different units of observation. Querying tables is a matter of assembling tables ad hoc at various units of analysis."
  },
  {
    "objectID": "slides/07c-databases.html#database-layouts-1",
    "href": "slides/07c-databases.html#database-layouts-1",
    "title": "Wrangling with Databases",
    "section": "Database layouts",
    "text": "Database layouts\n\n\ngapminder_xtra &lt;- read_csv(here(\"data\", \"gapminder_xtra.csv\"))\ngapminder_xtra\n\n# A tibble: 1,704 × 13\n   country     continent  year lifeExp      pop gdpPercap area_pct pop_pct\n   &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.     29.8    59.4\n 2 Afghanistan Asia       1957    30.3  9240934      821.     29.8    59.4\n 3 Afghanistan Asia       1962    32.0 10267083      853.     29.8    59.4\n 4 Afghanistan Asia       1967    34.0 11537966      836.     29.8    59.4\n 5 Afghanistan Asia       1972    36.1 13079460      740.     29.8    59.4\n 6 Afghanistan Asia       1977    38.4 14880372      786.     29.8    59.4\n 7 Afghanistan Asia       1982    39.9 12881816      978.     29.8    59.4\n 8 Afghanistan Asia       1987    40.8 13867957      852.     29.8    59.4\n 9 Afghanistan Asia       1992    41.7 16317921      649.     29.8    59.4\n10 Afghanistan Asia       1997    41.8 22227415      635.     29.8    59.4\n# ℹ 1,694 more rows\n# ℹ 5 more variables: gm_countries &lt;dbl&gt;, country_fr &lt;chr&gt;, iso2 &lt;chr&gt;,\n#   iso3 &lt;chr&gt;, number &lt;dbl&gt;\n\n\n\nAgain, in social science terms, the redundancies are annoying in part because they apply to different levels or units of observation. From a Database point of view they are also bad because they allow the possibility of a variety of errors or anomalies when updating the table, and they make things really inefficient for search and querying."
  },
  {
    "objectID": "slides/07c-databases.html#database-normalization",
    "href": "slides/07c-databases.html#database-normalization",
    "title": "Wrangling with Databases",
    "section": "Database normalization",
    "text": "Database normalization\nA hierarchical set of rules and criteria for ensuring the integrity of data stored across multiple tables and for reducing redundancy in data storage.\nTries to elminate various sources of error — so-called Insertion, Update, and Deletion anomalies — particularly ones that will pollute, damage, or corrupt things beyond the specific change.\nRedundancy and error are minimized by breaking the database up into a series of linked or related tables. Hence the term “relational database”"
  },
  {
    "objectID": "slides/07c-databases.html#normal-forms",
    "href": "slides/07c-databases.html#normal-forms",
    "title": "Wrangling with Databases",
    "section": "Normal Forms",
    "text": "Normal Forms\n0NF: No duplicate rows!\n1NF: Using row order to convey information is not allowed; Mixing data types in the same column is not allowed; No table without a primary key is not allowed. Primary keys can be defined by more than one column though. No “repeating groups”.\n2NF: Each non-key attribute must depend on the entire primary key\n3NF: Every non-key attribute should depend wholly and only on the key.\nThink of these rules in connection with ideas about “tidy data” that we’ve already covered.\n\nGood S/O answer: https://stackoverflow.com/questions/23194292/normalization-what-does-repeating-groups-mean The term “repeating group” originally meant the concept in CODASYL and COBOL based languages where a single field could contain an array of repeating values. When E.F.Codd described his First Normal Form that was what he meant by a repeating group. The concept does not exist in any modern relational or SQL-based DBMS.\nThe term “repeating group” has also come to be used informally and imprecisely by database designers to mean a repeating set of columns, meaning a collection of columns containing similar kinds of values in a table. This is different to its original meaning in relation to 1NF. For instance in the case of a table called Families with columns named Parent1, Parent2, Child1, Child2, Child3, … etc the collection of Child N columns is sometimes referred to as a repeating group and assumed to be in violation of 1NF even though it is not a repeating group in the sense that Codd intended.\nThis latter sense of a so-called repeating group is not technically a violation of 1NF if each attribute is only single-valued. The attributes themselves do not contain repeating values and therefore there is no violation of 1NF for that reason. Such a design is often considered an anti-pattern however because it constrains the table to a predetermined fixed number of values (maximum N children in a family) and because it forces queries and other business logic to be repeated for each of the columns. In other words it violates the “DRY” principle of design. Because it is generally considered poor design it suits database designers and sometimes even teachers to refer to repeated columns of this kind as a “repeating group” and a violation of the spirit of the First Normal Form.\nSeparate\n1NF : Your table is organized as an unordered set of data, and there are no repeating columns.\n2NF: You don’t repeat data in one column of your table because of another column. [nb repeating groups]\n3NF: Every column in your table relates only to your table’s key – you wouldn’t have a column in a table that describes another column in your table which isn’t the key."
  },
  {
    "objectID": "slides/07c-databases.html#database-normalization-1",
    "href": "slides/07c-databases.html#database-normalization-1",
    "title": "Wrangling with Databases",
    "section": "Database normalization",
    "text": "Database normalization\n\ngapminder_xtra\n\n# A tibble: 1,704 × 13\n   country     continent  year lifeExp      pop gdpPercap area_pct pop_pct\n   &lt;chr&gt;       &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.     29.8    59.4\n 2 Afghanistan Asia       1957    30.3  9240934      821.     29.8    59.4\n 3 Afghanistan Asia       1962    32.0 10267083      853.     29.8    59.4\n 4 Afghanistan Asia       1967    34.0 11537966      836.     29.8    59.4\n 5 Afghanistan Asia       1972    36.1 13079460      740.     29.8    59.4\n 6 Afghanistan Asia       1977    38.4 14880372      786.     29.8    59.4\n 7 Afghanistan Asia       1982    39.9 12881816      978.     29.8    59.4\n 8 Afghanistan Asia       1987    40.8 13867957      852.     29.8    59.4\n 9 Afghanistan Asia       1992    41.7 16317921      649.     29.8    59.4\n10 Afghanistan Asia       1997    41.8 22227415      635.     29.8    59.4\n# ℹ 1,694 more rows\n# ℹ 5 more variables: gm_countries &lt;dbl&gt;, country_fr &lt;chr&gt;, iso2 &lt;chr&gt;,\n#   iso3 &lt;chr&gt;, number &lt;dbl&gt;"
  },
  {
    "objectID": "slides/07c-databases.html#database-normalization-2",
    "href": "slides/07c-databases.html#database-normalization-2",
    "title": "Wrangling with Databases",
    "section": "Database normalization",
    "text": "Database normalization\n\ngapminder\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows"
  },
  {
    "objectID": "slides/07c-databases.html#database-normalization-3",
    "href": "slides/07c-databases.html#database-normalization-3",
    "title": "Wrangling with Databases",
    "section": "Database normalization",
    "text": "Database normalization\n\n\ncontinent_tbl &lt;- read_tsv(here(\"data\", \"continent_tab.tsv\")) \ncountry_tbl &lt;- read_tsv(here(\"data\", \"country_tab.tsv\"))\nyear_tbl &lt;-  read_tsv(here(\"data\", \"year_tab.tsv\"))  \n  \ncontinent_tbl\n\n# A tibble: 5 × 5\n  continent_id continent area_pct pop_pct gm_countries\n         &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt;   &lt;dbl&gt;        &lt;dbl&gt;\n1            1 Africa        20.3    17.6           52\n2            2 Americas      28.1    13             25\n3            3 Asia          29.8    59.4           33\n4            4 Europe         6.7     9.4           30\n5            5 Oceania        5.7     0.6            2\n\ngapminder\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows"
  },
  {
    "objectID": "slides/07c-databases.html#database-normalization-4",
    "href": "slides/07c-databases.html#database-normalization-4",
    "title": "Wrangling with Databases",
    "section": "Database normalization",
    "text": "Database normalization\n\n\ncontinent_tbl\n\n# A tibble: 5 × 5\n  continent_id continent area_pct pop_pct gm_countries\n         &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt;   &lt;dbl&gt;        &lt;dbl&gt;\n1            1 Africa        20.3    17.6           52\n2            2 Americas      28.1    13             25\n3            3 Asia          29.8    59.4           33\n4            4 Europe         6.7     9.4           30\n5            5 Oceania        5.7     0.6            2\n\ncountry_tbl\n\n# A tibble: 249 × 8\n   country_id continent_id country     iso_country country_fr iso2  iso3  number\n        &lt;dbl&gt;        &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n 1          1            3 Afghanistan Afghanistan Afghanist… AF    AFG        4\n 2          2            4 Albania     Albania     Albanie (… AL    ALB        8\n 3          3            1 Algeria     Algeria     Algérie (… DZ    DZA       12\n 4          4           NA &lt;NA&gt;        American S… Samoa amé… AS    ASM       16\n 5          5           NA &lt;NA&gt;        Andorra     Andorre (… AD    AND       20\n 6          6            1 Angola      Angola      Angola (l… AO    AGO       24\n 7          7           NA Anguilla    Anguilla    Anguilla   AI    AIA      660\n 8          8           NA Antarctica  Antarctica  Antarctiq… AQ    ATA       10\n 9          9           NA Antigua an… Antigua an… Antigua-e… AG    ATG       28\n10         10            2 Argentina   Argentina   Argentine… AR    ARG       32\n# ℹ 239 more rows"
  },
  {
    "objectID": "slides/07c-databases.html#database-normalization-5",
    "href": "slides/07c-databases.html#database-normalization-5",
    "title": "Wrangling with Databases",
    "section": "Database normalization",
    "text": "Database normalization\n\n\ncountry_tbl\n\n# A tibble: 249 × 8\n   country_id continent_id country     iso_country country_fr iso2  iso3  number\n        &lt;dbl&gt;        &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt;\n 1          1            3 Afghanistan Afghanistan Afghanist… AF    AFG        4\n 2          2            4 Albania     Albania     Albanie (… AL    ALB        8\n 3          3            1 Algeria     Algeria     Algérie (… DZ    DZA       12\n 4          4           NA &lt;NA&gt;        American S… Samoa amé… AS    ASM       16\n 5          5           NA &lt;NA&gt;        Andorra     Andorre (… AD    AND       20\n 6          6            1 Angola      Angola      Angola (l… AO    AGO       24\n 7          7           NA Anguilla    Anguilla    Anguilla   AI    AIA      660\n 8          8           NA Antarctica  Antarctica  Antarctiq… AQ    ATA       10\n 9          9           NA Antigua an… Antigua an… Antigua-e… AG    ATG       28\n10         10            2 Argentina   Argentina   Argentine… AR    ARG       32\n# ℹ 239 more rows\n\nyear_tbl\n\n# A tibble: 1,704 × 5\n    year country_id lifeExp      pop gdpPercap\n   &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1  1952          1    28.8  8425333      779.\n 2  1957          1    30.3  9240934      821.\n 3  1962          1    32.0 10267083      853.\n 4  1967          1    34.0 11537966      836.\n 5  1972          1    36.1 13079460      740.\n 6  1977          1    38.4 14880372      786.\n 7  1982          1    39.9 12881816      978.\n 8  1987          1    40.8 13867957      852.\n 9  1992          1    41.7 16317921      649.\n10  1997          1    41.8 22227415      635.\n# ℹ 1,694 more rows"
  },
  {
    "objectID": "slides/07c-databases.html#the-main-idea",
    "href": "slides/07c-databases.html#the-main-idea",
    "title": "Wrangling with Databases",
    "section": "The main idea",
    "text": "The main idea\nUltimately, we query databases with SQL. There are several varieties, because there are a variety of database systems and each has their own wrinkles and quirks.\nWe try to abstract away from some of those quirk by using a DBI (DataBase Interface) layer, which is a generic set of commands for talking to some database. It’s analogous to an API.\nWe also need to use a package for the DBMS we’re talking to. It translates DBI instructions into the specific dialect the DBMS speaks."
  },
  {
    "objectID": "slides/07c-databases.html#talking-to-databases-1",
    "href": "slides/07c-databases.html#talking-to-databases-1",
    "title": "Wrangling with Databases",
    "section": "Talking to databases",
    "text": "Talking to databases\nSome databases are small, and some are far away.\nClient-server databases are like websites, serving up responses to queries. The database lives on a machine somewhere in the building, or on campus or whatever.\nCloud DBMSs are like this, too, except the database lives on a machine in someone else’s building.\nIn-process DBMSs live and run on your laptop. We’ll use one of these, duckdb for examples here."
  },
  {
    "objectID": "slides/07c-databases.html#talking-to-databases-2",
    "href": "slides/07c-databases.html#talking-to-databases-2",
    "title": "Wrangling with Databases",
    "section": "Talking to databases",
    "text": "Talking to databases\nWe need to open a connection to a database before talking to it. Conventionally this is called con.\nOnce connected, we ask it questions. Either we use functions or packages designed to translate our R / dplyr syntax into SQL, or we use functions to pass SQL queries on directly.\nWe try to minimize the amount of time we are actually making the database do a lot of work.\nThe key thing is that when working with databases our queries are lazy — they don’t actually do anything on the whole database unless its strictly necessary or they’re explicitly told to."
  },
  {
    "objectID": "slides/07c-databases.html#the-nice-example",
    "href": "slides/07c-databases.html#the-nice-example",
    "title": "Wrangling with Databases",
    "section": "The nice example",
    "text": "The nice example\nWhere everything is lovely and clean. Thanks to Grant McDermott for the following example."
  },
  {
    "objectID": "slides/07c-databases.html#duckdb-and-dbi",
    "href": "slides/07c-databases.html#duckdb-and-dbi",
    "title": "Wrangling with Databases",
    "section": "duckdb and DBI",
    "text": "duckdb and DBI\n\n# library(DBI)\n\ncon &lt;- dbConnect(duckdb::duckdb(), path = \":memory:\")\n\nHere we open a connection to an in-memory duckdb database. It’s empty. We’re going to populate it with data from nycflights."
  },
  {
    "objectID": "slides/07c-databases.html#duckdb-and-dbi-1",
    "href": "slides/07c-databases.html#duckdb-and-dbi-1",
    "title": "Wrangling with Databases",
    "section": "duckdb and DBI",
    "text": "duckdb and DBI\n\ncopy_to(\n  dest = con, \n  df = nycflights13::flights, \n  name = \"flights\",\n  temporary = FALSE, \n  indexes = list(\n    c(\"year\", \"month\", \"day\"), \n    \"carrier\", \n    \"tailnum\",\n    \"dest\"\n    )\n  )\n\nRemember, keys and indexes are what make databases fast."
  },
  {
    "objectID": "slides/07c-databases.html#make-a-lazy-tibble-from-it",
    "href": "slides/07c-databases.html#make-a-lazy-tibble-from-it",
    "title": "Wrangling with Databases",
    "section": "Make a lazy tibble from it",
    "text": "Make a lazy tibble from it\nThis says “go to con and get the ‘flights’ table in it, and pretend it’s a tibble called flights_db.\n\nflights_db &lt;- tbl(con, \"flights\")\n\nflights_db\n\n# Source:   table&lt;flights&gt; [?? x 19]\n# Database: DuckDB v1.1.0 [root@Darwin 24.0.0:R 4.4.1/:memory:]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "slides/07c-databases.html#run-some-dplyr-like-queries",
    "href": "slides/07c-databases.html#run-some-dplyr-like-queries",
    "title": "Wrangling with Databases",
    "section": "Run some dplyr-like queries",
    "text": "Run some dplyr-like queries\n\nflights_db |&gt; select(year:day, dep_delay, arr_delay)\n\n# Source:   SQL [?? x 5]\n# Database: DuckDB v1.1.0 [root@Darwin 24.0.0:R 4.4.1/:memory:]\n    year month   day dep_delay arr_delay\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1  2013     1     1         2        11\n 2  2013     1     1         4        20\n 3  2013     1     1         2        33\n 4  2013     1     1        -1       -18\n 5  2013     1     1        -6       -25\n 6  2013     1     1        -4        12\n 7  2013     1     1        -5        19\n 8  2013     1     1        -3       -14\n 9  2013     1     1        -3        -8\n10  2013     1     1        -2         8\n# ℹ more rows"
  },
  {
    "objectID": "slides/07c-databases.html#run-some-dplyr-like-queries-1",
    "href": "slides/07c-databases.html#run-some-dplyr-like-queries-1",
    "title": "Wrangling with Databases",
    "section": "Run some dplyr-like queries",
    "text": "Run some dplyr-like queries\n\nflights_db |&gt; filter(dep_delay &gt; 240) \n\n# Source:   SQL [?? x 19]\n# Database: DuckDB v1.1.0 [root@Darwin 24.0.0:R 4.4.1/:memory:]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      848           1835       853     1001           1950\n 2  2013     1     1     1815           1325       290     2120           1542\n 3  2013     1     1     1842           1422       260     1958           1535\n 4  2013     1     1     2115           1700       255     2330           1920\n 5  2013     1     1     2205           1720       285       46           2040\n 6  2013     1     1     2343           1724       379      314           1938\n 7  2013     1     2     1332            904       268     1616           1128\n 8  2013     1     2     1412            838       334     1710           1147\n 9  2013     1     2     1607           1030       337     2003           1355\n10  2013     1     2     2131           1512       379     2340           1741\n# ℹ more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "slides/07c-databases.html#run-some-dplyr-like-queries-2",
    "href": "slides/07c-databases.html#run-some-dplyr-like-queries-2",
    "title": "Wrangling with Databases",
    "section": "Run some dplyr-like queries",
    "text": "Run some dplyr-like queries\n\nflights_db |&gt;\n  group_by(dest) |&gt;\n  summarise(mean_dep_delay = mean(dep_delay))\n\n# Source:   SQL [?? x 2]\n# Database: DuckDB v1.1.0 [root@Darwin 24.0.0:R 4.4.1/:memory:]\n   dest  mean_dep_delay\n   &lt;chr&gt;          &lt;dbl&gt;\n 1 CLT             9.22\n 2 MDW            18.6 \n 3 HOU            14.3 \n 4 SDF            16.4 \n 5 LAS             9.42\n 6 PHX            10.4 \n 7 IAH            10.8 \n 8 SYR            14.4 \n 9 CAK            20.8 \n10 BDL            17.7 \n# ℹ more rows"
  },
  {
    "objectID": "slides/07c-databases.html#lazy-lazy-lazy",
    "href": "slides/07c-databases.html#lazy-lazy-lazy",
    "title": "Wrangling with Databases",
    "section": "Lazy, lazy, lazy",
    "text": "Lazy, lazy, lazy\n\ntailnum_delay_db &lt;-  \n  flights_db |&gt; \n  group_by(tailnum) |&gt;\n  summarise(\n    mean_dep_delay = mean(dep_delay),\n    mean_arr_delay = mean(arr_delay),\n    n = n()) |&gt;\n  filter(n &gt; 100) |&gt; \n  arrange(desc(mean_arr_delay))\n\nThis doesn’t touch the database."
  },
  {
    "objectID": "slides/07c-databases.html#lazy-lazy-lazy-1",
    "href": "slides/07c-databases.html#lazy-lazy-lazy-1",
    "title": "Wrangling with Databases",
    "section": "Lazy, lazy, lazy",
    "text": "Lazy, lazy, lazy\nEven when we ask to look at it, it just does the absolute minimum required.\n\ntailnum_delay_db\n\n# Source:     SQL [?? x 4]\n# Database:   DuckDB v1.1.0 [root@Darwin 24.0.0:R 4.4.1/:memory:]\n# Ordered by: desc(mean_arr_delay)\n   tailnum mean_dep_delay mean_arr_delay     n\n   &lt;chr&gt;            &lt;dbl&gt;          &lt;dbl&gt; &lt;dbl&gt;\n 1 N11119            32.6           30.3   148\n 2 N16919            32.4           29.9   251\n 3 N14998            29.4           27.9   230\n 4 N15910            29.3           27.6   280\n 5 N13123            29.6           26.0   121\n 6 N11192            27.5           25.9   154\n 7 N14950            26.2           25.3   219\n 8 N21130            27.0           25.0   126\n 9 N24128            24.8           24.9   129\n10 N22971            26.5           24.7   230\n# ℹ more rows"
  },
  {
    "objectID": "slides/07c-databases.html#when-ready-use-collect",
    "href": "slides/07c-databases.html#when-ready-use-collect",
    "title": "Wrangling with Databases",
    "section": "When ready, use collect()",
    "text": "When ready, use collect()\n\ntailnum_delay &lt;- \n  tailnum_delay_db |&gt;  \n  collect()\n\ntailnum_delay\n\n# A tibble: 1,201 × 4\n   tailnum mean_dep_delay mean_arr_delay     n\n   &lt;chr&gt;            &lt;dbl&gt;          &lt;dbl&gt; &lt;dbl&gt;\n 1 N11119            32.6           30.3   148\n 2 N16919            32.4           29.9   251\n 3 N14998            29.4           27.9   230\n 4 N15910            29.3           27.6   280\n 5 N13123            29.6           26.0   121\n 6 N11192            27.5           25.9   154\n 7 N14950            26.2           25.3   219\n 8 N21130            27.0           25.0   126\n 9 N24128            24.8           24.9   129\n10 N22971            26.5           24.7   230\n# ℹ 1,191 more rows\n\n\nNow it exists for realsies."
  },
  {
    "objectID": "slides/07c-databases.html#joins",
    "href": "slides/07c-databases.html#joins",
    "title": "Wrangling with Databases",
    "section": "Joins",
    "text": "Joins\nDatabase systems will have more than one table. We query and join them. The idea is that getting the DBMS to do this will be way faster and more memory-efficient than trying to get dplyr to do it."
  },
  {
    "objectID": "slides/07c-databases.html#joins-1",
    "href": "slides/07c-databases.html#joins-1",
    "title": "Wrangling with Databases",
    "section": "Joins",
    "text": "Joins\n\n## Copy over the \"planes\" dataset to the same \"con\" DuckDB connection.\ncopy_to(\n    dest = con, \n    df = nycflights13::planes, \n    name = \"planes\",\n    temporary = FALSE, \n    indexes = \"tailnum\"\n    )\n\n## List tables in our \"con\" database connection (i.e. now \"flights\" and \"planes\")\ndbListTables(con)\n\n[1] \"flights\" \"planes\" \n\n## Reference from dplyr\nplanes_db &lt;-  tbl(con, 'planes')\n\nSee what we did there? It’s like con the database connection has a list of tables in it."
  },
  {
    "objectID": "slides/07c-databases.html#joins-2",
    "href": "slides/07c-databases.html#joins-2",
    "title": "Wrangling with Databases",
    "section": "Joins",
    "text": "Joins\n\n# Still not done for realsies!\nleft_join(\n    flights_db,\n    planes_db %&gt;% rename(year_built = year),\n    by = \"tailnum\" ## Important: Be specific about the joining column\n) |&gt; \n    select(year, month, day, dep_time, arr_time, carrier, flight, tailnum,\n           year_built, type, model) \n\n# Source:   SQL [?? x 11]\n# Database: DuckDB v1.1.0 [root@Darwin 24.0.0:R 4.4.1/:memory:]\n    year month   day dep_time arr_time carrier flight tailnum year_built type   \n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;    &lt;int&gt; &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;        &lt;int&gt; &lt;chr&gt;  \n 1  2013     6    26      557      811 DL         461 N693DL        1998 Fixed …\n 2  2013     6    26      558      746 EV        4424 N19966        1999 Fixed …\n 3  2013     6    26      558      704 EV        6177 N34111        2002 Fixed …\n 4  2013     6    26      600      739 DL         731 N319NB        2000 Fixed …\n 5  2013     6    26      601      852 UA         684 N809UA        1998 Fixed …\n 6  2013     6    26      601      728 DL        1279 N328NB        2001 Fixed …\n 7  2013     6    26      602      850 UA        1691 N34137        1999 Fixed …\n 8  2013     6    26      604      734 US        1447 N117UW        2000 Fixed …\n 9  2013     6    26      605     1047 WN        3574 N790SW        2000 Fixed …\n10  2013     6    26      606      804 MQ        3351 N711MQ        1976 Fixed …\n# ℹ more rows\n# ℹ 1 more variable: model &lt;chr&gt;"
  },
  {
    "objectID": "slides/07c-databases.html#finishing-up",
    "href": "slides/07c-databases.html#finishing-up",
    "title": "Wrangling with Databases",
    "section": "Finishing up",
    "text": "Finishing up\nClose your connection!\n\ndbDisconnect(con)"
  },
  {
    "objectID": "slides/07c-databases.html#this-one-is-messier",
    "href": "slides/07c-databases.html#this-one-is-messier",
    "title": "Wrangling with Databases",
    "section": "This one is messier",
    "text": "This one is messier\nI’m not going to do it on the slides. We’ll try to process a pretty big data file on a machine of modest proportions."
  },
  {
    "objectID": "slides/07b-iterating-safely.html#load-the-packages-as-always",
    "href": "slides/07b-iterating-safely.html#load-the-packages-as-always",
    "title": "Iterating Safely",
    "section": "Load the packages, as always",
    "text": "Load the packages, as always\n\nlibrary(here)      # manage file paths\nlibrary(socviz)    # data and some useful functions\nlibrary(tidyverse) # your friend and mine"
  },
  {
    "objectID": "slides/07b-iterating-safely.html#additional-libraries",
    "href": "slides/07b-iterating-safely.html#additional-libraries",
    "title": "Iterating Safely",
    "section": "Additional libraries",
    "text": "Additional libraries\n\nlibrary(survey)\nlibrary(srvyr)\nlibrary(broom)\nlibrary(gssr) # https://kjhealy.github.io/gssr"
  },
  {
    "objectID": "slides/07b-iterating-safely.html#the-complete-gss",
    "href": "slides/07b-iterating-safely.html#the-complete-gss",
    "title": "Iterating Safely",
    "section": "The complete GSS",
    "text": "The complete GSS\n\ndata(gss_all)\n\ngss_all\n\n# A tibble: 72,390 × 6,694\n   year         id wrkstat    hrs1        hrs2        evwork      occ   prestige\n   &lt;dbl+lbl&gt; &lt;dbl&gt; &lt;dbl+lbl&gt;  &lt;dbl+lbl&gt;   &lt;dbl+lbl&gt;   &lt;dbl+lbl&gt;   &lt;dbl&gt; &lt;dbl+lb&gt;\n 1 1972          1 1 [workin… NA(i) [iap] NA(i) [iap] NA(i) [iap] 205   50      \n 2 1972          2 5 [retire… NA(i) [iap] NA(i) [iap]     1 [yes] 441   45      \n 3 1972          3 2 [workin… NA(i) [iap] NA(i) [iap] NA(i) [iap] 270   44      \n 4 1972          4 1 [workin… NA(i) [iap] NA(i) [iap] NA(i) [iap]   1   57      \n 5 1972          5 7 [keepin… NA(i) [iap] NA(i) [iap]     1 [yes] 385   40      \n 6 1972          6 1 [workin… NA(i) [iap] NA(i) [iap] NA(i) [iap] 281   49      \n 7 1972          7 1 [workin… NA(i) [iap] NA(i) [iap] NA(i) [iap] 522   41      \n 8 1972          8 1 [workin… NA(i) [iap] NA(i) [iap] NA(i) [iap] 314   36      \n 9 1972          9 2 [workin… NA(i) [iap] NA(i) [iap] NA(i) [iap] 912   26      \n10 1972         10 1 [workin… NA(i) [iap] NA(i) [iap] NA(i) [iap] 984   18      \n# ℹ 72,380 more rows\n# ℹ 6,686 more variables: wrkslf &lt;dbl+lbl&gt;, wrkgovt &lt;dbl+lbl&gt;,\n#   commute &lt;dbl+lbl&gt;, industry &lt;dbl+lbl&gt;, occ80 &lt;dbl+lbl&gt;, prestg80 &lt;dbl+lbl&gt;,\n#   indus80 &lt;dbl+lbl&gt;, indus07 &lt;dbl+lbl&gt;, occonet &lt;dbl+lbl&gt;, found &lt;dbl+lbl&gt;,\n#   occ10 &lt;dbl+lbl&gt;, occindv &lt;dbl+lbl&gt;, occstatus &lt;dbl+lbl&gt;, occtag &lt;dbl+lbl&gt;,\n#   prestg10 &lt;dbl+lbl&gt;, prestg105plus &lt;dbl+lbl&gt;, indus10 &lt;dbl+lbl&gt;,\n#   indstatus &lt;dbl+lbl&gt;, indtag &lt;dbl+lbl&gt;, marital &lt;dbl+lbl&gt;, …"
  },
  {
    "objectID": "slides/07b-iterating-safely.html#set-up-our-analysis",
    "href": "slides/07b-iterating-safely.html#set-up-our-analysis",
    "title": "Iterating Safely",
    "section": "Set up our analysis",
    "text": "Set up our analysis\n\ncont_vars &lt;- c(\"year\", \"id\", \"ballot\", \"age\")\ncat_vars &lt;- c(\"race\", \"sex\", \"fefam\")\nwt_vars &lt;- c(\"vpsu\",\n             \"vstrat\",\n             \"oversamp\",\n             \"formwt\",              # weight to deal with experimental randomization\n             \"wtssall\",             # main weight variable\n             \"sampcode\",            # sampling error code\n             \"sample\")              # sampling frame and method\nmy_vars &lt;- c(cont_vars, cat_vars, wt_vars)"
  },
  {
    "objectID": "slides/07b-iterating-safely.html#clean-the-labeled-variables",
    "href": "slides/07b-iterating-safely.html#clean-the-labeled-variables",
    "title": "Iterating Safely",
    "section": "Clean the labeled variables",
    "text": "Clean the labeled variables\n\ngss_df &lt;- gss_all |&gt;\n  filter(year &gt; 1974 & year &lt; 2021) |&gt; \n  select(all_of(my_vars)) |&gt; \n  mutate(across(everything(), haven::zap_missing), # Convert labeled missing to regular NA\n         across(all_of(wt_vars), as.numeric),\n         across(all_of(cat_vars), as_factor), \n         across(all_of(cat_vars), fct_relabel, tolower),\n         across(all_of(cat_vars), fct_relabel, tools::toTitleCase),\n         compwt = oversamp * formwt * wtssall)"
  },
  {
    "objectID": "slides/07b-iterating-safely.html#working-dataset",
    "href": "slides/07b-iterating-safely.html#working-dataset",
    "title": "Iterating Safely",
    "section": "Working dataset",
    "text": "Working dataset\n\ngss_df\n\n# A tibble: 60,213 × 15\n   year         id ballot   age   race  sex   fefam  vpsu vstrat oversamp formwt\n   &lt;dbl+lbl&gt; &lt;dbl&gt; &lt;dbl+lb&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;\n 1 1975          1 NA       38    White Male  &lt;NA&gt;      1   7001        1     NA\n 2 1975          2 NA       20    White Fema… &lt;NA&gt;      1   7001        1     NA\n 3 1975          3 NA       61    White Fema… &lt;NA&gt;      1   7001        1     NA\n 4 1975          4 NA       19    White Male  &lt;NA&gt;      1   7001        1     NA\n 5 1975          5 NA       28    White Male  &lt;NA&gt;      1   7001        1     NA\n 6 1975          6 NA       28    White Fema… &lt;NA&gt;      1   7002        1     NA\n 7 1975          7 NA       35    White Fema… &lt;NA&gt;      1   7002        1     NA\n 8 1975          8 NA       64    White Fema… &lt;NA&gt;      1   7002        1     NA\n 9 1975          9 NA       53    White Male  &lt;NA&gt;      1   7002        1     NA\n10 1975         10 NA       34    White Fema… &lt;NA&gt;      1   7002        1     NA\n# ℹ 60,203 more rows\n# ℹ 4 more variables: wtssall &lt;dbl&gt;, sampcode &lt;dbl&gt;, sample &lt;dbl&gt;, compwt &lt;dbl&gt;"
  },
  {
    "objectID": "slides/07b-iterating-safely.html#the-fefam-question",
    "href": "slides/07b-iterating-safely.html#the-fefam-question",
    "title": "Iterating Safely",
    "section": "The fefam question",
    "text": "The fefam question\n\ngss_df |&gt; \n  count(fefam) \n\n# A tibble: 5 × 2\n  fefam                 n\n  &lt;fct&gt;             &lt;int&gt;\n1 Strongly Agree     2543\n2 Agree              8992\n3 Disagree          13061\n4 Strongly Disagree  5479\n5 &lt;NA&gt;              30138"
  },
  {
    "objectID": "slides/07b-iterating-safely.html#recoding",
    "href": "slides/07b-iterating-safely.html#recoding",
    "title": "Iterating Safely",
    "section": "Recoding",
    "text": "Recoding\n\ngss_df &lt;- gss_df |&gt; \n  mutate(fefam_d = forcats::fct_recode(fefam,\n                                  Agree = \"Strongly Agree\",\n                                  Disagree = \"Strongly Disagree\"),\n    fefam_n = recode(fefam_d, \"Agree\" = 1, \"Disagree\" = 0))\n\n# factor version\ngss_df |&gt; \n  count(fefam_d) \n\n# A tibble: 3 × 2\n  fefam_d      n\n  &lt;fct&gt;    &lt;int&gt;\n1 Agree    11535\n2 Disagree 18540\n3 &lt;NA&gt;     30138\n\n# numeric version, 1 is \"Agree\"\ngss_df |&gt; \n  count(fefam_n) \n\n# A tibble: 3 × 2\n  fefam_n     n\n    &lt;dbl&gt; &lt;int&gt;\n1       0 18540\n2       1 11535\n3      NA 30138"
  },
  {
    "objectID": "slides/07b-iterating-safely.html#unweighted-model",
    "href": "slides/07b-iterating-safely.html#unweighted-model",
    "title": "Iterating Safely",
    "section": "Unweighted model",
    "text": "Unweighted model\n\nout_all &lt;- glm(fefam_n ~ age + sex + race, \n              data = gss_df, \n              family=\"binomial\", \n              na.action = na.omit)\n\nsummary(out_all)\n\n\nCall:\nglm(formula = fefam_n ~ age + sex + race, family = \"binomial\", \n    data = gss_df, na.action = na.omit)\n\nCoefficients:\n              Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept) -1.9185878  0.0399581 -48.015  &lt; 2e-16 ***\nage          0.0323648  0.0007275  44.486  &lt; 2e-16 ***\nsexFemale   -0.2247518  0.0248741  -9.036  &lt; 2e-16 ***\nraceBlack    0.0668275  0.0363201   1.840   0.0658 .  \nraceOther    0.3659411  0.0493673   7.413 1.24e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 39921  on 29980  degrees of freedom\nResidual deviance: 37746  on 29976  degrees of freedom\n  (30232 observations deleted due to missingness)\nAIC: 37756\n\nNumber of Fisher Scoring iterations: 4"
  },
  {
    "objectID": "slides/07b-iterating-safely.html#tidied-output",
    "href": "slides/07b-iterating-safely.html#tidied-output",
    "title": "Iterating Safely",
    "section": "Tidied output",
    "text": "Tidied output\n\ntidy(out_all)\n\n# A tibble: 5 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)  -1.92    0.0400      -48.0  0       \n2 age           0.0324  0.000728     44.5  0       \n3 sexFemale    -0.225   0.0249       -9.04 1.63e-19\n4 raceBlack     0.0668  0.0363        1.84 6.58e- 2\n5 raceOther     0.366   0.0494        7.41 1.24e-13"
  },
  {
    "objectID": "slides/07b-iterating-safely.html#group_map-and-possibly",
    "href": "slides/07b-iterating-safely.html#group_map-and-possibly",
    "title": "Iterating Safely",
    "section": "group_map() and possibly()",
    "text": "group_map() and possibly()\n\nModel each year\n\n\nout_yr &lt;- gss_df |&gt; \n  group_by(year) |&gt; \n  group_map_dfr(possibly(~ tidy(glm(fefam_n ~ age + sex + race, \n                       data = .x, \n                       family = \"binomial\", \n                       na.action = na.omit), \n                       conf.int = TRUE), \n                     otherwise = NULL))\n\nout_yr\n\n# A tibble: 105 × 8\n   year      term       estimate std.error statistic  p.value conf.low conf.high\n   &lt;dbl+lbl&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 1977      (Intercep…  -1.20     0.178      -6.75  1.47e-11  -1.55     -0.854 \n 2 1977      age          0.0483   0.00388    12.4   1.56e-35   0.0408    0.0561\n 3 1977      sexFemale   -0.341    0.118      -2.90  3.77e- 3  -0.572    -0.111 \n 4 1977      raceBlack   -0.0613   0.180      -0.340 7.34e- 1  -0.412     0.295 \n 5 1977      raceOther    0.188    0.576       0.326 7.44e- 1  -0.912     1.40  \n 6 1985      (Intercep…  -1.89     0.168     -11.2   2.89e-29  -2.23     -1.56  \n 7 1985      age          0.0432   0.00332    13.0   1.03e-38   0.0368    0.0498\n 8 1985      sexFemale   -0.261    0.112      -2.34  1.94e- 2  -0.481    -0.0426\n 9 1985      raceBlack    0.148    0.189       0.782 4.34e- 1  -0.223     0.519 \n10 1985      raceOther   -0.319    0.338      -0.944 3.45e- 1  -1.00      0.329 \n# ℹ 95 more rows"
  },
  {
    "objectID": "slides/07b-iterating-safely.html#group_map-and-possibly-1",
    "href": "slides/07b-iterating-safely.html#group_map-and-possibly-1",
    "title": "Iterating Safely",
    "section": "group_map() and possibly()",
    "text": "group_map() and possibly()\n\npossibly(~ tidy(glm(...)), otherwise = NULL)"
  },
  {
    "objectID": "slides/07b-iterating-safely.html#group_map-and-possibly-2",
    "href": "slides/07b-iterating-safely.html#group_map-and-possibly-2",
    "title": "Iterating Safely",
    "section": "group_map() and possibly()",
    "text": "group_map() and possibly()\n\nout_yr |&gt; \n  filter(term == \"sexFemale\") |&gt; \n  ggplot(mapping = aes(x = year, y = estimate,\n                       ymin = conf.low, ymax = conf.high)) +\n  geom_hline(yintercept = 0, linetype = \"dotted\") + \n  geom_line() + \n  geom_pointrange()"
  },
  {
    "objectID": "slides/07b-iterating-safely.html#survey-weighted-estimates",
    "href": "slides/07b-iterating-safely.html#survey-weighted-estimates",
    "title": "Iterating Safely",
    "section": "Survey-weighted estimates",
    "text": "Survey-weighted estimates\n\noptions(survey.lonely.psu = \"adjust\")\noptions(na.action=\"na.pass\")\n\ngss_svy &lt;- gss_df |&gt;\n  filter(year &gt; 1974) |&gt;  \n  mutate(stratvar = interaction(year, vstrat)) |&gt;\n  as_survey_design(id = vpsu,\n                     strata = stratvar,\n                     weights = wtssall,\n                     nest = TRUE)\ngss_svy\n\nStratified 1 - level Cluster Sampling design (with replacement)\nWith (4555) clusters.\nCalled via srvyr\nSampling variables:\n - ids: vpsu\n - strata: stratvar\n - weights: wtssall\nData variables: year (dbl+lbl), id (dbl), ballot (dbl+lbl), age (dbl+lbl), race\n  (fct), sex (fct), fefam (fct), vpsu (dbl), vstrat (dbl), oversamp (dbl),\n  formwt (dbl), wtssall (dbl), sampcode (dbl), sample (dbl), compwt (dbl),\n  fefam_d (fct), fefam_n (dbl), stratvar (fct)"
  },
  {
    "objectID": "slides/07b-iterating-safely.html#survey-weighted-estimates-1",
    "href": "slides/07b-iterating-safely.html#survey-weighted-estimates-1",
    "title": "Iterating Safely",
    "section": "Survey-weighted estimates",
    "text": "Survey-weighted estimates\n\ngss_svy |&gt;\n  drop_na(fefam_d) |&gt; \n  group_by(year, sex, race, fefam_d) |&gt;\n  summarize(prop = survey_mean(na.rm = TRUE, \n                               vartype = \"ci\"))\n\n# A tibble: 252 × 7\n# Groups:   year, sex, race [126]\n   year      sex    race  fefam_d   prop prop_low prop_upp\n   &lt;dbl+lbl&gt; &lt;fct&gt;  &lt;fct&gt; &lt;fct&gt;    &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 1977      Male   White Agree    0.694   0.655     0.732\n 2 1977      Male   White Disagree 0.306   0.268     0.345\n 3 1977      Male   Black Agree    0.686   0.564     0.807\n 4 1977      Male   Black Disagree 0.314   0.193     0.436\n 5 1977      Male   Other Agree    0.632   0.357     0.906\n 6 1977      Male   Other Disagree 0.368   0.0936    0.643\n 7 1977      Female White Agree    0.640   0.601     0.680\n 8 1977      Female White Disagree 0.360   0.320     0.399\n 9 1977      Female Black Agree    0.553   0.472     0.634\n10 1977      Female Black Disagree 0.447   0.366     0.528\n# ℹ 242 more rows"
  },
  {
    "objectID": "slides/07b-iterating-safely.html#survey-weighted-estimates-2",
    "href": "slides/07b-iterating-safely.html#survey-weighted-estimates-2",
    "title": "Iterating Safely",
    "section": "Survey-weighted estimates",
    "text": "Survey-weighted estimates\n\nout_svy_all &lt;- svyglm(fefam_n ~ age + sex + race, \n                  design = gss_svy, \n                  family = quasibinomial(),\n                  na.action = na.omit)\n\ntidy(out_svy_all)\n\n# A tibble: 5 × 5\n  term        estimate std.error statistic   p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)  -1.83    0.0478     -38.3   6.34e-234\n2 age           0.0310  0.000852    36.4   9.99e-217\n3 sexFemale    -0.235   0.0277      -8.48  4.55e- 17\n4 raceBlack     0.0282  0.0432       0.653 5.14e-  1\n5 raceOther     0.382   0.0588       6.50  1.06e- 10"
  },
  {
    "objectID": "slides/07b-iterating-safely.html#survey-weighted-estimates-3",
    "href": "slides/07b-iterating-safely.html#survey-weighted-estimates-3",
    "title": "Iterating Safely",
    "section": "Survey-weighted estimates",
    "text": "Survey-weighted estimates\n\nout_svy_yrs &lt;- gss_svy |&gt; \n  group_by(year) |&gt; \n  group_map_dfr(possibly(~ tidy(svyglm(fefam_n ~ age + sex + race, \n                       design = .x, \n                       family = quasibinomial(),\n                       na.action = na.omit),\n                       conf.int = TRUE), \n                     otherwise = NULL))\n\nout_svy_yrs\n\n# A tibble: 105 × 8\n   year      term       estimate std.error statistic  p.value conf.low conf.high\n   &lt;dbl+lbl&gt; &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 1977      (Intercep…  -1.09     0.184      -5.93  3.74e- 7  -1.46    -0.720  \n 2 1977      age          0.0469   0.00403    11.6   2.63e-15   0.0388   0.0550 \n 3 1977      sexFemale   -0.344    0.126      -2.73  9.05e- 3  -0.599   -0.0901 \n 4 1977      raceBlack   -0.144    0.215      -0.669 5.07e- 1  -0.576    0.288  \n 5 1977      raceOther    0.276    0.552       0.500 6.19e- 1  -0.835    1.39   \n 6 1985      (Intercep…  -1.89     0.199      -9.49  9.05e-13  -2.29    -1.49   \n 7 1985      age          0.0431   0.00369    11.7   6.47e-16   0.0357   0.0505 \n 8 1985      sexFemale   -0.174    0.123      -1.42  1.61e- 1  -0.421    0.0720 \n 9 1985      raceBlack    0.157    0.228       0.688 4.95e- 1  -0.301    0.614  \n10 1985      raceOther   -0.533    0.268      -1.99  5.24e- 2  -1.07     0.00573\n# ℹ 95 more rows"
  },
  {
    "objectID": "slides/07b-iterating-safely.html#survey-weighted-estimates-4",
    "href": "slides/07b-iterating-safely.html#survey-weighted-estimates-4",
    "title": "Iterating Safely",
    "section": "Survey-weighted estimates",
    "text": "Survey-weighted estimates\n\nout_svy_yrs |&gt; \n  filter(term == \"sexFemale\") |&gt; \n  ggplot(mapping = aes(x = year, \n                       y = estimate,\n                       ymin = conf.low,\n                       ymax = conf.high)) +\n  geom_hline(yintercept = 0, linetype = \"dotted\") + \n  geom_line() + \n  geom_pointrange()"
  },
  {
    "objectID": "slides/05-regular-expressions.html#load-the-packages-as-always",
    "href": "slides/05-regular-expressions.html#load-the-packages-as-always",
    "title": "Regular Expressions",
    "section": "Load the packages, as always",
    "text": "Load the packages, as always\n\nlibrary(here)      # manage file paths\nlibrary(socviz)    # data and some useful functions\n\n\nlibrary(tidyverse) # your friend and mine\nlibrary(gapminder) # gapminder data\nlibrary(stringr)"
  },
  {
    "objectID": "slides/05-regular-expressions.html#stringr-is-your-gateway-to-regexps",
    "href": "slides/05-regular-expressions.html#stringr-is-your-gateway-to-regexps",
    "title": "Regular Expressions",
    "section": "stringr is your gateway to regexps",
    "text": "stringr is your gateway to regexps\n\nlibrary(stringr) # It's loaded by default with library(tidyverse)"
  },
  {
    "objectID": "slides/05-regular-expressions.html#regexps-are-their-own-whole-world",
    "href": "slides/05-regular-expressions.html#regexps-are-their-own-whole-world",
    "title": "Regular Expressions",
    "section": "regexps are their own whole world",
    "text": "regexps are their own whole world\n\n\n\n\nThis book is a thing of beauty."
  },
  {
    "objectID": "slides/05-regular-expressions.html#searching-for-patterns",
    "href": "slides/05-regular-expressions.html#searching-for-patterns",
    "title": "Regular Expressions",
    "section": "Searching for patterns",
    "text": "Searching for patterns\nA regular expression is a way of searching for a piece of text, or pattern, inside some larger body of text, called a string.\n\nThe simplest sort of search is like the “Find” functionality in a Word Processor. The pattern is a literal letter, number, punctuation mark, word or series of words; the text is a document searched one line at a time. The next step up is “Find and Replace”.\n\n\nEvery pattern-searching function in stringr has the same basic form:\nstr_view(&lt;STRING&gt;, &lt;PATTERN&gt;, [...]) # where [...] means \"maybe some options\"\n\n\nFunctions that replace as well as detect strings all have this form:\nstr_replace(&lt;STRING&gt;, &lt;PATTERN&gt;, &lt;REPLACEMENT&gt;)\n\n\n(If you think about it, &lt;STRING&gt;, &lt;PATTERN&gt; and &lt;REPLACEMENT&gt; above are all kinds of pattern: they are meant to “stand for” all kinds of text, not be taken literally.)"
  },
  {
    "objectID": "slides/05-regular-expressions.html#searching-for-patterns-1",
    "href": "slides/05-regular-expressions.html#searching-for-patterns-1",
    "title": "Regular Expressions",
    "section": "Searching for patterns",
    "text": "Searching for patterns\n\nHere I’ll follow the exposition in Wickham & Grolemund (2017).\n\n\nx &lt;- c(\"apple\", \"banana\", \"pear\")\n\nstr_view(x, \"an\", html=FALSE)\n\n[2] │ b&lt;an&gt;&lt;an&gt;a"
  },
  {
    "objectID": "slides/05-regular-expressions.html#searching-for-patterns-2",
    "href": "slides/05-regular-expressions.html#searching-for-patterns-2",
    "title": "Regular Expressions",
    "section": "Searching for patterns",
    "text": "Searching for patterns\n\n\nRegular expressions get their real power from wildcards, i.e. tokens that match more than just literal strings, but also more general and more complex patterns.\nThe most general pattern-matching token is, “Match everything!” This is represented by the period, or .\nBut … if . matches any character, how do you specifically match the literal character .?"
  },
  {
    "objectID": "slides/05-regular-expressions.html#escaping",
    "href": "slides/05-regular-expressions.html#escaping",
    "title": "Regular Expressions",
    "section": "Escaping",
    "text": "Escaping\n\n\nYou have to “escape” the period to tell the regex you want to match it exactly, rather than interpret it as meaning “match anything”.\nregexs use the backslash, \\, to signal “escape the next character”.\nTo match a ., you need the regex \\.\n\n\n\nYou need to use an “escape” to tell the regular expression you want to match it exactly, not use its special behaviour. Like strings, regexs use the backslash, \\, to escape special behaviour. So to match an ., you need the regex [\\.]{.fg-pink]. Unfortunately this creates a problem. We use strings to represent regular expressions, and  is also used as an escape symbol in strings. So to create the regular expression . we need the string “\\.”."
  },
  {
    "objectID": "slides/05-regular-expressions.html#hang-on-i-see-a-further-problem",
    "href": "slides/05-regular-expressions.html#hang-on-i-see-a-further-problem",
    "title": "Regular Expressions",
    "section": "Hang on, I see a further problem",
    "text": "Hang on, I see a further problem\n\nWe use strings to represent regular expressions. \\ is also used as an escape symbol in strings. So to create the regular expression \\. we need the string \\\\.\n\n\n# To create the regular expression, we need \\\\\ndot &lt;- \"\\\\.\"\n\n# But the expression itself only contains one:\nwriteLines(dot)\n\n\\.\n\n# And this tells R to look for an explicit .\nstr_view(c(\"abc\", \"a.c\", \"bef\"), \"a\\\\.c\")\n\n[2] │ &lt;a.c&gt;"
  },
  {
    "objectID": "slides/05-regular-expressions.html#but-how-do-you-match-a-literal",
    "href": "slides/05-regular-expressions.html#but-how-do-you-match-a-literal",
    "title": "Regular Expressions",
    "section": "But … how do you match a literal \\?",
    "text": "But … how do you match a literal \\?\n\nx &lt;- \"a\\\\b\"\nwriteLines(x)\n\na\\b\n\n#&gt; a\\b\n\nstr_view(x, \"\\\\\\\\\") # you need four!\n\n[1] │ a&lt;\\&gt;b"
  },
  {
    "objectID": "slides/05-regular-expressions.html#but-how-do-you-match-a-literal-1",
    "href": "slides/05-regular-expressions.html#but-how-do-you-match-a-literal-1",
    "title": "Regular Expressions",
    "section": "But … how do you match a literal \\?",
    "text": "But … how do you match a literal \\?\nThis is the price we pay for having to express searches for patterns using a language containing these same characters, which we may also want to search for."
  },
  {
    "objectID": "slides/05-regular-expressions.html#matching-start-and-end",
    "href": "slides/05-regular-expressions.html#matching-start-and-end",
    "title": "Regular Expressions",
    "section": "Matching start and end",
    "text": "Matching start and end\n\nUse ^ to match the start of a string.\n\n\nx &lt;- c(\"apple\", \"banana\", \"pear\")\nstr_view(x, \"^a\")\n\n[1] │ &lt;a&gt;pple"
  },
  {
    "objectID": "slides/05-regular-expressions.html#matching-start-and-end-1",
    "href": "slides/05-regular-expressions.html#matching-start-and-end-1",
    "title": "Regular Expressions",
    "section": "Matching start and end",
    "text": "Matching start and end\n\nUse ^ to match the start of a string.\n\n\nx &lt;- c(\"apple\", \"banana\", \"pear\")\nstr_view(x, \"^a\")\n\n[1] │ &lt;a&gt;pple\n\n\n\nUse $ to match the end of a string.\n\n\nstr_view(x, \"a$\")\n\n[2] │ banan&lt;a&gt;"
  },
  {
    "objectID": "slides/05-regular-expressions.html#matching-start-and-end-2",
    "href": "slides/05-regular-expressions.html#matching-start-and-end-2",
    "title": "Regular Expressions",
    "section": "Matching start and end",
    "text": "Matching start and end\n\nTo force a regular expression to only match a complete string, anchor it with both ^ and $\n\n\nx &lt;- c(\"apple pie\", \"apple\", \"apple cake\")\nstr_view(x, \"apple\")\n\n[1] │ &lt;apple&gt; pie\n[2] │ &lt;apple&gt;\n[3] │ &lt;apple&gt; cake\n\n\n\nstr_view(x, \"^apple$\")\n\n[2] │ &lt;apple&gt;"
  },
  {
    "objectID": "slides/05-regular-expressions.html#matching-character-classes",
    "href": "slides/05-regular-expressions.html#matching-character-classes",
    "title": "Regular Expressions",
    "section": "Matching character classes",
    "text": "Matching character classes\n\\d matches any digit.\n\\s matches any whitespace (e.g. space, tab, newline).\nabc matches a, b, or c.\n^abc matches anything except a, b, or c.\n\nRemember, to create a regular expression containing r , you’ll need to escape the  for the string, so you’ll type “\\d” or “\\s”."
  },
  {
    "objectID": "slides/05-regular-expressions.html#matching-the-special-characters",
    "href": "slides/05-regular-expressions.html#matching-the-special-characters",
    "title": "Regular Expressions",
    "section": "Matching the special characters",
    "text": "Matching the special characters\nLook for a literal character that normally has special meaning in a regex:\n\nstr_view(c(\"abc\", \"a.c\", \"a*c\", \"a c\"), \"a[.]c\")\n\n[2] │ &lt;a.c&gt;\n\n\n\nstr_view(c(\"abc\", \"a.c\", \"a*c\", \"a c\"), \".[*]c\")\n\n[3] │ &lt;a*c&gt;\n\n\nThis works for most (but not all) regex metacharacters: $ . | ? * + ( ) [ {. Unfortunately, a few characters have special meaning even inside a character class and must be handled with backslash escapes. These are ] \\ ^ and -"
  },
  {
    "objectID": "slides/05-regular-expressions.html#alternation",
    "href": "slides/05-regular-expressions.html#alternation",
    "title": "Regular Expressions",
    "section": "Alternation",
    "text": "Alternation\nUse parentheses to make the precedence of the ‘or’ operator | clear:\n\nstr_view(c(\"groy\", \"grey\", \"griy\", \"gray\"), \"gr(e|a)y\")\n\n[2] │ &lt;grey&gt;\n[4] │ &lt;gray&gt;"
  },
  {
    "objectID": "slides/05-regular-expressions.html#repeated-patterns",
    "href": "slides/05-regular-expressions.html#repeated-patterns",
    "title": "Regular Expressions",
    "section": "Repeated patterns",
    "text": "Repeated patterns\n\n? is 0 or 1\n+ is 1 or more\n* is 0 or more\n\n\nx &lt;- \"1888 is the longest year in Roman numerals: MDCCCLXXXVIII\"\nstr_view(x, \"CC?\")\n\n[1] │ 1888 is the longest year in Roman numerals: MD&lt;CC&gt;&lt;C&gt;LXXXVIII"
  },
  {
    "objectID": "slides/05-regular-expressions.html#repeated-patterns-1",
    "href": "slides/05-regular-expressions.html#repeated-patterns-1",
    "title": "Regular Expressions",
    "section": "Repeated patterns",
    "text": "Repeated patterns\n\n? is 0 or 1\n+ is 1 or more\n* is 0 or more\n\n\nstr_view(x, \"CC+\")\n\n[1] │ 1888 is the longest year in Roman numerals: MD&lt;CCC&gt;LXXXVIII"
  },
  {
    "objectID": "slides/05-regular-expressions.html#repeated-patterns-2",
    "href": "slides/05-regular-expressions.html#repeated-patterns-2",
    "title": "Regular Expressions",
    "section": "Repeated patterns",
    "text": "Repeated patterns\n\n? is 0 or 1\n+ is 1 or more\n* is 0 or more\n\n\nx &lt;- \"1888 is the longest year in Roman numerals: MDCCCLXXXVIII\"\nstr_view(x, 'C[LX]+')\n\n[1] │ 1888 is the longest year in Roman numerals: MDCC&lt;CLXXX&gt;VIII"
  },
  {
    "objectID": "slides/05-regular-expressions.html#exact-numbers-of-repetitions",
    "href": "slides/05-regular-expressions.html#exact-numbers-of-repetitions",
    "title": "Regular Expressions",
    "section": "Exact numbers of repetitions",
    "text": "Exact numbers of repetitions\n\n{n} is exactly n\n{n,} is n or more\n{,m} is at most m\n{n,m} is between n and m\n\n\nstr_view(x, \"C{2}\")\n\n[1] │ 1888 is the longest year in Roman numerals: MD&lt;CC&gt;CLXXXVIII"
  },
  {
    "objectID": "slides/05-regular-expressions.html#exact-numbers-of-repetitions-1",
    "href": "slides/05-regular-expressions.html#exact-numbers-of-repetitions-1",
    "title": "Regular Expressions",
    "section": "Exact numbers of repetitions",
    "text": "Exact numbers of repetitions\n\n{n} is exactly n\n{n,} is n or more\n{,m} is at most m\n{n,m} is between n and m\n\n\nstr_view(x, \"C{2,}\")\n\n[1] │ 1888 is the longest year in Roman numerals: MD&lt;CCC&gt;LXXXVIII"
  },
  {
    "objectID": "slides/05-regular-expressions.html#exact-numbers-of-repetitions-2",
    "href": "slides/05-regular-expressions.html#exact-numbers-of-repetitions-2",
    "title": "Regular Expressions",
    "section": "Exact numbers of repetitions",
    "text": "Exact numbers of repetitions\n\n{n} is exactly n\n{n,} is n or more\n{,m} is at most m\n{n,m} is between n and m\n\n\nstr_view(x, \"C{2,3}\")\n\n[1] │ 1888 is the longest year in Roman numerals: MD&lt;CCC&gt;LXXXVIII"
  },
  {
    "objectID": "slides/05-regular-expressions.html#exact-numbers-of-repetitions-3",
    "href": "slides/05-regular-expressions.html#exact-numbers-of-repetitions-3",
    "title": "Regular Expressions",
    "section": "Exact numbers of repetitions",
    "text": "Exact numbers of repetitions\n\n{n} is exactly n\n{n,} is n or more\n{,m} is at most m\n{n,m} is between n and m\n\nBy default regexps use greedy matches. You can make them match the shortest string possible by putting a ? after them. This is often very useful!\n\nstr_view(x, 'C{2,3}?')\n\n[1] │ 1888 is the longest year in Roman numerals: MD&lt;CC&gt;CLXXXVIII"
  },
  {
    "objectID": "slides/05-regular-expressions.html#exact-numbers-of-repetitions-4",
    "href": "slides/05-regular-expressions.html#exact-numbers-of-repetitions-4",
    "title": "Regular Expressions",
    "section": "Exact numbers of repetitions",
    "text": "Exact numbers of repetitions\n\n{n} is exactly n\n{n,} is n or more\n{,m} is at most m\n{n,m} is between n and m\n\nBy default these are greedy matches. You can make them “lazy”, matching the shortest string possible by putting a ? after them. This is often very useful!\n\nstr_view(x, 'C[LX]+?')\n\n[1] │ 1888 is the longest year in Roman numerals: MDCC&lt;CL&gt;XXXVIII"
  },
  {
    "objectID": "slides/05-regular-expressions.html#and-finally-backreferences",
    "href": "slides/05-regular-expressions.html#and-finally-backreferences",
    "title": "Regular Expressions",
    "section": "And finally … backreferences",
    "text": "And finally … backreferences\n\nfruit # built into stringr\n\n [1] \"apple\"             \"apricot\"           \"avocado\"          \n [4] \"banana\"            \"bell pepper\"       \"bilberry\"         \n [7] \"blackberry\"        \"blackcurrant\"      \"blood orange\"     \n[10] \"blueberry\"         \"boysenberry\"       \"breadfruit\"       \n[13] \"canary melon\"      \"cantaloupe\"        \"cherimoya\"        \n[16] \"cherry\"            \"chili pepper\"      \"clementine\"       \n[19] \"cloudberry\"        \"coconut\"           \"cranberry\"        \n[22] \"cucumber\"          \"currant\"           \"damson\"           \n[25] \"date\"              \"dragonfruit\"       \"durian\"           \n[28] \"eggplant\"          \"elderberry\"        \"feijoa\"           \n[31] \"fig\"               \"goji berry\"        \"gooseberry\"       \n[34] \"grape\"             \"grapefruit\"        \"guava\"            \n[37] \"honeydew\"          \"huckleberry\"       \"jackfruit\"        \n[40] \"jambul\"            \"jujube\"            \"kiwi fruit\"       \n[43] \"kumquat\"           \"lemon\"             \"lime\"             \n[46] \"loquat\"            \"lychee\"            \"mandarine\"        \n[49] \"mango\"             \"mulberry\"          \"nectarine\"        \n[52] \"nut\"               \"olive\"             \"orange\"           \n[55] \"pamelo\"            \"papaya\"            \"passionfruit\"     \n[58] \"peach\"             \"pear\"              \"persimmon\"        \n[61] \"physalis\"          \"pineapple\"         \"plum\"             \n[64] \"pomegranate\"       \"pomelo\"            \"purple mangosteen\"\n[67] \"quince\"            \"raisin\"            \"rambutan\"         \n[70] \"raspberry\"         \"redcurrant\"        \"rock melon\"       \n[73] \"salal berry\"       \"satsuma\"           \"star fruit\"       \n[76] \"strawberry\"        \"tamarillo\"         \"tangerine\"        \n[79] \"ugli fruit\"        \"watermelon\""
  },
  {
    "objectID": "slides/05-regular-expressions.html#grouping-and-backreferences",
    "href": "slides/05-regular-expressions.html#grouping-and-backreferences",
    "title": "Regular Expressions",
    "section": "Grouping and backreferences",
    "text": "Grouping and backreferences\n\nFind all fruits that have a repeated pair of letters:\n\n\nstr_view(fruit, \"(..)\\\\1\", match = TRUE)\n\n [4] │ b&lt;anan&gt;a\n[20] │ &lt;coco&gt;nut\n[22] │ &lt;cucu&gt;mber\n[41] │ &lt;juju&gt;be\n[56] │ &lt;papa&gt;ya\n[73] │ s&lt;alal&gt; berry"
  },
  {
    "objectID": "slides/05-regular-expressions.html#grouping-and-backreferences-1",
    "href": "slides/05-regular-expressions.html#grouping-and-backreferences-1",
    "title": "Regular Expressions",
    "section": "Grouping and backreferences",
    "text": "Grouping and backreferences\n\nBackreferences and grouping will be very useful for string replacements."
  },
  {
    "objectID": "slides/05-regular-expressions.html#ok-that-was-a-lot",
    "href": "slides/05-regular-expressions.html#ok-that-was-a-lot",
    "title": "Regular Expressions",
    "section": "OK that was a lot",
    "text": "OK that was a lot"
  },
  {
    "objectID": "slides/05-regular-expressions.html#learning-and-testing-regexps",
    "href": "slides/05-regular-expressions.html#learning-and-testing-regexps",
    "title": "Regular Expressions",
    "section": "Learning and testing regexps",
    "text": "Learning and testing regexps\n\nPractice with a tester like https://regexr.com or https://regex101.com\nOr an app like Patterns\nThe regex engine or “flavor” used by stringr is Perl- or PCRE2-like."
  },
  {
    "objectID": "slides/05-regular-expressions.html#example-politics-and-placenames",
    "href": "slides/05-regular-expressions.html#example-politics-and-placenames",
    "title": "Regular Expressions",
    "section": "Example: Politics and Placenames",
    "text": "Example: Politics and Placenames\n\n\n\nlibrary(ukelection2019)"
  },
  {
    "objectID": "slides/05-regular-expressions.html#example-politics-and-placenames-1",
    "href": "slides/05-regular-expressions.html#example-politics-and-placenames-1",
    "title": "Regular Expressions",
    "section": "Example: Politics and Placenames",
    "text": "Example: Politics and Placenames\n\n\n\nlibrary(ukelection2019)\n\nukvote2019\n\n\n\n\n# A tibble: 3,320 × 13\n   cid     constituency electorate party_name candidate votes vote_share_percent\n   &lt;chr&gt;   &lt;chr&gt;             &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;int&gt;              &lt;dbl&gt;\n 1 W07000… Aberavon          50747 Labour     Stephen … 17008               53.8\n 2 W07000… Aberavon          50747 Conservat… Charlott…  6518               20.6\n 3 W07000… Aberavon          50747 The Brexi… Glenda D…  3108                9.8\n 4 W07000… Aberavon          50747 Plaid Cym… Nigel Hu…  2711                8.6\n 5 W07000… Aberavon          50747 Liberal D… Sheila K…  1072                3.4\n 6 W07000… Aberavon          50747 Independe… Captain …   731                2.3\n 7 W07000… Aberavon          50747 Green      Giorgia …   450                1.4\n 8 W07000… Aberconwy         44699 Conservat… Robin Mi… 14687               46.1\n 9 W07000… Aberconwy         44699 Labour     Emily Ow… 12653               39.7\n10 W07000… Aberconwy         44699 Plaid Cym… Lisa Goo…  2704                8.5\n# ℹ 3,310 more rows\n# ℹ 6 more variables: vote_share_change &lt;dbl&gt;, total_votes_cast &lt;int&gt;,\n#   vrank &lt;int&gt;, turnout &lt;dbl&gt;, fname &lt;chr&gt;, lname &lt;chr&gt;"
  },
  {
    "objectID": "slides/05-regular-expressions.html#example-politics-and-placenames-2",
    "href": "slides/05-regular-expressions.html#example-politics-and-placenames-2",
    "title": "Regular Expressions",
    "section": "Example: Politics and Placenames",
    "text": "Example: Politics and Placenames\n\n\n\nlibrary(ukelection2019)\n\nukvote2019 |&gt;\n  group_by(constituency)\n\n\n\n\n# A tibble: 3,320 × 13\n# Groups:   constituency [650]\n   cid     constituency electorate party_name candidate votes vote_share_percent\n   &lt;chr&gt;   &lt;chr&gt;             &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;int&gt;              &lt;dbl&gt;\n 1 W07000… Aberavon          50747 Labour     Stephen … 17008               53.8\n 2 W07000… Aberavon          50747 Conservat… Charlott…  6518               20.6\n 3 W07000… Aberavon          50747 The Brexi… Glenda D…  3108                9.8\n 4 W07000… Aberavon          50747 Plaid Cym… Nigel Hu…  2711                8.6\n 5 W07000… Aberavon          50747 Liberal D… Sheila K…  1072                3.4\n 6 W07000… Aberavon          50747 Independe… Captain …   731                2.3\n 7 W07000… Aberavon          50747 Green      Giorgia …   450                1.4\n 8 W07000… Aberconwy         44699 Conservat… Robin Mi… 14687               46.1\n 9 W07000… Aberconwy         44699 Labour     Emily Ow… 12653               39.7\n10 W07000… Aberconwy         44699 Plaid Cym… Lisa Goo…  2704                8.5\n# ℹ 3,310 more rows\n# ℹ 6 more variables: vote_share_change &lt;dbl&gt;, total_votes_cast &lt;int&gt;,\n#   vrank &lt;int&gt;, turnout &lt;dbl&gt;, fname &lt;chr&gt;, lname &lt;chr&gt;"
  },
  {
    "objectID": "slides/05-regular-expressions.html#example-politics-and-placenames-3",
    "href": "slides/05-regular-expressions.html#example-politics-and-placenames-3",
    "title": "Regular Expressions",
    "section": "Example: Politics and Placenames",
    "text": "Example: Politics and Placenames\n\n\n\nlibrary(ukelection2019)\n\nukvote2019 |&gt;\n  group_by(constituency) |&gt;\n  slice_max(votes)\n\n\n\n\n# A tibble: 650 × 13\n# Groups:   constituency [650]\n   cid     constituency electorate party_name candidate votes vote_share_percent\n   &lt;chr&gt;   &lt;chr&gt;             &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;int&gt;              &lt;dbl&gt;\n 1 W07000… Aberavon          50747 Labour     Stephen … 17008               53.8\n 2 W07000… Aberconwy         44699 Conservat… Robin Mi… 14687               46.1\n 3 S14000… Aberdeen No…      62489 Scottish … Kirsty B… 20205               54  \n 4 S14000… Aberdeen So…      65719 Scottish … Stephen … 20388               44.7\n 5 S14000… Aberdeenshi…      72640 Conservat… Andrew B… 22752               42.7\n 6 S14000… Airdrie & S…      64008 Scottish … Neil Gray 17929               45.1\n 7 E14000… Aldershot         72617 Conservat… Leo Doch… 27980               58.4\n 8 E14000… Aldridge-Br…      60138 Conservat… Wendy Mo… 27850               70.8\n 9 E14000… Altrincham …      73096 Conservat… Graham B… 26311               48  \n10 W07000… Alyn & Dees…      62783 Labour     Mark Tami 18271               42.5\n# ℹ 640 more rows\n# ℹ 6 more variables: vote_share_change &lt;dbl&gt;, total_votes_cast &lt;int&gt;,\n#   vrank &lt;int&gt;, turnout &lt;dbl&gt;, fname &lt;chr&gt;, lname &lt;chr&gt;"
  },
  {
    "objectID": "slides/05-regular-expressions.html#example-politics-and-placenames-4",
    "href": "slides/05-regular-expressions.html#example-politics-and-placenames-4",
    "title": "Regular Expressions",
    "section": "Example: Politics and Placenames",
    "text": "Example: Politics and Placenames\n\n\n\nlibrary(ukelection2019)\n\nukvote2019 |&gt;\n  group_by(constituency) |&gt;\n  slice_max(votes) |&gt;\n  ungroup()\n\n\n\n\n# A tibble: 650 × 13\n   cid     constituency electorate party_name candidate votes vote_share_percent\n   &lt;chr&gt;   &lt;chr&gt;             &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;int&gt;              &lt;dbl&gt;\n 1 W07000… Aberavon          50747 Labour     Stephen … 17008               53.8\n 2 W07000… Aberconwy         44699 Conservat… Robin Mi… 14687               46.1\n 3 S14000… Aberdeen No…      62489 Scottish … Kirsty B… 20205               54  \n 4 S14000… Aberdeen So…      65719 Scottish … Stephen … 20388               44.7\n 5 S14000… Aberdeenshi…      72640 Conservat… Andrew B… 22752               42.7\n 6 S14000… Airdrie & S…      64008 Scottish … Neil Gray 17929               45.1\n 7 E14000… Aldershot         72617 Conservat… Leo Doch… 27980               58.4\n 8 E14000… Aldridge-Br…      60138 Conservat… Wendy Mo… 27850               70.8\n 9 E14000… Altrincham …      73096 Conservat… Graham B… 26311               48  \n10 W07000… Alyn & Dees…      62783 Labour     Mark Tami 18271               42.5\n# ℹ 640 more rows\n# ℹ 6 more variables: vote_share_change &lt;dbl&gt;, total_votes_cast &lt;int&gt;,\n#   vrank &lt;int&gt;, turnout &lt;dbl&gt;, fname &lt;chr&gt;, lname &lt;chr&gt;"
  },
  {
    "objectID": "slides/05-regular-expressions.html#example-politics-and-placenames-5",
    "href": "slides/05-regular-expressions.html#example-politics-and-placenames-5",
    "title": "Regular Expressions",
    "section": "Example: Politics and Placenames",
    "text": "Example: Politics and Placenames\n\n\n\nlibrary(ukelection2019)\n\nukvote2019 |&gt;\n  group_by(constituency) |&gt;\n  slice_max(votes) |&gt;\n  ungroup() |&gt;\n  select(constituency, party_name)\n\n\n\n\n# A tibble: 650 × 2\n   constituency                    party_name             \n   &lt;chr&gt;                           &lt;chr&gt;                  \n 1 Aberavon                        Labour                 \n 2 Aberconwy                       Conservative           \n 3 Aberdeen North                  Scottish National Party\n 4 Aberdeen South                  Scottish National Party\n 5 Aberdeenshire West & Kincardine Conservative           \n 6 Airdrie & Shotts                Scottish National Party\n 7 Aldershot                       Conservative           \n 8 Aldridge-Brownhills             Conservative           \n 9 Altrincham & Sale West          Conservative           \n10 Alyn & Deeside                  Labour                 \n# ℹ 640 more rows"
  },
  {
    "objectID": "slides/05-regular-expressions.html#example-politics-and-placenames-6",
    "href": "slides/05-regular-expressions.html#example-politics-and-placenames-6",
    "title": "Regular Expressions",
    "section": "Example: Politics and Placenames",
    "text": "Example: Politics and Placenames\n\n\n\nlibrary(ukelection2019)\n\nukvote2019 |&gt;\n  group_by(constituency) |&gt;\n  slice_max(votes) |&gt;\n  ungroup() |&gt;\n  select(constituency, party_name) |&gt;\n  mutate(shire = str_detect(constituency, \"shire\"),\n         field = str_detect(constituency, \"field\"),\n         dale = str_detect(constituency, \"dale\"),\n         pool = str_detect(constituency, \"pool\"),\n         ton = str_detect(constituency, \"(ton$)|(ton )\"),\n         wood = str_detect(constituency, \"(wood$)|(wood )\"),\n         saint = str_detect(constituency, \"(St )|(Saint)\"),\n         port = str_detect(constituency, \"(Port)|(port)\"),\n         ford = str_detect(constituency, \"(ford$)|(ford )\"),\n         by = str_detect(constituency, \"(by$)|(by )\"),\n         boro = str_detect(constituency, \"(boro$)|(boro )|(borough$)|(borough )\"),\n         ley = str_detect(constituency, \"(ley$)|(ley )|(leigh$)|(leigh )\"))\n\n\n\n\n# A tibble: 650 × 14\n   constituency party_name shire field dale  pool  ton   wood  saint port  ford \n   &lt;chr&gt;        &lt;chr&gt;      &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt;\n 1 Aberavon     Labour     FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n 2 Aberconwy    Conservat… FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n 3 Aberdeen No… Scottish … FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n 4 Aberdeen So… Scottish … FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n 5 Aberdeenshi… Conservat… TRUE  FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n 6 Airdrie & S… Scottish … FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n 7 Aldershot    Conservat… FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n 8 Aldridge-Br… Conservat… FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n 9 Altrincham … Conservat… FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n10 Alyn & Dees… Labour     FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n# ℹ 640 more rows\n# ℹ 3 more variables: by &lt;lgl&gt;, boro &lt;lgl&gt;, ley &lt;lgl&gt;"
  },
  {
    "objectID": "slides/05-regular-expressions.html#example-politics-and-placenames-7",
    "href": "slides/05-regular-expressions.html#example-politics-and-placenames-7",
    "title": "Regular Expressions",
    "section": "Example: Politics and Placenames",
    "text": "Example: Politics and Placenames\n\n\n\nlibrary(ukelection2019)\n\nukvote2019 |&gt;\n  group_by(constituency) |&gt;\n  slice_max(votes) |&gt;\n  ungroup() |&gt;\n  select(constituency, party_name) |&gt;\n  mutate(shire = str_detect(constituency, \"shire\"),\n         field = str_detect(constituency, \"field\"),\n         dale = str_detect(constituency, \"dale\"),\n         pool = str_detect(constituency, \"pool\"),\n         ton = str_detect(constituency, \"(ton$)|(ton )\"),\n         wood = str_detect(constituency, \"(wood$)|(wood )\"),\n         saint = str_detect(constituency, \"(St )|(Saint)\"),\n         port = str_detect(constituency, \"(Port)|(port)\"),\n         ford = str_detect(constituency, \"(ford$)|(ford )\"),\n         by = str_detect(constituency, \"(by$)|(by )\"),\n         boro = str_detect(constituency, \"(boro$)|(boro )|(borough$)|(borough )\"),\n         ley = str_detect(constituency, \"(ley$)|(ley )|(leigh$)|(leigh )\")) |&gt;\n  pivot_longer(shire:ley, names_to = \"toponym\")\n\n\n\n\n# A tibble: 7,800 × 4\n   constituency party_name toponym value\n   &lt;chr&gt;        &lt;chr&gt;      &lt;chr&gt;   &lt;lgl&gt;\n 1 Aberavon     Labour     shire   FALSE\n 2 Aberavon     Labour     field   FALSE\n 3 Aberavon     Labour     dale    FALSE\n 4 Aberavon     Labour     pool    FALSE\n 5 Aberavon     Labour     ton     FALSE\n 6 Aberavon     Labour     wood    FALSE\n 7 Aberavon     Labour     saint   FALSE\n 8 Aberavon     Labour     port    FALSE\n 9 Aberavon     Labour     ford    FALSE\n10 Aberavon     Labour     by      FALSE\n# ℹ 7,790 more rows"
  },
  {
    "objectID": "slides/05-regular-expressions.html#example-politics-and-placenames-8",
    "href": "slides/05-regular-expressions.html#example-politics-and-placenames-8",
    "title": "Regular Expressions",
    "section": "Example: Politics and Placenames",
    "text": "Example: Politics and Placenames\n\nplace_tab &lt;- ukvote2019 |&gt; \n  group_by(constituency) |&gt; \n  slice_max(votes) |&gt; \n  ungroup() |&gt; \n  select(constituency, party_name) |&gt; \n  mutate(shire = str_detect(constituency, \"shire\"),\n         field = str_detect(constituency, \"field\"),\n         dale = str_detect(constituency, \"dale\"),\n         pool = str_detect(constituency, \"pool\"),\n         ton = str_detect(constituency, \"(ton$)|(ton )\"),\n         wood = str_detect(constituency, \"(wood$)|(wood )\"),\n         saint = str_detect(constituency, \"(St )|(Saint)\"),\n         port = str_detect(constituency, \"(Port)|(port)\"),\n         ford = str_detect(constituency, \"(ford$)|(ford )\"),\n         by = str_detect(constituency, \"(by$)|(by )\"),\n         boro = str_detect(constituency, \"(boro$)|(boro )|(borough$)|(borough )\"),\n         ley = str_detect(constituency, \"(ley$)|(ley )|(leigh$)|(leigh )\")) |&gt; \n  pivot_longer(shire:ley, names_to = \"toponym\")"
  },
  {
    "objectID": "slides/05-regular-expressions.html#example-politics-and-placenames-9",
    "href": "slides/05-regular-expressions.html#example-politics-and-placenames-9",
    "title": "Regular Expressions",
    "section": "Example: Politics and Placenames",
    "text": "Example: Politics and Placenames\n\n\n\nplace_tab\n\n\n\n\n# A tibble: 7,800 × 4\n   constituency party_name toponym value\n   &lt;chr&gt;        &lt;chr&gt;      &lt;chr&gt;   &lt;lgl&gt;\n 1 Aberavon     Labour     shire   FALSE\n 2 Aberavon     Labour     field   FALSE\n 3 Aberavon     Labour     dale    FALSE\n 4 Aberavon     Labour     pool    FALSE\n 5 Aberavon     Labour     ton     FALSE\n 6 Aberavon     Labour     wood    FALSE\n 7 Aberavon     Labour     saint   FALSE\n 8 Aberavon     Labour     port    FALSE\n 9 Aberavon     Labour     ford    FALSE\n10 Aberavon     Labour     by      FALSE\n# ℹ 7,790 more rows"
  },
  {
    "objectID": "slides/05-regular-expressions.html#example-politics-and-placenames-10",
    "href": "slides/05-regular-expressions.html#example-politics-and-placenames-10",
    "title": "Regular Expressions",
    "section": "Example: Politics and Placenames",
    "text": "Example: Politics and Placenames\n\n\n\nplace_tab |&gt;\n  group_by(party_name, toponym)\n\n\n\n\n# A tibble: 7,800 × 4\n# Groups:   party_name, toponym [120]\n   constituency party_name toponym value\n   &lt;chr&gt;        &lt;chr&gt;      &lt;chr&gt;   &lt;lgl&gt;\n 1 Aberavon     Labour     shire   FALSE\n 2 Aberavon     Labour     field   FALSE\n 3 Aberavon     Labour     dale    FALSE\n 4 Aberavon     Labour     pool    FALSE\n 5 Aberavon     Labour     ton     FALSE\n 6 Aberavon     Labour     wood    FALSE\n 7 Aberavon     Labour     saint   FALSE\n 8 Aberavon     Labour     port    FALSE\n 9 Aberavon     Labour     ford    FALSE\n10 Aberavon     Labour     by      FALSE\n# ℹ 7,790 more rows"
  },
  {
    "objectID": "slides/05-regular-expressions.html#example-politics-and-placenames-11",
    "href": "slides/05-regular-expressions.html#example-politics-and-placenames-11",
    "title": "Regular Expressions",
    "section": "Example: Politics and Placenames",
    "text": "Example: Politics and Placenames\n\n\n\nplace_tab |&gt;\n  group_by(party_name, toponym) |&gt;\n  filter(party_name %in% c(\"Conservative\", \"Labour\"))\n\n\n\n\n# A tibble: 6,816 × 4\n# Groups:   party_name, toponym [24]\n   constituency party_name toponym value\n   &lt;chr&gt;        &lt;chr&gt;      &lt;chr&gt;   &lt;lgl&gt;\n 1 Aberavon     Labour     shire   FALSE\n 2 Aberavon     Labour     field   FALSE\n 3 Aberavon     Labour     dale    FALSE\n 4 Aberavon     Labour     pool    FALSE\n 5 Aberavon     Labour     ton     FALSE\n 6 Aberavon     Labour     wood    FALSE\n 7 Aberavon     Labour     saint   FALSE\n 8 Aberavon     Labour     port    FALSE\n 9 Aberavon     Labour     ford    FALSE\n10 Aberavon     Labour     by      FALSE\n# ℹ 6,806 more rows"
  },
  {
    "objectID": "slides/05-regular-expressions.html#example-politics-and-placenames-12",
    "href": "slides/05-regular-expressions.html#example-politics-and-placenames-12",
    "title": "Regular Expressions",
    "section": "Example: Politics and Placenames",
    "text": "Example: Politics and Placenames\n\n\n\nplace_tab |&gt;\n  group_by(party_name, toponym) |&gt;\n  filter(party_name %in% c(\"Conservative\", \"Labour\")) |&gt;\n  group_by(toponym, party_name)\n\n\n\n\n# A tibble: 6,816 × 4\n# Groups:   toponym, party_name [24]\n   constituency party_name toponym value\n   &lt;chr&gt;        &lt;chr&gt;      &lt;chr&gt;   &lt;lgl&gt;\n 1 Aberavon     Labour     shire   FALSE\n 2 Aberavon     Labour     field   FALSE\n 3 Aberavon     Labour     dale    FALSE\n 4 Aberavon     Labour     pool    FALSE\n 5 Aberavon     Labour     ton     FALSE\n 6 Aberavon     Labour     wood    FALSE\n 7 Aberavon     Labour     saint   FALSE\n 8 Aberavon     Labour     port    FALSE\n 9 Aberavon     Labour     ford    FALSE\n10 Aberavon     Labour     by      FALSE\n# ℹ 6,806 more rows"
  },
  {
    "objectID": "slides/05-regular-expressions.html#example-politics-and-placenames-13",
    "href": "slides/05-regular-expressions.html#example-politics-and-placenames-13",
    "title": "Regular Expressions",
    "section": "Example: Politics and Placenames",
    "text": "Example: Politics and Placenames\n\n\n\nplace_tab |&gt;\n  group_by(party_name, toponym) |&gt;\n  filter(party_name %in% c(\"Conservative\", \"Labour\")) |&gt;\n  group_by(toponym, party_name) |&gt;\n  summarize(freq = sum(value))\n\n\n\n\n# A tibble: 24 × 3\n# Groups:   toponym [12]\n   toponym party_name    freq\n   &lt;chr&gt;   &lt;chr&gt;        &lt;int&gt;\n 1 boro    Conservative     7\n 2 boro    Labour           1\n 3 by      Conservative     6\n 4 by      Labour           2\n 5 dale    Conservative     3\n 6 dale    Labour           1\n 7 field   Conservative    10\n 8 field   Labour          10\n 9 ford    Conservative    17\n10 ford    Labour          12\n# ℹ 14 more rows"
  },
  {
    "objectID": "slides/05-regular-expressions.html#example-politics-and-placenames-14",
    "href": "slides/05-regular-expressions.html#example-politics-and-placenames-14",
    "title": "Regular Expressions",
    "section": "Example: Politics and Placenames",
    "text": "Example: Politics and Placenames\n\n\n\nplace_tab |&gt;\n  group_by(party_name, toponym) |&gt;\n  filter(party_name %in% c(\"Conservative\", \"Labour\")) |&gt;\n  group_by(toponym, party_name) |&gt;\n  summarize(freq = sum(value)) |&gt;\n  mutate(pct = freq/sum(freq))\n\n\n\n\n# A tibble: 24 × 4\n# Groups:   toponym [12]\n   toponym party_name    freq   pct\n   &lt;chr&gt;   &lt;chr&gt;        &lt;int&gt; &lt;dbl&gt;\n 1 boro    Conservative     7 0.875\n 2 boro    Labour           1 0.125\n 3 by      Conservative     6 0.75 \n 4 by      Labour           2 0.25 \n 5 dale    Conservative     3 0.75 \n 6 dale    Labour           1 0.25 \n 7 field   Conservative    10 0.5  \n 8 field   Labour          10 0.5  \n 9 ford    Conservative    17 0.586\n10 ford    Labour          12 0.414\n# ℹ 14 more rows"
  },
  {
    "objectID": "slides/05-regular-expressions.html#example-politics-and-placenames-15",
    "href": "slides/05-regular-expressions.html#example-politics-and-placenames-15",
    "title": "Regular Expressions",
    "section": "Example: Politics and Placenames",
    "text": "Example: Politics and Placenames\n\n\n\nplace_tab |&gt;\n  group_by(party_name, toponym) |&gt;\n  filter(party_name %in% c(\"Conservative\", \"Labour\")) |&gt;\n  group_by(toponym, party_name) |&gt;\n  summarize(freq = sum(value)) |&gt;\n  mutate(pct = freq/sum(freq)) |&gt;\n  filter(party_name == \"Conservative\")\n\n\n\n\n# A tibble: 12 × 4\n# Groups:   toponym [12]\n   toponym party_name    freq   pct\n   &lt;chr&gt;   &lt;chr&gt;        &lt;int&gt; &lt;dbl&gt;\n 1 boro    Conservative     7 0.875\n 2 by      Conservative     6 0.75 \n 3 dale    Conservative     3 0.75 \n 4 field   Conservative    10 0.5  \n 5 ford    Conservative    17 0.586\n 6 ley     Conservative    26 0.722\n 7 pool    Conservative     2 0.286\n 8 port    Conservative     3 0.333\n 9 saint   Conservative     3 0.5  \n10 shire   Conservative    37 0.974\n11 ton     Conservative    37 0.507\n12 wood    Conservative     7 0.636"
  },
  {
    "objectID": "slides/05-regular-expressions.html#example-politics-and-placenames-16",
    "href": "slides/05-regular-expressions.html#example-politics-and-placenames-16",
    "title": "Regular Expressions",
    "section": "Example: Politics and Placenames",
    "text": "Example: Politics and Placenames\n\n\n\nplace_tab |&gt;\n  group_by(party_name, toponym) |&gt;\n  filter(party_name %in% c(\"Conservative\", \"Labour\")) |&gt;\n  group_by(toponym, party_name) |&gt;\n  summarize(freq = sum(value)) |&gt;\n  mutate(pct = freq/sum(freq)) |&gt;\n  filter(party_name == \"Conservative\") |&gt;\n  arrange(desc(pct))\n\n\n\n\n# A tibble: 12 × 4\n# Groups:   toponym [12]\n   toponym party_name    freq   pct\n   &lt;chr&gt;   &lt;chr&gt;        &lt;int&gt; &lt;dbl&gt;\n 1 shire   Conservative    37 0.974\n 2 boro    Conservative     7 0.875\n 3 by      Conservative     6 0.75 \n 4 dale    Conservative     3 0.75 \n 5 ley     Conservative    26 0.722\n 6 wood    Conservative     7 0.636\n 7 ford    Conservative    17 0.586\n 8 ton     Conservative    37 0.507\n 9 field   Conservative    10 0.5  \n10 saint   Conservative     3 0.5  \n11 port    Conservative     3 0.333\n12 pool    Conservative     2 0.286"
  },
  {
    "objectID": "slides/05-regular-expressions.html#example-politics-and-placenames-17",
    "href": "slides/05-regular-expressions.html#example-politics-and-placenames-17",
    "title": "Regular Expressions",
    "section": "Example: Politics and Placenames",
    "text": "Example: Politics and Placenames\n\n\n\nplace_tab |&gt;\n  group_by(party_name, toponym) |&gt;\n  filter(party_name %in% c(\"Conservative\", \"Labour\")) |&gt;\n  group_by(toponym, party_name) |&gt;\n  summarize(freq = sum(value)) |&gt;\n  mutate(pct = freq/sum(freq)) |&gt;\n  filter(party_name == \"Conservative\") |&gt;\n  arrange(desc(pct))\n\n\n\n\n# A tibble: 12 × 4\n# Groups:   toponym [12]\n   toponym party_name    freq   pct\n   &lt;chr&gt;   &lt;chr&gt;        &lt;int&gt; &lt;dbl&gt;\n 1 shire   Conservative    37 0.974\n 2 boro    Conservative     7 0.875\n 3 by      Conservative     6 0.75 \n 4 dale    Conservative     3 0.75 \n 5 ley     Conservative    26 0.722\n 6 wood    Conservative     7 0.636\n 7 ford    Conservative    17 0.586\n 8 ton     Conservative    37 0.507\n 9 field   Conservative    10 0.5  \n10 saint   Conservative     3 0.5  \n11 port    Conservative     3 0.333\n12 pool    Conservative     2 0.286"
  },
  {
    "objectID": "slides/06-getting-data-in.html#load-the-packages-as-always",
    "href": "slides/06-getting-data-in.html#load-the-packages-as-always",
    "title": "Reading in Data",
    "section": "Load the packages, as always",
    "text": "Load the packages, as always\n\nlibrary(here)      # manage file paths\nlibrary(socviz)    # data and some useful functions\nlibrary(tidyverse) # your friend and mine\nlibrary(haven)     # for Stata, SAS, and SPSS files"
  },
  {
    "objectID": "slides/06-getting-data-in.html#data-we-want-to-get-into-r",
    "href": "slides/06-getting-data-in.html#data-we-want-to-get-into-r",
    "title": "Reading in Data",
    "section": "Data we want to get into R",
    "text": "Data we want to get into R\n\n\nNice, clean CSV files.\nMore troublesome CSVs.\nOther plain-text formats.\nForeign formats, like Stata.\nQuite messy things like tables on web pages.\n… and more besides."
  },
  {
    "objectID": "slides/06-getting-data-in.html#reading-in-csv-files",
    "href": "slides/06-getting-data-in.html#reading-in-csv-files",
    "title": "Reading in Data",
    "section": "Reading in CSV files",
    "text": "Reading in CSV files\n\n\nCSV is not really a proper format at all!\nBase R has read.csv()\nCorresponding tidyverse “underscored” version: read_csv().\nIt is pickier and more talkative than the Base R version."
  },
  {
    "objectID": "slides/06-getting-data-in.html#wheres-the-data-using-here",
    "href": "slides/06-getting-data-in.html#wheres-the-data-using-here",
    "title": "Reading in Data",
    "section": "Where’s the data? Using here()",
    "text": "Where’s the data? Using here()\n\nIf we’re loading a file, it’s coming from somewhere.\nIf it’s on our local disk somewhere, we will need to interact with the file system. We should try to do this in a way that avoids absolute file paths.\n\n# This is not portable\ndf &lt;- read_csv(\"/Users/kjhealy/Documents/data/misc/project/data/mydata.csv\")"
  },
  {
    "objectID": "slides/06-getting-data-in.html#wheres-the-data-using-here-1",
    "href": "slides/06-getting-data-in.html#wheres-the-data-using-here-1",
    "title": "Reading in Data",
    "section": "Where’s the data? Using here()",
    "text": "Where’s the data? Using here()\n\nIf we’re loading a file, it’s coming from somewhere.\nIf it’s on our local disk somewhere, we will need to interact with the file system. We should try to do this in a way that avoids absolute file paths.\n\n# This is not portable\ndf &lt;- read_csv(\"/Users/kjhealy/Documents/data/misc/project/data/mydata.csv\")\n\nWe should also do it in a way that is platform independent.\nThis makes it easier to share your work, move it around, etc. Projects should be self-contained."
  },
  {
    "objectID": "slides/06-getting-data-in.html#wheres-the-data-using-here-2",
    "href": "slides/06-getting-data-in.html#wheres-the-data-using-here-2",
    "title": "Reading in Data",
    "section": "Where’s the data? Using here()",
    "text": "Where’s the data? Using here()\n\nThe here package, and here() function builds paths relative to the top level of your R project.\n\n\nhere() # this path will be different for you\n\n[1] \"/Users/kjhealy/Documents/courses/data_wrangling\""
  },
  {
    "objectID": "slides/06-getting-data-in.html#wheres-the-data-using-here-3",
    "href": "slides/06-getting-data-in.html#wheres-the-data-using-here-3",
    "title": "Reading in Data",
    "section": "Where’s the data? Using here()",
    "text": "Where’s the data? Using here()\n\nThis seminar’s files all live in an RStudio project. It looks like this:\n\n\n\n/Users/kjhealy/Documents/courses/data_wrangling\n├── 00_dummy_files\n├── LICENSE\n├── Makefile\n├── README.md\n├── README.qmd\n├── _extensions\n├── _freeze\n├── _quarto.yml\n├── _site\n├── _targets\n├── _targets.R\n├── _variables.yml\n├── avhrr\n├── build\n├── code\n├── course_notes.qmd\n├── data\n├── data-raw\n├── data_wrangling.Rproj\n├── deploy.sh\n├── extension_list.txt\n├── html\n├── index.html\n├── index.qmd\n├── pdf_slides\n├── scratch.html\n├── scratch.qmd\n├── seas\n├── site_libs\n├── slides\n└── tests\n\n\n\nI want to load files from the data folder, but I also want you to be able to load them. I’m writing this from somewhere deep in the slides folder, but you won’t be there. Also, I’m on a Mac, but you may not be."
  },
  {
    "objectID": "slides/06-getting-data-in.html#wheres-the-data-using-here-4",
    "href": "slides/06-getting-data-in.html#wheres-the-data-using-here-4",
    "title": "Reading in Data",
    "section": "Where’s the data? Using here()",
    "text": "Where’s the data? Using here()\nSo:\n\n## Load the file relative to the path from the top of the project, without separators, etc\norgans &lt;- read_csv(file = here(\"data\", \"organdonation.csv\"))\n\n\norgans\n\n# A tibble: 238 × 21\n   country  year donors   pop pop.dens   gdp gdp.lag health health.lag pubhealth\n   &lt;chr&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;\n 1 Austra…    NA  NA    17065    0.220 16774   16591   1300       1224       4.8\n 2 Austra…  1991  12.1  17284    0.223 17171   16774   1379       1300       5.4\n 3 Austra…  1992  12.4  17495    0.226 17914   17171   1455       1379       5.4\n 4 Austra…  1993  12.5  17667    0.228 18883   17914   1540       1455       5.4\n 5 Austra…  1994  10.2  17855    0.231 19849   18883   1626       1540       5.4\n 6 Austra…  1995  10.2  18072    0.233 21079   19849   1737       1626       5.5\n 7 Austra…  1996  10.6  18311    0.237 21923   21079   1846       1737       5.6\n 8 Austra…  1997  10.3  18518    0.239 22961   21923   1948       1846       5.7\n 9 Austra…  1998  10.5  18711    0.242 24148   22961   2077       1948       5.9\n10 Austra…  1999   8.67 18926    0.244 25445   24148   2231       2077       6.1\n# ℹ 228 more rows\n# ℹ 11 more variables: roads &lt;dbl&gt;, cerebvas &lt;dbl&gt;, assault &lt;dbl&gt;,\n#   external &lt;dbl&gt;, txp.pop &lt;dbl&gt;, world &lt;chr&gt;, opt &lt;chr&gt;, consent.law &lt;chr&gt;,\n#   consent.practice &lt;chr&gt;, consistent &lt;chr&gt;, ccode &lt;chr&gt;"
  },
  {
    "objectID": "slides/06-getting-data-in.html#read_csv-comes-in-different-varieties",
    "href": "slides/06-getting-data-in.html#read_csv-comes-in-different-varieties",
    "title": "Reading in Data",
    "section": "read_csv() comes in different varieties",
    "text": "read_csv() comes in different varieties\n\nread_csv() Field separator is a comma: ,\n\n\norgans &lt;- read_csv(file = here(\"data\", \"organdonation.csv\"))\n\n\nread_csv2() Field separator is a semicolon: ;\n\n# Example only\nmy_data &lt;- read_csv2(file = here(\"data\", \"my_euro_file.csv))\n\nBoth are special cases of read_delim()"
  },
  {
    "objectID": "slides/06-getting-data-in.html#other-species-are-also-catered-to",
    "href": "slides/06-getting-data-in.html#other-species-are-also-catered-to",
    "title": "Reading in Data",
    "section": "Other species are also catered to",
    "text": "Other species are also catered to\n\nread_tsv() Tab separated.\nread_fwf() Fixed-width files.\nread_log() Log files (i.e. computer log files).\nread_lines() Just read in lines, without trying to parse them.\nread_table() Data that’s separated by one (or more) columns of space."
  },
  {
    "objectID": "slides/06-getting-data-in.html#you-can-read-files-remotely-too",
    "href": "slides/06-getting-data-in.html#you-can-read-files-remotely-too",
    "title": "Reading in Data",
    "section": "You can read files remotely, too",
    "text": "You can read files remotely, too\n\nYou can give all of these functions local files, or they can point to URLs.\nCompressed files will be automatically uncompressed.\n(Be careful what you download from remote locations!)\n\n\norgan_remote &lt;- read_csv(\"http://kjhealy.co/organdonation.csv\")\n\norgan_remote\n\n# A tibble: 238 × 21\n   country  year donors   pop pop.dens   gdp gdp.lag health health.lag pubhealth\n   &lt;chr&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;\n 1 Austra…    NA  NA    17065    0.220 16774   16591   1300       1224       4.8\n 2 Austra…  1991  12.1  17284    0.223 17171   16774   1379       1300       5.4\n 3 Austra…  1992  12.4  17495    0.226 17914   17171   1455       1379       5.4\n 4 Austra…  1993  12.5  17667    0.228 18883   17914   1540       1455       5.4\n 5 Austra…  1994  10.2  17855    0.231 19849   18883   1626       1540       5.4\n 6 Austra…  1995  10.2  18072    0.233 21079   19849   1737       1626       5.5\n 7 Austra…  1996  10.6  18311    0.237 21923   21079   1846       1737       5.6\n 8 Austra…  1997  10.3  18518    0.239 22961   21923   1948       1846       5.7\n 9 Austra…  1998  10.5  18711    0.242 24148   22961   2077       1948       5.9\n10 Austra…  1999   8.67 18926    0.244 25445   24148   2231       2077       6.1\n# ℹ 228 more rows\n# ℹ 11 more variables: roads &lt;dbl&gt;, cerebvas &lt;dbl&gt;, assault &lt;dbl&gt;,\n#   external &lt;dbl&gt;, txp.pop &lt;dbl&gt;, world &lt;chr&gt;, opt &lt;chr&gt;, consent.law &lt;chr&gt;,\n#   consent.practice &lt;chr&gt;, consistent &lt;chr&gt;, ccode &lt;chr&gt;"
  },
  {
    "objectID": "slides/06-getting-data-in.html#an-example-read_table",
    "href": "slides/06-getting-data-in.html#an-example-read_table",
    "title": "Reading in Data",
    "section": "An example: read_table()",
    "text": "An example: read_table()"
  },
  {
    "objectID": "slides/06-getting-data-in.html#an-example-read_table-1",
    "href": "slides/06-getting-data-in.html#an-example-read_table-1",
    "title": "Reading in Data",
    "section": "An example: read_table()",
    "text": "An example: read_table()\n\n\n \n\n\n\nengmort &lt;- read_table(here(\"data\", \"mortality.txt\"), \n                      skip = 2, na = \".\")\n\nengmort\n\n# A tibble: 222 × 5\n    Year Age    Female    Male   Total\n   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n 1  1841 0     0.136   0.169   0.153  \n 2  1841 1     0.0596  0.0632  0.0614 \n 3  1841 2     0.0364  0.0370  0.0367 \n 4  1841 3     0.0249  0.0261  0.0255 \n 5  1841 4     0.0185  0.0191  0.0188 \n 6  1841 5     0.0140  0.0143  0.0141 \n 7  1841 6     0.0109  0.0112  0.0110 \n 8  1841 7     0.00859 0.00898 0.00879\n 9  1841 8     0.00686 0.00725 0.00705\n10  1841 9     0.00577 0.00605 0.00591\n# ℹ 212 more rows"
  },
  {
    "objectID": "slides/06-getting-data-in.html#attend-to-the-column-specification",
    "href": "slides/06-getting-data-in.html#attend-to-the-column-specification",
    "title": "Reading in Data",
    "section": "Attend to the column specification",
    "text": "Attend to the column specification\n\nengmort &lt;- read_table(here(\"data\", \"mortality.txt\"), \n                      skip = 2, na = \".\")\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  Year = col_double(),\n  Age = col_character(),\n  Female = col_double(),\n  Male = col_double(),\n  Total = col_double()\n)\n\n\n\n\nThe column specification tells you what the read function did. That is, how it interpreted each of the columns. It will also report if things don’t go as expected.\nWhy is age imported in character format?"
  },
  {
    "objectID": "slides/06-getting-data-in.html#attend-to-the-column-specification-1",
    "href": "slides/06-getting-data-in.html#attend-to-the-column-specification-1",
    "title": "Reading in Data",
    "section": "Attend to the column specification",
    "text": "Attend to the column specification\n\nAbsent you giving them a column specification, the read_ functions try to guess what the type of each column is. They do this by looking at the first thousand rows of each column. They may guess incorrectly!"
  },
  {
    "objectID": "slides/06-getting-data-in.html#normalizing-names-and-recoding",
    "href": "slides/06-getting-data-in.html#normalizing-names-and-recoding",
    "title": "Reading in Data",
    "section": "Normalizing names and recoding",
    "text": "Normalizing names and recoding\n\n\n\nread_table(here(\"data\", \"mortality.txt\"),\n           skip = 2, na = \".\")\n\n\n\n\n# A tibble: 222 × 5\n    Year Age    Female    Male   Total\n   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n 1  1841 0     0.136   0.169   0.153  \n 2  1841 1     0.0596  0.0632  0.0614 \n 3  1841 2     0.0364  0.0370  0.0367 \n 4  1841 3     0.0249  0.0261  0.0255 \n 5  1841 4     0.0185  0.0191  0.0188 \n 6  1841 5     0.0140  0.0143  0.0141 \n 7  1841 6     0.0109  0.0112  0.0110 \n 8  1841 7     0.00859 0.00898 0.00879\n 9  1841 8     0.00686 0.00725 0.00705\n10  1841 9     0.00577 0.00605 0.00591\n# ℹ 212 more rows"
  },
  {
    "objectID": "slides/06-getting-data-in.html#normalizing-names-and-recoding-1",
    "href": "slides/06-getting-data-in.html#normalizing-names-and-recoding-1",
    "title": "Reading in Data",
    "section": "Normalizing names and recoding",
    "text": "Normalizing names and recoding\n\n\n\nread_table(here(\"data\", \"mortality.txt\"),\n           skip = 2, na = \".\") |&gt;\n  janitor::clean_names()\n\n\n\n\n# A tibble: 222 × 5\n    year age    female    male   total\n   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n 1  1841 0     0.136   0.169   0.153  \n 2  1841 1     0.0596  0.0632  0.0614 \n 3  1841 2     0.0364  0.0370  0.0367 \n 4  1841 3     0.0249  0.0261  0.0255 \n 5  1841 4     0.0185  0.0191  0.0188 \n 6  1841 5     0.0140  0.0143  0.0141 \n 7  1841 6     0.0109  0.0112  0.0110 \n 8  1841 7     0.00859 0.00898 0.00879\n 9  1841 8     0.00686 0.00725 0.00705\n10  1841 9     0.00577 0.00605 0.00591\n# ℹ 212 more rows"
  },
  {
    "objectID": "slides/06-getting-data-in.html#normalizing-names-and-recoding-2",
    "href": "slides/06-getting-data-in.html#normalizing-names-and-recoding-2",
    "title": "Reading in Data",
    "section": "Normalizing names and recoding",
    "text": "Normalizing names and recoding\n\n\n\nread_table(here(\"data\", \"mortality.txt\"),\n           skip = 2, na = \".\") |&gt;\n  janitor::clean_names() |&gt;\n  mutate(age = as.integer(recode(age, \"110+\" = \"110\")))\n\n\n\n\n# A tibble: 222 × 5\n    year   age  female    male   total\n   &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n 1  1841     0 0.136   0.169   0.153  \n 2  1841     1 0.0596  0.0632  0.0614 \n 3  1841     2 0.0364  0.0370  0.0367 \n 4  1841     3 0.0249  0.0261  0.0255 \n 5  1841     4 0.0185  0.0191  0.0188 \n 6  1841     5 0.0140  0.0143  0.0141 \n 7  1841     6 0.0109  0.0112  0.0110 \n 8  1841     7 0.00859 0.00898 0.00879\n 9  1841     8 0.00686 0.00725 0.00705\n10  1841     9 0.00577 0.00605 0.00591\n# ℹ 212 more rows"
  },
  {
    "objectID": "slides/06-getting-data-in.html#janitor",
    "href": "slides/06-getting-data-in.html#janitor",
    "title": "Reading in Data",
    "section": "Janitor",
    "text": "Janitor\n\nThe janitor package is very handy!\nThe main cost of normalizing names comes with, e.g., data where there is a codebook you need to consult. But in general it’s worth it."
  },
  {
    "objectID": "slides/06-getting-data-in.html#more-on-column-specifications",
    "href": "slides/06-getting-data-in.html#more-on-column-specifications",
    "title": "Reading in Data",
    "section": "More on column specifications",
    "text": "More on column specifications\n\nCDC/NCHS data: Provisional COVID-19 Death Counts by Sex, Age, and State"
  },
  {
    "objectID": "slides/06-getting-data-in.html#more-on-column-specifications-1",
    "href": "slides/06-getting-data-in.html#more-on-column-specifications-1",
    "title": "Reading in Data",
    "section": "More on column specifications",
    "text": "More on column specifications"
  },
  {
    "objectID": "slides/06-getting-data-in.html#lets-try-to-load-it",
    "href": "slides/06-getting-data-in.html#lets-try-to-load-it",
    "title": "Reading in Data",
    "section": "Let’s try to load it",
    "text": "Let’s try to load it\n\nnchs &lt;- with_edition(1, read_csv(here(\"data\", \"SAS_on_2021-04-13.csv\")))\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  `Data As Of` = col_character(),\n  `Start Date` = col_character(),\n  `End Date` = col_character(),\n  Group = col_character(),\n  Year = col_logical(),\n  Month = col_logical(),\n  State = col_character(),\n  Sex = col_character(),\n  `Age Group` = col_character(),\n  `COVID-19 Deaths` = col_double(),\n  `Total Deaths` = col_double(),\n  `Pneumonia Deaths` = col_double(),\n  `Pneumonia and COVID-19 Deaths` = col_double(),\n  `Influenza Deaths` = col_double(),\n  `Pneumonia, Influenza, or COVID-19 Deaths` = col_double(),\n  Footnote = col_character()\n)\n\n\nWarning: 88128 parsing failures.\n row  col           expected actual                                                                         file\n2755 Year 1/0/T/F/TRUE/FALSE   2020 '/Users/kjhealy/Documents/courses/data_wrangling/data/SAS_on_2021-04-13.csv'\n2756 Year 1/0/T/F/TRUE/FALSE   2020 '/Users/kjhealy/Documents/courses/data_wrangling/data/SAS_on_2021-04-13.csv'\n2757 Year 1/0/T/F/TRUE/FALSE   2020 '/Users/kjhealy/Documents/courses/data_wrangling/data/SAS_on_2021-04-13.csv'\n2758 Year 1/0/T/F/TRUE/FALSE   2020 '/Users/kjhealy/Documents/courses/data_wrangling/data/SAS_on_2021-04-13.csv'\n2759 Year 1/0/T/F/TRUE/FALSE   2020 '/Users/kjhealy/Documents/courses/data_wrangling/data/SAS_on_2021-04-13.csv'\n.... .... .................. ...... ............................................................................\nSee problems(...) for more details."
  },
  {
    "objectID": "slides/06-getting-data-in.html#lets-try-to-load-it-1",
    "href": "slides/06-getting-data-in.html#lets-try-to-load-it-1",
    "title": "Reading in Data",
    "section": "Let’s try to load it",
    "text": "Let’s try to load it\n\nproblems(nchs)\n\n# A tibble: 88,128 × 5\n     row col   expected           actual file                                   \n   &lt;int&gt; &lt;chr&gt; &lt;chr&gt;              &lt;chr&gt;  &lt;chr&gt;                                  \n 1  2755 Year  1/0/T/F/TRUE/FALSE 2020   '/Users/kjhealy/Documents/courses/data…\n 2  2756 Year  1/0/T/F/TRUE/FALSE 2020   '/Users/kjhealy/Documents/courses/data…\n 3  2757 Year  1/0/T/F/TRUE/FALSE 2020   '/Users/kjhealy/Documents/courses/data…\n 4  2758 Year  1/0/T/F/TRUE/FALSE 2020   '/Users/kjhealy/Documents/courses/data…\n 5  2759 Year  1/0/T/F/TRUE/FALSE 2020   '/Users/kjhealy/Documents/courses/data…\n 6  2760 Year  1/0/T/F/TRUE/FALSE 2020   '/Users/kjhealy/Documents/courses/data…\n 7  2761 Year  1/0/T/F/TRUE/FALSE 2020   '/Users/kjhealy/Documents/courses/data…\n 8  2762 Year  1/0/T/F/TRUE/FALSE 2020   '/Users/kjhealy/Documents/courses/data…\n 9  2763 Year  1/0/T/F/TRUE/FALSE 2020   '/Users/kjhealy/Documents/courses/data…\n10  2764 Year  1/0/T/F/TRUE/FALSE 2020   '/Users/kjhealy/Documents/courses/data…\n# ℹ 88,118 more rows"
  },
  {
    "objectID": "slides/06-getting-data-in.html#lets-try-to-load-it-2",
    "href": "slides/06-getting-data-in.html#lets-try-to-load-it-2",
    "title": "Reading in Data",
    "section": "Let’s try to load it",
    "text": "Let’s try to load it\n\nproblems(nchs)\n\n# A tibble: 88,128 × 5\n     row col   expected           actual file                                   \n   &lt;int&gt; &lt;chr&gt; &lt;chr&gt;              &lt;chr&gt;  &lt;chr&gt;                                  \n 1  2755 Year  1/0/T/F/TRUE/FALSE 2020   '/Users/kjhealy/Documents/courses/data…\n 2  2756 Year  1/0/T/F/TRUE/FALSE 2020   '/Users/kjhealy/Documents/courses/data…\n 3  2757 Year  1/0/T/F/TRUE/FALSE 2020   '/Users/kjhealy/Documents/courses/data…\n 4  2758 Year  1/0/T/F/TRUE/FALSE 2020   '/Users/kjhealy/Documents/courses/data…\n 5  2759 Year  1/0/T/F/TRUE/FALSE 2020   '/Users/kjhealy/Documents/courses/data…\n 6  2760 Year  1/0/T/F/TRUE/FALSE 2020   '/Users/kjhealy/Documents/courses/data…\n 7  2761 Year  1/0/T/F/TRUE/FALSE 2020   '/Users/kjhealy/Documents/courses/data…\n 8  2762 Year  1/0/T/F/TRUE/FALSE 2020   '/Users/kjhealy/Documents/courses/data…\n 9  2763 Year  1/0/T/F/TRUE/FALSE 2020   '/Users/kjhealy/Documents/courses/data…\n10  2764 Year  1/0/T/F/TRUE/FALSE 2020   '/Users/kjhealy/Documents/courses/data…\n# ℹ 88,118 more rows\n\n\n\nProblems are stored as an attribute of the nchs object, so we can revisit them.\nParsing failures tend to cascade. Our data only has 56k rows but we got 88k failures."
  },
  {
    "objectID": "slides/06-getting-data-in.html#take-a-look-with-head",
    "href": "slides/06-getting-data-in.html#take-a-look-with-head",
    "title": "Reading in Data",
    "section": "Take a look with head()",
    "text": "Take a look with head()\n\nhead(nchs)\n\n# A tibble: 6 × 16\n  `Data As Of` `Start Date` `End Date` Group Year  Month State Sex   `Age Group`\n  &lt;chr&gt;        &lt;chr&gt;        &lt;chr&gt;      &lt;chr&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;      \n1 04/07/2021   01/01/2020   04/03/2021 By T… NA    NA    Unit… All … All Ages   \n2 04/07/2021   01/01/2020   04/03/2021 By T… NA    NA    Unit… All … Under 1 ye…\n3 04/07/2021   01/01/2020   04/03/2021 By T… NA    NA    Unit… All … 0-17 years \n4 04/07/2021   01/01/2020   04/03/2021 By T… NA    NA    Unit… All … 1-4 years  \n5 04/07/2021   01/01/2020   04/03/2021 By T… NA    NA    Unit… All … 5-14 years \n6 04/07/2021   01/01/2020   04/03/2021 By T… NA    NA    Unit… All … 15-24 years\n# ℹ 7 more variables: `COVID-19 Deaths` &lt;dbl&gt;, `Total Deaths` &lt;dbl&gt;,\n#   `Pneumonia Deaths` &lt;dbl&gt;, `Pneumonia and COVID-19 Deaths` &lt;dbl&gt;,\n#   `Influenza Deaths` &lt;dbl&gt;, `Pneumonia, Influenza, or COVID-19 Deaths` &lt;dbl&gt;,\n#   Footnote &lt;chr&gt;"
  },
  {
    "objectID": "slides/06-getting-data-in.html#take-a-look-with-tail",
    "href": "slides/06-getting-data-in.html#take-a-look-with-tail",
    "title": "Reading in Data",
    "section": "Take a look with tail()",
    "text": "Take a look with tail()\n\ntail(nchs)\n\n# A tibble: 6 × 16\n  `Data As Of` `Start Date` `End Date` Group Year  Month State Sex   `Age Group`\n  &lt;chr&gt;        &lt;chr&gt;        &lt;chr&gt;      &lt;chr&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;      \n1 04/07/2021   04/01/2021   04/03/2021 By M… NA    NA    Puer… Fema… 45-54 years\n2 04/07/2021   04/01/2021   04/03/2021 By M… NA    NA    Puer… Fema… 50-64 years\n3 04/07/2021   04/01/2021   04/03/2021 By M… NA    NA    Puer… Fema… 55-64 years\n4 04/07/2021   04/01/2021   04/03/2021 By M… NA    NA    Puer… Fema… 65-74 years\n5 04/07/2021   04/01/2021   04/03/2021 By M… NA    NA    Puer… Fema… 75-84 years\n6 04/07/2021   04/01/2021   04/03/2021 By M… NA    NA    Puer… Fema… 85 years a…\n# ℹ 7 more variables: `COVID-19 Deaths` &lt;dbl&gt;, `Total Deaths` &lt;dbl&gt;,\n#   `Pneumonia Deaths` &lt;dbl&gt;, `Pneumonia and COVID-19 Deaths` &lt;dbl&gt;,\n#   `Influenza Deaths` &lt;dbl&gt;, `Pneumonia, Influenza, or COVID-19 Deaths` &lt;dbl&gt;,\n#   Footnote &lt;chr&gt;"
  },
  {
    "objectID": "slides/06-getting-data-in.html#take-a-look-with-slice_sample",
    "href": "slides/06-getting-data-in.html#take-a-look-with-slice_sample",
    "title": "Reading in Data",
    "section": "Take a look with slice_sample()",
    "text": "Take a look with slice_sample()\n\nnchs |&gt; \n  slice_sample(n = 10)\n\n# A tibble: 10 × 16\n   `Data As Of` `Start Date` `End Date` Group    Year  Month State         Sex  \n   &lt;chr&gt;        &lt;chr&gt;        &lt;chr&gt;      &lt;chr&gt;    &lt;lgl&gt; &lt;lgl&gt; &lt;chr&gt;         &lt;chr&gt;\n 1 04/07/2021   04/01/2021   04/03/2021 By Month NA    NA    Colorado      Male \n 2 04/07/2021   02/01/2021   02/28/2021 By Month NA    NA    Texas         Male \n 3 04/07/2021   09/01/2020   09/30/2020 By Month NA    NA    Indiana       Male \n 4 04/07/2021   01/01/2021   01/31/2021 By Month NA    TRUE  Indiana       Fema…\n 5 04/07/2021   01/01/2020   04/03/2021 By Total NA    NA    Massachusetts Fema…\n 6 04/07/2021   01/01/2020   04/03/2021 By Total NA    NA    Arizona       Fema…\n 7 04/07/2021   02/01/2020   02/29/2020 By Month NA    NA    Kansas        All …\n 8 04/07/2021   01/01/2021   04/03/2021 By Year  NA    NA    New Jersey    Fema…\n 9 04/07/2021   09/01/2020   09/30/2020 By Month NA    NA    Rhode Island  Fema…\n10 04/07/2021   02/01/2020   02/29/2020 By Month NA    NA    Connecticut   Male \n# ℹ 8 more variables: `Age Group` &lt;chr&gt;, `COVID-19 Deaths` &lt;dbl&gt;,\n#   `Total Deaths` &lt;dbl&gt;, `Pneumonia Deaths` &lt;dbl&gt;,\n#   `Pneumonia and COVID-19 Deaths` &lt;dbl&gt;, `Influenza Deaths` &lt;dbl&gt;,\n#   `Pneumonia, Influenza, or COVID-19 Deaths` &lt;dbl&gt;, Footnote &lt;chr&gt;"
  },
  {
    "objectID": "slides/06-getting-data-in.html#aside-one-that-happened-earlier",
    "href": "slides/06-getting-data-in.html#aside-one-that-happened-earlier",
    "title": "Reading in Data",
    "section": "Aside: one that happened earlier …",
    "text": "Aside: one that happened earlier …"
  },
  {
    "objectID": "slides/06-getting-data-in.html#take-a-look-with-slice",
    "href": "slides/06-getting-data-in.html#take-a-look-with-slice",
    "title": "Reading in Data",
    "section": "Take a look with slice()",
    "text": "Take a look with slice()\n\nLet’s look at the rows read_csv() complained about.\n\n\nnchs |&gt; \n  slice(2750:2760) \n\n# A tibble: 11 × 16\n   `Data As Of` `Start Date` `End Date` Group    Year  Month State         Sex  \n   &lt;chr&gt;        &lt;chr&gt;        &lt;chr&gt;      &lt;chr&gt;    &lt;lgl&gt; &lt;lgl&gt; &lt;chr&gt;         &lt;chr&gt;\n 1 04/07/2021   01/01/2020   04/03/2021 By Total NA    NA    Puerto Rico   Fema…\n 2 04/07/2021   01/01/2020   04/03/2021 By Total NA    NA    Puerto Rico   Fema…\n 3 04/07/2021   01/01/2020   04/03/2021 By Total NA    NA    Puerto Rico   Fema…\n 4 04/07/2021   01/01/2020   04/03/2021 By Total NA    NA    Puerto Rico   Fema…\n 5 04/07/2021   01/01/2020   04/03/2021 By Total NA    NA    Puerto Rico   Fema…\n 6 04/07/2021   01/01/2020   12/31/2020 By Year  NA    NA    United States All …\n 7 04/07/2021   01/01/2020   12/31/2020 By Year  NA    NA    United States All …\n 8 04/07/2021   01/01/2020   12/31/2020 By Year  NA    NA    United States All …\n 9 04/07/2021   01/01/2020   12/31/2020 By Year  NA    NA    United States All …\n10 04/07/2021   01/01/2020   12/31/2020 By Year  NA    NA    United States All …\n11 04/07/2021   01/01/2020   12/31/2020 By Year  NA    NA    United States All …\n# ℹ 8 more variables: `Age Group` &lt;chr&gt;, `COVID-19 Deaths` &lt;dbl&gt;,\n#   `Total Deaths` &lt;dbl&gt;, `Pneumonia Deaths` &lt;dbl&gt;,\n#   `Pneumonia and COVID-19 Deaths` &lt;dbl&gt;, `Influenza Deaths` &lt;dbl&gt;,\n#   `Pneumonia, Influenza, or COVID-19 Deaths` &lt;dbl&gt;, Footnote &lt;chr&gt;"
  },
  {
    "objectID": "slides/06-getting-data-in.html#take-a-look-with-slice-1",
    "href": "slides/06-getting-data-in.html#take-a-look-with-slice-1",
    "title": "Reading in Data",
    "section": "Take a look with slice()",
    "text": "Take a look with slice()\n\nnchs |&gt; \n  slice(2750:2760) |&gt; \n  select(Year, Month, State)\n\n# A tibble: 11 × 3\n   Year  Month State        \n   &lt;lgl&gt; &lt;lgl&gt; &lt;chr&gt;        \n 1 NA    NA    Puerto Rico  \n 2 NA    NA    Puerto Rico  \n 3 NA    NA    Puerto Rico  \n 4 NA    NA    Puerto Rico  \n 5 NA    NA    Puerto Rico  \n 6 NA    NA    United States\n 7 NA    NA    United States\n 8 NA    NA    United States\n 9 NA    NA    United States\n10 NA    NA    United States\n11 NA    NA    United States\n\n\n\nHm, something to do with the transition to national numbers maybe?"
  },
  {
    "objectID": "slides/06-getting-data-in.html#take-a-look-with-select-filter",
    "href": "slides/06-getting-data-in.html#take-a-look-with-select-filter",
    "title": "Reading in Data",
    "section": "Take a look with select() & filter()",
    "text": "Take a look with select() & filter()\n\nnchs |&gt; \n  select(Year, Month, State) |&gt; \n  filter(State == \"New York\")\n\n# A tibble: 969 × 3\n   Year  Month State   \n   &lt;lgl&gt; &lt;lgl&gt; &lt;chr&gt;   \n 1 NA    NA    New York\n 2 NA    NA    New York\n 3 NA    NA    New York\n 4 NA    NA    New York\n 5 NA    NA    New York\n 6 NA    NA    New York\n 7 NA    NA    New York\n 8 NA    NA    New York\n 9 NA    NA    New York\n10 NA    NA    New York\n# ℹ 959 more rows"
  },
  {
    "objectID": "slides/06-getting-data-in.html#take-a-look-with-is.na",
    "href": "slides/06-getting-data-in.html#take-a-look-with-is.na",
    "title": "Reading in Data",
    "section": "Take a look with is.na()",
    "text": "Take a look with is.na()\n\nnchs |&gt; \n  select(Year, Month, State) |&gt; \n  filter(!is.na(Year)) \n\n# A tibble: 0 × 3\n# ℹ 3 variables: Year &lt;lgl&gt;, Month &lt;lgl&gt;, State &lt;chr&gt;\n\n\n\nIt really has been read in as a completely empty column.\nThat doesn’t seem like it can be right."
  },
  {
    "objectID": "slides/06-getting-data-in.html#take-a-look-with-distinct",
    "href": "slides/06-getting-data-in.html#take-a-look-with-distinct",
    "title": "Reading in Data",
    "section": "Take a look with distinct()",
    "text": "Take a look with distinct()\n\nnchs |&gt; \n  select(Year) |&gt; \n  distinct(Year)\n\n# A tibble: 1 × 1\n  Year \n  &lt;lgl&gt;\n1 NA   \n\n\n\nAgain, it’s been read in as a completely empty column."
  },
  {
    "objectID": "slides/06-getting-data-in.html#take-a-look-with-read_lines",
    "href": "slides/06-getting-data-in.html#take-a-look-with-read_lines",
    "title": "Reading in Data",
    "section": "Take a look with read_lines()",
    "text": "Take a look with read_lines()\n\nTime to reach for a different kitchen knife.\n\n\nread_lines(here(\"data\", \"SAS_on_2021-04-13.csv\"), n_max = 10)\n\n [1] \"Data As Of,Start Date,End Date,Group,Year,Month,State,Sex,Age Group,COVID-19 Deaths,Total Deaths,Pneumonia Deaths,Pneumonia and COVID-19 Deaths,Influenza Deaths,\\\"Pneumonia, Influenza, or COVID-19 Deaths\\\",Footnote\"\n [2] \"04/07/2021,01/01/2020,04/03/2021,By Total,,,United States,All Sexes,All Ages,539723,4161167,466437,263147,9037,750804,\"                                                                                                \n [3] \"04/07/2021,01/01/2020,04/03/2021,By Total,,,United States,All Sexes,Under 1 year,59,22626,246,10,21,316,\"                                                                                                              \n [4] \"04/07/2021,01/01/2020,04/03/2021,By Total,,,United States,All Sexes,0-17 years,251,39620,667,46,179,1051,\"                                                                                                             \n [5] \"04/07/2021,01/01/2020,04/03/2021,By Total,,,United States,All Sexes,1-4 years,31,4069,137,5,61,224,\"                                                                                                                   \n [6] \"04/07/2021,01/01/2020,04/03/2021,By Total,,,United States,All Sexes,5-14 years,89,6578,195,19,76,341,\"                                                                                                                 \n [7] \"04/07/2021,01/01/2020,04/03/2021,By Total,,,United States,All Sexes,15-24 years,804,42596,930,317,81,1493,\"                                                                                                            \n [8] \"04/07/2021,01/01/2020,04/03/2021,By Total,,,United States,All Sexes,18-29 years,1996,75339,2184,884,150,3434,\"                                                                                                         \n [9] \"04/07/2021,01/01/2020,04/03/2021,By Total,,,United States,All Sexes,25-34 years,3543,88196,3493,1617,237,5638,\"                                                                                                        \n[10] \"04/07/2021,01/01/2020,04/03/2021,By Total,,,United States,All Sexes,30-39 years,5792,107348,5276,2658,318,8706,\""
  },
  {
    "objectID": "slides/06-getting-data-in.html#we-can-get-the-whole-thing-this-way",
    "href": "slides/06-getting-data-in.html#we-can-get-the-whole-thing-this-way",
    "title": "Reading in Data",
    "section": "We can get the whole thing this way",
    "text": "We can get the whole thing this way\n\nraw_file &lt;- read_lines(here(\"data\", \"SAS_on_2021-04-13.csv\"))\n\n\nThis imports the data as a long, long character vector, with each element being a line.\n\n\n# reminder: indexing 1D vectors\nletters[5:6]\n\n[1] \"e\" \"f\""
  },
  {
    "objectID": "slides/06-getting-data-in.html#now-were-just-looking-at-lines-in-a-file",
    "href": "slides/06-getting-data-in.html#now-were-just-looking-at-lines-in-a-file",
    "title": "Reading in Data",
    "section": "Now we’re just looking at lines in a file",
    "text": "Now we’re just looking at lines in a file\n\n\n# This is not a tibble; we have to index it the basic way\nraw_file[2753:2758] \n\n[1] \"04/07/2021,01/01/2020,04/03/2021,By Total,,,Puerto Rico,Female,65-74 years,203,2650,410,151,,466,One or more data cells have counts between 1-9 and have been suppressed in accordance with NCHS confidentiality standards.\"\n[2] \"04/07/2021,01/01/2020,04/03/2021,By Total,,,Puerto Rico,Female,75-84 years,234,4274,656,154,16,751,\"                                                                                                                        \n[3] \"04/07/2021,01/01/2020,04/03/2021,By Total,,,Puerto Rico,Female,85 years and over,222,6164,795,136,29,909,\"                                                                                                                  \n[4] \"04/07/2021,01/01/2020,12/31/2020,By Year,2020,,United States,All Sexes,All Ages,380949,3372967,349667,178222,8779,560025,\"                                                                                                  \n[5] \"04/07/2021,01/01/2020,12/31/2020,By Year,2020,,United States,All Sexes,Under 1 year,48,19356,224,9,21,284,\"                                                                                                                 \n[6] \"04/07/2021,01/01/2020,12/31/2020,By Year,2020,,United States,All Sexes,0-17 years,189,33808,598,35,178,930,\"                                                                                                                \n\n\n\n\nThere you are, you bastard.\n\n\nIn this case, this is due to the kind of data this is, mixing multiple reporting levels and totals. That is, it’s not a mistake in the data, but rather in the parsing."
  },
  {
    "objectID": "slides/06-getting-data-in.html#ok-lets-go-back-to-the-colspec",
    "href": "slides/06-getting-data-in.html#ok-lets-go-back-to-the-colspec",
    "title": "Reading in Data",
    "section": "OK, let’s go back to the colspec!",
    "text": "OK, let’s go back to the colspec!\n\nnchs &lt;- with_edition(1, read_csv(here(\"data\", \"SAS_on_2021-04-13.csv\"))) \n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  `Data As Of` = col_character(),\n  `Start Date` = col_character(),\n  `End Date` = col_character(),\n  Group = col_character(),\n  Year = col_logical(),\n  Month = col_logical(),\n  State = col_character(),\n  Sex = col_character(),\n  `Age Group` = col_character(),\n  `COVID-19 Deaths` = col_double(),\n  `Total Deaths` = col_double(),\n  `Pneumonia Deaths` = col_double(),\n  `Pneumonia and COVID-19 Deaths` = col_double(),\n  `Influenza Deaths` = col_double(),\n  `Pneumonia, Influenza, or COVID-19 Deaths` = col_double(),\n  Footnote = col_character()\n)\n\n\n\nWe can just copy it from the console output! It’s valid code."
  },
  {
    "objectID": "slides/06-getting-data-in.html#we-use-it-with-col_types",
    "href": "slides/06-getting-data-in.html#we-use-it-with-col_types",
    "title": "Reading in Data",
    "section": "We use it with col_types",
    "text": "We use it with col_types\nnchs &lt;- with_edition(1, read_csv(here(\"data\", \"SAS_on_2021-04-13.csv\"), \n           col_types = cols(\n  `Data As Of` = col_character(),\n  `Start Date` = col_character(),\n  `End Date` = col_character(),\n  Group = col_character(),\n  Year = col_logical(),\n  Month = col_logical(),\n  State = col_character(),\n  Sex = col_character(),\n  `Age Group` = col_character(),\n  `COVID-19 Deaths` = col_double(),\n  `Total Deaths` = col_double(),\n  `Pneumonia Deaths` = col_double(),\n  `Pneumonia and COVID-19 Deaths` = col_double(),\n  `Influenza Deaths` = col_double(),\n  `Pneumonia, Influenza, or COVID-19 Deaths` = col_double(),\n  Footnote = col_character()\n)))\n\nBut we know we need to make some adjustments."
  },
  {
    "objectID": "slides/06-getting-data-in.html#fixes",
    "href": "slides/06-getting-data-in.html#fixes",
    "title": "Reading in Data",
    "section": "Fixes",
    "text": "Fixes\n\n\n# Date format\nus_style &lt;-  \"%m/%d/%Y\" \n\nnchs &lt;- with_edition(1, read_csv(\n  here(\"data\", \"SAS_on_2021-04-13.csv\"),\n  col_types = cols(\n    `Data As Of` = col_date(format = us_style),\n    `Start Date` = col_date(format = us_style),\n    `End Date` = col_date(format = us_style),\n    Group = col_character(),\n    Year = col_character(),\n    Month = col_character(),\n    State = col_character(),\n    Sex = col_character(),\n    `Age Group` = col_character(),\n    `COVID-19 Deaths` = col_integer(),\n    `Total Deaths` = col_integer(),\n    `Pneumonia Deaths` = col_integer(),\n    `Pneumonia and COVID-19 Deaths` = col_integer(),\n    `Influenza Deaths` = col_integer(),\n    `Pneumonia, Influenza, or COVID-19 Deaths` = col_integer(),\n    Footnote = col_character()\n  )) |&gt; \n  janitor::clean_names() |&gt; \n  select(-footnote) |&gt;\n  mutate(age_group = str_to_sentence(age_group)) |&gt;\n  filter(!str_detect(state, \"Total\"))\n)"
  },
  {
    "objectID": "slides/06-getting-data-in.html#now-lets-look-again",
    "href": "slides/06-getting-data-in.html#now-lets-look-again",
    "title": "Reading in Data",
    "section": "Now let’s look again",
    "text": "Now let’s look again\n\ndim(nchs)\n\n[1] 52326    15\n\nnchs |&gt; \n  select(year, month, state) |&gt; \n  filter(!is.na(year)) \n\n# A tibble: 49,572 × 3\n   year  month state        \n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;        \n 1 2020  &lt;NA&gt;  United States\n 2 2020  &lt;NA&gt;  United States\n 3 2020  &lt;NA&gt;  United States\n 4 2020  &lt;NA&gt;  United States\n 5 2020  &lt;NA&gt;  United States\n 6 2020  &lt;NA&gt;  United States\n 7 2020  &lt;NA&gt;  United States\n 8 2020  &lt;NA&gt;  United States\n 9 2020  &lt;NA&gt;  United States\n10 2020  &lt;NA&gt;  United States\n# ℹ 49,562 more rows"
  },
  {
    "objectID": "slides/06-getting-data-in.html#now-lets-look-again-1",
    "href": "slides/06-getting-data-in.html#now-lets-look-again-1",
    "title": "Reading in Data",
    "section": "Now let’s look again",
    "text": "Now let’s look again\n\nnchs |&gt; \n  distinct(year) \n\n# A tibble: 3 × 1\n  year \n  &lt;chr&gt;\n1 &lt;NA&gt; \n2 2020 \n3 2021"
  },
  {
    "objectID": "slides/06-getting-data-in.html#lessons-learned",
    "href": "slides/06-getting-data-in.html#lessons-learned",
    "title": "Reading in Data",
    "section": "Lessons learned",
    "text": "Lessons learned\n\n\nI said at the start that it was no fun, but also weirdly satisfying.\nWhen read_csv() warns you of a parsing failure, don’t ignore it.\nread_lines() lets you get the file in a nearly unprocessed form.\nThe colspec output is your friend."
  },
  {
    "objectID": "slides/06-getting-data-in.html#if-we-wanted-to",
    "href": "slides/06-getting-data-in.html#if-we-wanted-to",
    "title": "Reading in Data",
    "section": "If we wanted to …",
    "text": "If we wanted to …\n\n\n\nlibrary(stringr)  # it's back!"
  },
  {
    "objectID": "slides/06-getting-data-in.html#if-we-wanted-to-1",
    "href": "slides/06-getting-data-in.html#if-we-wanted-to-1",
    "title": "Reading in Data",
    "section": "If we wanted to …",
    "text": "If we wanted to …\n\n\n\nlibrary(stringr)  # it's back!\n\nnchs\n\n\n\n\n# A tibble: 52,326 × 15\n   data_as_of start_date end_date   group    year  month state   sex   age_group\n   &lt;date&gt;     &lt;date&gt;     &lt;date&gt;     &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;    \n 1 2021-04-07 2020-01-01 2021-04-03 By Total &lt;NA&gt;  &lt;NA&gt;  United… All … All ages \n 2 2021-04-07 2020-01-01 2021-04-03 By Total &lt;NA&gt;  &lt;NA&gt;  United… All … Under 1 …\n 3 2021-04-07 2020-01-01 2021-04-03 By Total &lt;NA&gt;  &lt;NA&gt;  United… All … 0-17 yea…\n 4 2021-04-07 2020-01-01 2021-04-03 By Total &lt;NA&gt;  &lt;NA&gt;  United… All … 1-4 years\n 5 2021-04-07 2020-01-01 2021-04-03 By Total &lt;NA&gt;  &lt;NA&gt;  United… All … 5-14 yea…\n 6 2021-04-07 2020-01-01 2021-04-03 By Total &lt;NA&gt;  &lt;NA&gt;  United… All … 15-24 ye…\n 7 2021-04-07 2020-01-01 2021-04-03 By Total &lt;NA&gt;  &lt;NA&gt;  United… All … 18-29 ye…\n 8 2021-04-07 2020-01-01 2021-04-03 By Total &lt;NA&gt;  &lt;NA&gt;  United… All … 25-34 ye…\n 9 2021-04-07 2020-01-01 2021-04-03 By Total &lt;NA&gt;  &lt;NA&gt;  United… All … 30-39 ye…\n10 2021-04-07 2020-01-01 2021-04-03 By Total &lt;NA&gt;  &lt;NA&gt;  United… All … 35-44 ye…\n# ℹ 52,316 more rows\n# ℹ 6 more variables: covid_19_deaths &lt;int&gt;, total_deaths &lt;int&gt;,\n#   pneumonia_deaths &lt;int&gt;, pneumonia_and_covid_19_deaths &lt;int&gt;,\n#   influenza_deaths &lt;int&gt;, pneumonia_influenza_or_covid_19_deaths &lt;int&gt;"
  },
  {
    "objectID": "slides/06-getting-data-in.html#if-we-wanted-to-2",
    "href": "slides/06-getting-data-in.html#if-we-wanted-to-2",
    "title": "Reading in Data",
    "section": "If we wanted to …",
    "text": "If we wanted to …\n\n\n\nlibrary(stringr)  # it's back!\n\nnchs |&gt;\n  select(!(c(data_as_of:end_date, year, month)))\n\n\n\n\n# A tibble: 52,326 × 10\n   group    state  sex   age_group covid_19_deaths total_deaths pneumonia_deaths\n   &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;               &lt;int&gt;        &lt;int&gt;            &lt;int&gt;\n 1 By Total Unite… All … All ages           539723      4161167           466437\n 2 By Total Unite… All … Under 1 …              59        22626              246\n 3 By Total Unite… All … 0-17 yea…             251        39620              667\n 4 By Total Unite… All … 1-4 years              31         4069              137\n 5 By Total Unite… All … 5-14 yea…              89         6578              195\n 6 By Total Unite… All … 15-24 ye…             804        42596              930\n 7 By Total Unite… All … 18-29 ye…            1996        75339             2184\n 8 By Total Unite… All … 25-34 ye…            3543        88196             3493\n 9 By Total Unite… All … 30-39 ye…            5792       107348             5276\n10 By Total Unite… All … 35-44 ye…            9259       126848             8203\n# ℹ 52,316 more rows\n# ℹ 3 more variables: pneumonia_and_covid_19_deaths &lt;int&gt;,\n#   influenza_deaths &lt;int&gt;, pneumonia_influenza_or_covid_19_deaths &lt;int&gt;"
  },
  {
    "objectID": "slides/06-getting-data-in.html#if-we-wanted-to-3",
    "href": "slides/06-getting-data-in.html#if-we-wanted-to-3",
    "title": "Reading in Data",
    "section": "If we wanted to …",
    "text": "If we wanted to …\n\n\n\nlibrary(stringr)  # it's back!\n\nnchs |&gt;\n  select(!(c(data_as_of:end_date, year, month))) |&gt;\n  pivot_longer(covid_19_deaths:pneumonia_influenza_or_covid_19_deaths,\n               names_to = \"outcome\",\n               values_to = \"n\")\n\n\n\n\n# A tibble: 313,956 × 6\n   group    state         sex       age_group    outcome                       n\n   &lt;chr&gt;    &lt;chr&gt;         &lt;chr&gt;     &lt;chr&gt;        &lt;chr&gt;                     &lt;int&gt;\n 1 By Total United States All Sexes All ages     covid_19_deaths          5.40e5\n 2 By Total United States All Sexes All ages     total_deaths             4.16e6\n 3 By Total United States All Sexes All ages     pneumonia_deaths         4.66e5\n 4 By Total United States All Sexes All ages     pneumonia_and_covid_19_… 2.63e5\n 5 By Total United States All Sexes All ages     influenza_deaths         9.04e3\n 6 By Total United States All Sexes All ages     pneumonia_influenza_or_… 7.51e5\n 7 By Total United States All Sexes Under 1 year covid_19_deaths          5.9 e1\n 8 By Total United States All Sexes Under 1 year total_deaths             2.26e4\n 9 By Total United States All Sexes Under 1 year pneumonia_deaths         2.46e2\n10 By Total United States All Sexes Under 1 year pneumonia_and_covid_19_… 1   e1\n# ℹ 313,946 more rows"
  },
  {
    "objectID": "slides/06-getting-data-in.html#if-we-wanted-to-4",
    "href": "slides/06-getting-data-in.html#if-we-wanted-to-4",
    "title": "Reading in Data",
    "section": "If we wanted to …",
    "text": "If we wanted to …\n\n\n\nlibrary(stringr)  # it's back!\n\nnchs |&gt;\n  select(!(c(data_as_of:end_date, year, month))) |&gt;\n  pivot_longer(covid_19_deaths:pneumonia_influenza_or_covid_19_deaths,\n               names_to = \"outcome\",\n               values_to = \"n\") |&gt;\n  mutate(outcome = str_to_sentence(outcome),\n         outcome = str_replace_all(outcome, \"_\", \" \"),\n         outcome = str_replace(outcome, \"(C|c)ovid 19\", \"COVID-19\"))\n\n\n\n\n# A tibble: 313,956 × 6\n   group    state         sex       age_group    outcome                       n\n   &lt;chr&gt;    &lt;chr&gt;         &lt;chr&gt;     &lt;chr&gt;        &lt;chr&gt;                     &lt;int&gt;\n 1 By Total United States All Sexes All ages     COVID-19 deaths          5.40e5\n 2 By Total United States All Sexes All ages     Total deaths             4.16e6\n 3 By Total United States All Sexes All ages     Pneumonia deaths         4.66e5\n 4 By Total United States All Sexes All ages     Pneumonia and COVID-19 … 2.63e5\n 5 By Total United States All Sexes All ages     Influenza deaths         9.04e3\n 6 By Total United States All Sexes All ages     Pneumonia influenza or … 7.51e5\n 7 By Total United States All Sexes Under 1 year COVID-19 deaths          5.9 e1\n 8 By Total United States All Sexes Under 1 year Total deaths             2.26e4\n 9 By Total United States All Sexes Under 1 year Pneumonia deaths         2.46e2\n10 By Total United States All Sexes Under 1 year Pneumonia and COVID-19 … 1   e1\n# ℹ 313,946 more rows"
  },
  {
    "objectID": "slides/06-getting-data-in.html#if-we-wanted-to-5",
    "href": "slides/06-getting-data-in.html#if-we-wanted-to-5",
    "title": "Reading in Data",
    "section": "If we wanted to …",
    "text": "If we wanted to …\n\nPut this in an object called nchs_fmt"
  },
  {
    "objectID": "slides/06-getting-data-in.html#we-could-make-a-table-or-graph",
    "href": "slides/06-getting-data-in.html#we-could-make-a-table-or-graph",
    "title": "Reading in Data",
    "section": "… we could make a table or graph",
    "text": "… we could make a table or graph\n\nnchs_fmt |&gt; \n  select(state, age_group, outcome, n)\n\n# A tibble: 313,956 × 4\n   state         age_group    outcome                                      n\n   &lt;chr&gt;         &lt;chr&gt;        &lt;chr&gt;                                    &lt;int&gt;\n 1 United States All ages     COVID-19 deaths                         539723\n 2 United States All ages     Total deaths                           4161167\n 3 United States All ages     Pneumonia deaths                        466437\n 4 United States All ages     Pneumonia and COVID-19 deaths           263147\n 5 United States All ages     Influenza deaths                          9037\n 6 United States All ages     Pneumonia influenza or COVID-19 deaths  750804\n 7 United States Under 1 year COVID-19 deaths                             59\n 8 United States Under 1 year Total deaths                             22626\n 9 United States Under 1 year Pneumonia deaths                           246\n10 United States Under 1 year Pneumonia and COVID-19 deaths               10\n# ℹ 313,946 more rows"
  },
  {
    "objectID": "slides/06-getting-data-in.html#cleaned-up-but-not-tidy",
    "href": "slides/06-getting-data-in.html#cleaned-up-but-not-tidy",
    "title": "Reading in Data",
    "section": "Cleaned up (but not tidy)",
    "text": "Cleaned up (but not tidy)\n\n\n\nnchs_fmt |&gt; \n  distinct(group)\n\n# A tibble: 3 × 1\n  group   \n  &lt;chr&gt;   \n1 By Total\n2 By Year \n3 By Month"
  },
  {
    "objectID": "slides/06-getting-data-in.html#cleaned-up-but-not-tidy-1",
    "href": "slides/06-getting-data-in.html#cleaned-up-but-not-tidy-1",
    "title": "Reading in Data",
    "section": "Cleaned up (but not tidy)",
    "text": "Cleaned up (but not tidy)\n\n\n\nnchs_fmt |&gt; \n  distinct(group)\n\n# A tibble: 3 × 1\n  group   \n  &lt;chr&gt;   \n1 By Total\n2 By Year \n3 By Month\n\n\n\n\nnchs_fmt |&gt; \n  distinct(age_group)\n\n# A tibble: 17 × 1\n   age_group        \n   &lt;chr&gt;            \n 1 All ages         \n 2 Under 1 year     \n 3 0-17 years       \n 4 1-4 years        \n 5 5-14 years       \n 6 15-24 years      \n 7 18-29 years      \n 8 25-34 years      \n 9 30-39 years      \n10 35-44 years      \n11 40-49 years      \n12 45-54 years      \n13 50-64 years      \n14 55-64 years      \n15 65-74 years      \n16 75-84 years      \n17 85 years and over"
  },
  {
    "objectID": "slides/06-getting-data-in.html#make-our-plot",
    "href": "slides/06-getting-data-in.html#make-our-plot",
    "title": "Reading in Data",
    "section": "Make our plot",
    "text": "Make our plot\n\np_out &lt;- nchs_fmt |&gt; \n  filter(group %in% \"By Total\", \n         sex %in% \"All Sexes\", \n         state %in% \"United States\", \n         age_group %in% c(\"0-17 years\", \n                          \"18-29 years\",\n                          \"30-39 years\",\n                          \"40-49 years\",\n                          \"50-64 years\",\n                          \"65-74 years\",\n                          \"85 years and over\"),  \n         outcome %in% \"COVID-19 deaths\") |&gt;\n  mutate(age_group = str_replace(age_group, \"years\", \"yrs\"),\n         age_group = str_replace(age_group, \" and over\", \"\"),\n         age_group = str_replace(age_group, \"85\", \"85+\")) |&gt; \n  ggplot(mapping = aes(x = n, y = age_group)) +\n  geom_col() + scale_x_continuous(labels = scales::comma) + \n  labs(x = \"Deaths\", y = NULL, title = \"U.S. COVID-19 mortality totals by age group\")"
  },
  {
    "objectID": "slides/06-getting-data-in.html#result",
    "href": "slides/06-getting-data-in.html#result",
    "title": "Reading in Data",
    "section": "Result",
    "text": "Result\n\np_out"
  },
  {
    "objectID": "slides/06-getting-data-in.html#dropping-missing-values",
    "href": "slides/06-getting-data-in.html#dropping-missing-values",
    "title": "Reading in Data",
    "section": "Dropping missing values",
    "text": "Dropping missing values\n\ndf &lt;- tribble(\n  ~a, ~b, ~c,\n  1, NA, 2,\n  NA, NA, NA, \n  2, 2, 2\n)\n\ndf\n\n# A tibble: 3 × 3\n      a     b     c\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1    NA     2\n2    NA    NA    NA\n3     2     2     2"
  },
  {
    "objectID": "slides/06-getting-data-in.html#dropping-missing-values-1",
    "href": "slides/06-getting-data-in.html#dropping-missing-values-1",
    "title": "Reading in Data",
    "section": "Dropping missing values",
    "text": "Dropping missing values\n\n# 2 Convenience function\ndf |&gt; \n  drop_na()\n\n# A tibble: 1 × 3\n      a     b     c\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     2     2     2\n\n\n\nDrops all rows with any missing cases."
  },
  {
    "objectID": "slides/06-getting-data-in.html#dropping-missing-values-2",
    "href": "slides/06-getting-data-in.html#dropping-missing-values-2",
    "title": "Reading in Data",
    "section": "Dropping missing values",
    "text": "Dropping missing values\n\nWhat if we only want to drop all rows with all missing cases?\n\n\n# 3\ndf |&gt; \n  # Anonymous function \\(x)\n  filter(!if_all(everything(), \\(x) is.na(x))) \n\n# A tibble: 2 × 3\n      a     b     c\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1    NA     2\n2     2     2     2\n\n# 4 Convenience function from janitor\ndf |&gt; \n  janitor::remove_empty(\"rows\")\n\n# A tibble: 2 × 3\n      a     b     c\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1    NA     2\n2     2     2     2"
  },
  {
    "objectID": "slides/06-getting-data-in.html#cleaning-a-table",
    "href": "slides/06-getting-data-in.html#cleaning-a-table",
    "title": "Reading in Data",
    "section": "Cleaning a table",
    "text": "Cleaning a table\n\nWith that in mind … Some marketing data"
  },
  {
    "objectID": "slides/06-getting-data-in.html#cleaning-a-table-1",
    "href": "slides/06-getting-data-in.html#cleaning-a-table-1",
    "title": "Reading in Data",
    "section": "Cleaning a table",
    "text": "Cleaning a table\n\n\n\nread_csv(here(\"data\", \"rfm_table.csv\"))\n\n\n\n\n# A tibble: 23 × 5\n   SEGMENT            DESCRIPTION                              R     F     M    \n   &lt;chr&gt;              &lt;chr&gt;                                    &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 &lt;NA&gt;               &lt;NA&gt;                                     &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n 2 Champions          Bought recently, buy often and spend th… 4– 5  4– 5  4– 5 \n 3 &lt;NA&gt;               &lt;NA&gt;                                     &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n 4 Loyal Customers    Spend good money. Responsive to promoti… 2– 5  3– 5  3– 5 \n 5 &lt;NA&gt;               &lt;NA&gt;                                     &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n 6 Potential Loyalist Recent customers, spent good amount, bo… 3– 5  1– 3  1– 3 \n 7 &lt;NA&gt;               &lt;NA&gt;                                     &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n 8 New Customers      Bought more recently, but not often      4– 5  &lt;= 1  &lt;= 1 \n 9 &lt;NA&gt;               &lt;NA&gt;                                     &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n10 Promising          Recent shoppers, but haven’t spent much  3– 4  &lt;= 1  &lt;= 1 \n# ℹ 13 more rows"
  },
  {
    "objectID": "slides/06-getting-data-in.html#cleaning-a-table-2",
    "href": "slides/06-getting-data-in.html#cleaning-a-table-2",
    "title": "Reading in Data",
    "section": "Cleaning a table",
    "text": "Cleaning a table\n\n\n\nread_csv(here(\"data\", \"rfm_table.csv\")) |&gt;\n  janitor::clean_names()\n\n\n\n\n# A tibble: 23 × 5\n   segment            description                              r     f     m    \n   &lt;chr&gt;              &lt;chr&gt;                                    &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 &lt;NA&gt;               &lt;NA&gt;                                     &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n 2 Champions          Bought recently, buy often and spend th… 4– 5  4– 5  4– 5 \n 3 &lt;NA&gt;               &lt;NA&gt;                                     &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n 4 Loyal Customers    Spend good money. Responsive to promoti… 2– 5  3– 5  3– 5 \n 5 &lt;NA&gt;               &lt;NA&gt;                                     &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n 6 Potential Loyalist Recent customers, spent good amount, bo… 3– 5  1– 3  1– 3 \n 7 &lt;NA&gt;               &lt;NA&gt;                                     &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n 8 New Customers      Bought more recently, but not often      4– 5  &lt;= 1  &lt;= 1 \n 9 &lt;NA&gt;               &lt;NA&gt;                                     &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n10 Promising          Recent shoppers, but haven’t spent much  3– 4  &lt;= 1  &lt;= 1 \n# ℹ 13 more rows"
  },
  {
    "objectID": "slides/06-getting-data-in.html#cleaning-a-table-3",
    "href": "slides/06-getting-data-in.html#cleaning-a-table-3",
    "title": "Reading in Data",
    "section": "Cleaning a table",
    "text": "Cleaning a table\n\n\n\nread_csv(here(\"data\", \"rfm_table.csv\")) |&gt;\n  janitor::clean_names() |&gt;\n  janitor::remove_empty(\"rows\")\n\n\n\n\n# A tibble: 11 × 5\n   segment            description                              r     f     m    \n   &lt;chr&gt;              &lt;chr&gt;                                    &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 Champions          Bought recently, buy often and spend th… 4– 5  4– 5  4– 5 \n 2 Loyal Customers    Spend good money. Responsive to promoti… 2– 5  3– 5  3– 5 \n 3 Potential Loyalist Recent customers, spent good amount, bo… 3– 5  1– 3  1– 3 \n 4 New Customers      Bought more recently, but not often      4– 5  &lt;= 1  &lt;= 1 \n 5 Promising          Recent shoppers, but haven’t spent much  3– 4  &lt;= 1  &lt;= 1 \n 6 Need Attention     Above average recency, frequency & mone… 2– 3  2– 3  2– 3 \n 7 About To Sleep     Below average recency, frequency & mone… 2– 3  &lt;= 2  &lt;= 2 \n 8 At Risk            Spent big money, purchased often but lo… &lt;= 2  2– 5  2– 5 \n 9 Can’t Lose Them    Made big purchases and often, but long … &lt;= 1  4– 5  4– 5 \n10 Hibernating        Low spenders, low frequency, purchased … 1– 2  1– 2  1– 2 \n11 Lost               Lowest recency, frequency & monetary sc… &lt;= 2  &lt;= 2  &lt;= 2"
  },
  {
    "objectID": "slides/06-getting-data-in.html#cleaning-a-table-4",
    "href": "slides/06-getting-data-in.html#cleaning-a-table-4",
    "title": "Reading in Data",
    "section": "Cleaning a table",
    "text": "Cleaning a table\n\n\n\nread_csv(here(\"data\", \"rfm_table.csv\")) |&gt;\n  janitor::clean_names() |&gt;\n  janitor::remove_empty(\"rows\") |&gt;\n  pivot_longer(cols = r:m)\n\n\n\n\n# A tibble: 33 × 4\n   segment            description                                    name  value\n   &lt;chr&gt;              &lt;chr&gt;                                          &lt;chr&gt; &lt;chr&gt;\n 1 Champions          Bought recently, buy often and spend the most  r     4– 5 \n 2 Champions          Bought recently, buy often and spend the most  f     4– 5 \n 3 Champions          Bought recently, buy often and spend the most  m     4– 5 \n 4 Loyal Customers    Spend good money. Responsive to promotions     r     2– 5 \n 5 Loyal Customers    Spend good money. Responsive to promotions     f     3– 5 \n 6 Loyal Customers    Spend good money. Responsive to promotions     m     3– 5 \n 7 Potential Loyalist Recent customers, spent good amount, bought m… r     3– 5 \n 8 Potential Loyalist Recent customers, spent good amount, bought m… f     1– 3 \n 9 Potential Loyalist Recent customers, spent good amount, bought m… m     1– 3 \n10 New Customers      Bought more recently, but not often            r     4– 5 \n# ℹ 23 more rows"
  },
  {
    "objectID": "slides/06-getting-data-in.html#cleaning-a-table-5",
    "href": "slides/06-getting-data-in.html#cleaning-a-table-5",
    "title": "Reading in Data",
    "section": "Cleaning a table",
    "text": "Cleaning a table\n\n\n\nread_csv(here(\"data\", \"rfm_table.csv\")) |&gt;\n  janitor::clean_names() |&gt;\n  janitor::remove_empty(\"rows\") |&gt;\n  pivot_longer(cols = r:m) |&gt;\n  separate(col = value, into = c(\"lo\", \"hi\"),\n           remove = FALSE, convert = TRUE,\n           fill = \"left\")\n\n\n\n\n# A tibble: 33 × 6\n   segment            description                        name  value    lo    hi\n   &lt;chr&gt;              &lt;chr&gt;                              &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt;\n 1 Champions          Bought recently, buy often and sp… r     4– 5      4     5\n 2 Champions          Bought recently, buy often and sp… f     4– 5      4     5\n 3 Champions          Bought recently, buy often and sp… m     4– 5      4     5\n 4 Loyal Customers    Spend good money. Responsive to p… r     2– 5      2     5\n 5 Loyal Customers    Spend good money. Responsive to p… f     3– 5      3     5\n 6 Loyal Customers    Spend good money. Responsive to p… m     3– 5      3     5\n 7 Potential Loyalist Recent customers, spent good amou… r     3– 5      3     5\n 8 Potential Loyalist Recent customers, spent good amou… f     1– 3      1     3\n 9 Potential Loyalist Recent customers, spent good amou… m     1– 3      1     3\n10 New Customers      Bought more recently, but not oft… r     4– 5      4     5\n# ℹ 23 more rows"
  },
  {
    "objectID": "slides/06-getting-data-in.html#cleaning-a-table-6",
    "href": "slides/06-getting-data-in.html#cleaning-a-table-6",
    "title": "Reading in Data",
    "section": "Cleaning a table",
    "text": "Cleaning a table\n\n\n\nread_csv(here(\"data\", \"rfm_table.csv\")) |&gt;\n  janitor::clean_names() |&gt;\n  janitor::remove_empty(\"rows\") |&gt;\n  pivot_longer(cols = r:m) |&gt;\n  separate(col = value, into = c(\"lo\", \"hi\"),\n           remove = FALSE, convert = TRUE,\n           fill = \"left\") |&gt;\n  select(-value)\n\n\n\n\n# A tibble: 33 × 5\n   segment            description                              name     lo    hi\n   &lt;chr&gt;              &lt;chr&gt;                                    &lt;chr&gt; &lt;int&gt; &lt;int&gt;\n 1 Champions          Bought recently, buy often and spend th… r         4     5\n 2 Champions          Bought recently, buy often and spend th… f         4     5\n 3 Champions          Bought recently, buy often and spend th… m         4     5\n 4 Loyal Customers    Spend good money. Responsive to promoti… r         2     5\n 5 Loyal Customers    Spend good money. Responsive to promoti… f         3     5\n 6 Loyal Customers    Spend good money. Responsive to promoti… m         3     5\n 7 Potential Loyalist Recent customers, spent good amount, bo… r         3     5\n 8 Potential Loyalist Recent customers, spent good amount, bo… f         1     3\n 9 Potential Loyalist Recent customers, spent good amount, bo… m         1     3\n10 New Customers      Bought more recently, but not often      r         4     5\n# ℹ 23 more rows"
  },
  {
    "objectID": "slides/06-getting-data-in.html#cleaning-a-table-7",
    "href": "slides/06-getting-data-in.html#cleaning-a-table-7",
    "title": "Reading in Data",
    "section": "Cleaning a table",
    "text": "Cleaning a table\n\n\n\nread_csv(here(\"data\", \"rfm_table.csv\")) |&gt;\n  janitor::clean_names() |&gt;\n  janitor::remove_empty(\"rows\") |&gt;\n  pivot_longer(cols = r:m) |&gt;\n  separate(col = value, into = c(\"lo\", \"hi\"),\n           remove = FALSE, convert = TRUE,\n           fill = \"left\") |&gt;\n  select(-value) |&gt;\n  pivot_wider(names_from = name,\n              values_from = lo:hi)\n\n\n\n\n# A tibble: 11 × 8\n   segment            description             lo_r  lo_f  lo_m  hi_r  hi_f  hi_m\n   &lt;chr&gt;              &lt;chr&gt;                  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1 Champions          Bought recently, buy …     4     4     4     5     5     5\n 2 Loyal Customers    Spend good money. Res…     2     3     3     5     5     5\n 3 Potential Loyalist Recent customers, spe…     3     1     1     5     3     3\n 4 New Customers      Bought more recently,…     4    NA    NA     5     1     1\n 5 Promising          Recent shoppers, but …     3    NA    NA     4     1     1\n 6 Need Attention     Above average recency…     2     2     2     3     3     3\n 7 About To Sleep     Below average recency…     2    NA    NA     3     2     2\n 8 At Risk            Spent big money, purc…    NA     2     2     2     5     5\n 9 Can’t Lose Them    Made big purchases an…    NA     4     4     1     5     5\n10 Hibernating        Low spenders, low fre…     1     1     1     2     2     2\n11 Lost               Lowest recency, frequ…    NA    NA    NA     2     2     2"
  },
  {
    "objectID": "slides/06-getting-data-in.html#cleaning-a-table-8",
    "href": "slides/06-getting-data-in.html#cleaning-a-table-8",
    "title": "Reading in Data",
    "section": "Cleaning a table",
    "text": "Cleaning a table\n\n\n\nread_csv(here(\"data\", \"rfm_table.csv\")) |&gt;\n  janitor::clean_names() |&gt;\n  janitor::remove_empty(\"rows\") |&gt;\n  pivot_longer(cols = r:m) |&gt;\n  separate(col = value, into = c(\"lo\", \"hi\"),\n           remove = FALSE, convert = TRUE,\n           fill = \"left\") |&gt;\n  select(-value) |&gt;\n  pivot_wider(names_from = name,\n              values_from = lo:hi) |&gt;\n  mutate(across(where(is.integer), replace_na, 0))\n\n\n\n\n# A tibble: 11 × 8\n   segment            description             lo_r  lo_f  lo_m  hi_r  hi_f  hi_m\n   &lt;chr&gt;              &lt;chr&gt;                  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1 Champions          Bought recently, buy …     4     4     4     5     5     5\n 2 Loyal Customers    Spend good money. Res…     2     3     3     5     5     5\n 3 Potential Loyalist Recent customers, spe…     3     1     1     5     3     3\n 4 New Customers      Bought more recently,…     4     0     0     5     1     1\n 5 Promising          Recent shoppers, but …     3     0     0     4     1     1\n 6 Need Attention     Above average recency…     2     2     2     3     3     3\n 7 About To Sleep     Below average recency…     2     0     0     3     2     2\n 8 At Risk            Spent big money, purc…     0     2     2     2     5     5\n 9 Can’t Lose Them    Made big purchases an…     0     4     4     1     5     5\n10 Hibernating        Low spenders, low fre…     1     1     1     2     2     2\n11 Lost               Lowest recency, frequ…     0     0     0     2     2     2"
  },
  {
    "objectID": "slides/06-getting-data-in.html#cleaning-a-table-9",
    "href": "slides/06-getting-data-in.html#cleaning-a-table-9",
    "title": "Reading in Data",
    "section": "Cleaning a table",
    "text": "Cleaning a table\n\n\n\nread_csv(here(\"data\", \"rfm_table.csv\")) |&gt;\n  janitor::clean_names() |&gt;\n  janitor::remove_empty(\"rows\") |&gt;\n  pivot_longer(cols = r:m) |&gt;\n  separate(col = value, into = c(\"lo\", \"hi\"),\n           remove = FALSE, convert = TRUE,\n           fill = \"left\") |&gt;\n  select(-value) |&gt;\n  pivot_wider(names_from = name,\n              values_from = lo:hi) |&gt;\n  mutate(across(where(is.integer), replace_na, 0)) |&gt;\n  select(segment,\n         lo_r, hi_r,\n         lo_f, hi_f,\n         lo_m, hi_m,\n         description)\n\n\n\n\n# A tibble: 11 × 8\n   segment             lo_r  hi_r  lo_f  hi_f  lo_m  hi_m description           \n   &lt;chr&gt;              &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;                 \n 1 Champions              4     5     4     5     4     5 Bought recently, buy …\n 2 Loyal Customers        2     5     3     5     3     5 Spend good money. Res…\n 3 Potential Loyalist     3     5     1     3     1     3 Recent customers, spe…\n 4 New Customers          4     5     0     1     0     1 Bought more recently,…\n 5 Promising              3     4     0     1     0     1 Recent shoppers, but …\n 6 Need Attention         2     3     2     3     2     3 Above average recency…\n 7 About To Sleep         2     3     0     2     0     2 Below average recency…\n 8 At Risk                0     2     2     5     2     5 Spent big money, purc…\n 9 Can’t Lose Them        0     1     4     5     4     5 Made big purchases an…\n10 Hibernating            1     2     1     2     1     2 Low spenders, low fre…\n11 Lost                   0     2     0     2     0     2 Lowest recency, frequ…"
  },
  {
    "objectID": "slides/06-getting-data-in.html#a-candidate-for-rowwise",
    "href": "slides/06-getting-data-in.html#a-candidate-for-rowwise",
    "title": "Reading in Data",
    "section": "A candidate for rowwise()?",
    "text": "A candidate for rowwise()?\n\nrfm_table\n\n# A tibble: 11 × 8\n   segment             lo_r  hi_r  lo_f  hi_f  lo_m  hi_m description           \n   &lt;chr&gt;              &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;                 \n 1 Champions              4     5     4     5     4     5 Bought recently, buy …\n 2 Loyal Customers        2     5     3     5     3     5 Spend good money. Res…\n 3 Potential Loyalist     3     5     1     3     1     3 Recent customers, spe…\n 4 New Customers          4     5     0     1     0     1 Bought more recently,…\n 5 Promising              3     4     0     1     0     1 Recent shoppers, but …\n 6 Need Attention         2     3     2     3     2     3 Above average recency…\n 7 About To Sleep         2     3     0     2     0     2 Below average recency…\n 8 At Risk                0     2     2     5     2     5 Spent big money, purc…\n 9 Can’t Lose Them        0     1     4     5     4     5 Made big purchases an…\n10 Hibernating            1     2     1     2     1     2 Low spenders, low fre…\n11 Lost                   0     2     0     2     0     2 Lowest recency, frequ…"
  },
  {
    "objectID": "slides/06-getting-data-in.html#a-candidate-for-rowwise-1",
    "href": "slides/06-getting-data-in.html#a-candidate-for-rowwise-1",
    "title": "Reading in Data",
    "section": "A candidate for rowwise()?",
    "text": "A candidate for rowwise()?\n\nThis does what we expect:\n\n\nrfm_table |&gt; \n  mutate(sum_lo = lo_r + lo_f + lo_m,\n         sum_hi = hi_r + hi_f + hi_m) |&gt; \n  select(segment, sum_lo, sum_hi, everything())\n\n# A tibble: 11 × 10\n   segment         sum_lo sum_hi  lo_r  hi_r  lo_f  hi_f  lo_m  hi_m description\n   &lt;chr&gt;            &lt;int&gt;  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;      \n 1 Champions           12     15     4     5     4     5     4     5 Bought rec…\n 2 Loyal Customers      8     15     2     5     3     5     3     5 Spend good…\n 3 Potential Loya…      5     11     3     5     1     3     1     3 Recent cus…\n 4 New Customers        4      7     4     5     0     1     0     1 Bought mor…\n 5 Promising            3      6     3     4     0     1     0     1 Recent sho…\n 6 Need Attention       6      9     2     3     2     3     2     3 Above aver…\n 7 About To Sleep       2      7     2     3     0     2     0     2 Below aver…\n 8 At Risk              4     12     0     2     2     5     2     5 Spent big …\n 9 Can’t Lose Them      8     11     0     1     4     5     4     5 Made big p…\n10 Hibernating          3      6     1     2     1     2     1     2 Low spende…\n11 Lost                 0      6     0     2     0     2     0     2 Lowest rec…\n\n\n\nThis adds each column, elementwise."
  },
  {
    "objectID": "slides/06-getting-data-in.html#a-candidate-for-rowwise-2",
    "href": "slides/06-getting-data-in.html#a-candidate-for-rowwise-2",
    "title": "Reading in Data",
    "section": "A candidate for rowwise()?",
    "text": "A candidate for rowwise()?\n\nBut this does not:\n\n\nrfm_table |&gt; \n  mutate(sum_lo = sum(lo_r, lo_f, lo_m),\n         sum_hi = sum(hi_r, hi_f, hi_m)) |&gt;\n  select(segment, sum_lo, sum_hi, everything())\n\n# A tibble: 11 × 10\n   segment         sum_lo sum_hi  lo_r  hi_r  lo_f  hi_f  lo_m  hi_m description\n   &lt;chr&gt;            &lt;int&gt;  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;      \n 1 Champions           55    105     4     5     4     5     4     5 Bought rec…\n 2 Loyal Customers     55    105     2     5     3     5     3     5 Spend good…\n 3 Potential Loya…     55    105     3     5     1     3     1     3 Recent cus…\n 4 New Customers       55    105     4     5     0     1     0     1 Bought mor…\n 5 Promising           55    105     3     4     0     1     0     1 Recent sho…\n 6 Need Attention      55    105     2     3     2     3     2     3 Above aver…\n 7 About To Sleep      55    105     2     3     0     2     0     2 Below aver…\n 8 At Risk             55    105     0     2     2     5     2     5 Spent big …\n 9 Can’t Lose Them     55    105     0     1     4     5     4     5 Made big p…\n10 Hibernating         55    105     1     2     1     2     1     2 Low spende…\n11 Lost                55    105     0     2     0     2     0     2 Lowest rec…\n\n\n\nSum is taking all the columns, adding them up (into a single number), and putting that result in each row."
  },
  {
    "objectID": "slides/06-getting-data-in.html#a-candidate-for-rowwise-3",
    "href": "slides/06-getting-data-in.html#a-candidate-for-rowwise-3",
    "title": "Reading in Data",
    "section": "A candidate for rowwise()?",
    "text": "A candidate for rowwise()?\n\nSimilarly, this will not give the answer we probably expect:\n\n\nrfm_table |&gt; \n  mutate(mean_lo = mean(c(lo_r, lo_f, lo_m)),\n         mean_hi = mean(c(hi_r, hi_f, hi_m))) |&gt;\n  select(segment, mean_lo, mean_hi, everything())\n\n# A tibble: 11 × 10\n   segment       mean_lo mean_hi  lo_r  hi_r  lo_f  hi_f  lo_m  hi_m description\n   &lt;chr&gt;           &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;      \n 1 Champions        1.67    3.18     4     5     4     5     4     5 Bought rec…\n 2 Loyal Custom…    1.67    3.18     2     5     3     5     3     5 Spend good…\n 3 Potential Lo…    1.67    3.18     3     5     1     3     1     3 Recent cus…\n 4 New Customers    1.67    3.18     4     5     0     1     0     1 Bought mor…\n 5 Promising        1.67    3.18     3     4     0     1     0     1 Recent sho…\n 6 Need Attenti…    1.67    3.18     2     3     2     3     2     3 Above aver…\n 7 About To Sle…    1.67    3.18     2     3     0     2     0     2 Below aver…\n 8 At Risk          1.67    3.18     0     2     2     5     2     5 Spent big …\n 9 Can’t Lose T…    1.67    3.18     0     1     4     5     4     5 Made big p…\n10 Hibernating      1.67    3.18     1     2     1     2     1     2 Low spende…\n11 Lost             1.67    3.18     0     2     0     2     0     2 Lowest rec…"
  },
  {
    "objectID": "slides/06-getting-data-in.html#a-candidate-for-rowwise-4",
    "href": "slides/06-getting-data-in.html#a-candidate-for-rowwise-4",
    "title": "Reading in Data",
    "section": "A candidate for rowwise()?",
    "text": "A candidate for rowwise()?\n\nBut this will:\n\n\nrfm_table |&gt; \n  rowwise() |&gt; \n  mutate(mean_lo = mean(c(lo_r, lo_f, lo_m)),\n         mean_hi = mean(c(hi_r, hi_f, hi_m))) |&gt;\n  select(segment, mean_lo, mean_hi, everything())\n\n# A tibble: 11 × 10\n# Rowwise: \n   segment       mean_lo mean_hi  lo_r  hi_r  lo_f  hi_f  lo_m  hi_m description\n   &lt;chr&gt;           &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;      \n 1 Champions       4        5        4     5     4     5     4     5 Bought rec…\n 2 Loyal Custom…   2.67     5        2     5     3     5     3     5 Spend good…\n 3 Potential Lo…   1.67     3.67     3     5     1     3     1     3 Recent cus…\n 4 New Customers   1.33     2.33     4     5     0     1     0     1 Bought mor…\n 5 Promising       1        2        3     4     0     1     0     1 Recent sho…\n 6 Need Attenti…   2        3        2     3     2     3     2     3 Above aver…\n 7 About To Sle…   0.667    2.33     2     3     0     2     0     2 Below aver…\n 8 At Risk         1.33     4        0     2     2     5     2     5 Spent big …\n 9 Can’t Lose T…   2.67     3.67     0     1     4     5     4     5 Made big p…\n10 Hibernating     1        2        1     2     1     2     1     2 Low spende…\n11 Lost            0        2        0     2     0     2     0     2 Lowest rec…"
  },
  {
    "objectID": "slides/06-getting-data-in.html#rowwise-isnt-very-efficient",
    "href": "slides/06-getting-data-in.html#rowwise-isnt-very-efficient",
    "title": "Reading in Data",
    "section": "Rowwise isn’t very efficient",
    "text": "Rowwise isn’t very efficient\n\n\nIn general, you’ll want to see if some vectorized (“operating on columns, but elementwise”) function exists, as it’ll be faster.\nAnd most of the time, R and the tidyverse “wants” you to work in vectorized, columnar terms … hence your first move will often be to pivot the data into long format.\nSo, rowwise() is not likely to see a whole lot of further development."
  },
  {
    "objectID": "slides/06-getting-data-in.html#you-may-want-group_by-instead",
    "href": "slides/06-getting-data-in.html#you-may-want-group_by-instead",
    "title": "Reading in Data",
    "section": "You may want group_by() instead",
    "text": "You may want group_by() instead\n\nrfm_table |&gt; \n  group_by(segment) |&gt; \n  mutate(mean_lo = mean(c(lo_r, lo_f, lo_m)),\n         mean_hi = mean(c(hi_r, hi_f, hi_m))) |&gt;\n  select(segment, mean_lo, mean_hi, everything())\n\n# A tibble: 11 × 10\n# Groups:   segment [11]\n   segment       mean_lo mean_hi  lo_r  hi_r  lo_f  hi_f  lo_m  hi_m description\n   &lt;chr&gt;           &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;      \n 1 Champions       4        5        4     5     4     5     4     5 Bought rec…\n 2 Loyal Custom…   2.67     5        2     5     3     5     3     5 Spend good…\n 3 Potential Lo…   1.67     3.67     3     5     1     3     1     3 Recent cus…\n 4 New Customers   1.33     2.33     4     5     0     1     0     1 Bought mor…\n 5 Promising       1        2        3     4     0     1     0     1 Recent sho…\n 6 Need Attenti…   2        3        2     3     2     3     2     3 Above aver…\n 7 About To Sle…   0.667    2.33     2     3     0     2     0     2 Below aver…\n 8 At Risk         1.33     4        0     2     2     5     2     5 Spent big …\n 9 Can’t Lose T…   2.67     3.67     0     1     4     5     4     5 Made big p…\n10 Hibernating     1        2        1     2     1     2     1     2 Low spende…\n11 Lost            0        2        0     2     0     2     0     2 Lowest rec…"
  },
  {
    "objectID": "slides/06-getting-data-in.html#you-may-want-group_by-instead-1",
    "href": "slides/06-getting-data-in.html#you-may-want-group_by-instead-1",
    "title": "Reading in Data",
    "section": "You may want group_by() instead",
    "text": "You may want group_by() instead\n\nrfm_table |&gt; \n  group_by(segment) |&gt; \n  mutate(sum_lo = sum(lo_r, lo_f, lo_m),\n         sum_hi = sum(hi_r, hi_f, hi_m)) |&gt;\n  select(segment, sum_lo, sum_hi, everything())\n\n# A tibble: 11 × 10\n# Groups:   segment [11]\n   segment         sum_lo sum_hi  lo_r  hi_r  lo_f  hi_f  lo_m  hi_m description\n   &lt;chr&gt;            &lt;int&gt;  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;      \n 1 Champions           12     15     4     5     4     5     4     5 Bought rec…\n 2 Loyal Customers      8     15     2     5     3     5     3     5 Spend good…\n 3 Potential Loya…      5     11     3     5     1     3     1     3 Recent cus…\n 4 New Customers        4      7     4     5     0     1     0     1 Bought mor…\n 5 Promising            3      6     3     4     0     1     0     1 Recent sho…\n 6 Need Attention       6      9     2     3     2     3     2     3 Above aver…\n 7 About To Sleep       2      7     2     3     0     2     0     2 Below aver…\n 8 At Risk              4     12     0     2     2     5     2     5 Spent big …\n 9 Can’t Lose Them      8     11     0     1     4     5     4     5 Made big p…\n10 Hibernating          3      6     1     2     1     2     1     2 Low spende…\n11 Lost                 0      6     0     2     0     2     0     2 Lowest rec…"
  },
  {
    "objectID": "slides/06-getting-data-in.html#using-haven",
    "href": "slides/06-getting-data-in.html#using-haven",
    "title": "Reading in Data",
    "section": "Using haven",
    "text": "Using haven\n\nHaven is the Tidyverse’s package for reading and managing files from Stata, SPSS, and SAS. You should prefer it to the older Base R package foreign, which has similar functionality.\nWe’re going to import a General Social Survey dataset that’s in Stata’s .dta format.\n\n\nlibrary(haven)\n\n# This will take a moment\ngss_panel &lt;- read_stata(here(\"data\", \"gss_panel_long.dta\"))\n\n\nWe’ll do some of the common recoding and reorganizing tasks that accompany this."
  },
  {
    "objectID": "slides/06-getting-data-in.html#the-gss-panel",
    "href": "slides/06-getting-data-in.html#the-gss-panel",
    "title": "Reading in Data",
    "section": "The GSS panel",
    "text": "The GSS panel\n\nThe data:\n\n\ngss_panel\n\n# A tibble: 14,610 × 2,757\n   firstyear firstid    year    id vpsu   vstrat adults ballot  dateintv famgen \n       &lt;dbl&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl+&gt; &lt;dbl+&gt; &lt;dbl+&gt; &lt;dbl+l&gt; &lt;dbl+lb&gt; &lt;dbl+l&gt;\n 1      2006  9         2006     9     2  1957       1  3 [BAL… 709      1 [1 G…\n 2      2006  9         2008  3001    NA    NA       2  3 [BAL… 503      1 [1 G…\n 3      2006  9         2010  6001 NA(i)    NA       2  3 [BAL… 508      1 [1 G…\n 4      2006 10         2010  6002 NA(i)    NA       1  1 [BAL… 408      1 [1 G…\n 5      2006 10         2006    10     2  1957       2  1 [BAL… 630      2 [2 G…\n 6      2006 10         2008  3002    NA    NA       2  1 [BAL… 426      2 [2 G…\n 7      2006 11         2008  3003    NA    NA       2  3 [BAL… 718      4 [2 G…\n 8      2006 11         2010  6003 NA(i)    NA   NA(n)  3 [BAL… 518      2 [2 G…\n 9      2006 11         2006    11     2  1957       2  3 [BAL… 630      4 [2 G…\n10      2006 12         2010  6004 NA(i)    NA       4  1 [BAL… 324      2 [2 G…\n# ℹ 14,600 more rows\n# ℹ 2,747 more variables: form &lt;dbl+lbl&gt;, formwt &lt;dbl&gt;, gender1 &lt;dbl+lbl&gt;,\n#   hompop &lt;dbl+lbl&gt;, intage &lt;dbl+lbl&gt;, intid &lt;dbl+lbl&gt;, intyrs &lt;dbl+lbl&gt;,\n#   mode &lt;dbl+lbl&gt;, oversamp &lt;dbl&gt;, phase &lt;dbl+lbl&gt;, race &lt;dbl+lbl&gt;,\n#   reg16 &lt;dbl+lbl&gt;, region &lt;dbl+lbl&gt;, relate1 &lt;dbl+lbl&gt;, relhh1 &lt;dbl+lbl&gt;,\n#   relhhd1 &lt;dbl+lbl&gt;, respnum &lt;dbl+lbl&gt;, rvisitor &lt;dbl+lbl&gt;,\n#   sampcode &lt;dbl+lbl&gt;, sample &lt;dbl+lbl&gt;, sex &lt;dbl+lbl&gt;, size &lt;dbl+lbl&gt;, …"
  },
  {
    "objectID": "slides/06-getting-data-in.html#the-gss-panel-1",
    "href": "slides/06-getting-data-in.html#the-gss-panel-1",
    "title": "Reading in Data",
    "section": "The GSS panel",
    "text": "The GSS panel\n\n\nMany variables.\nStata’s missing value types are preserved\nData types are things like dbl+lbl indicating that Stata’s numeric values and variable labels have been preserved."
  },
  {
    "objectID": "slides/06-getting-data-in.html#the-gss-panel-2",
    "href": "slides/06-getting-data-in.html#the-gss-panel-2",
    "title": "Reading in Data",
    "section": "The GSS panel",
    "text": "The GSS panel\n\nYou can see the labeling system at work:\n\n\ngss_panel |&gt; \n  select(degree) |&gt; \n  group_by(degree) |&gt; \n  tally()\n\n# A tibble: 6 × 2\n  degree                     n\n  &lt;dbl+lbl&gt;              &lt;int&gt;\n1     0 [LT HIGH SCHOOL]  1850\n2     1 [HIGH SCHOOL]     7274\n3     2 [JUNIOR COLLEGE]  1161\n4     3 [bachelor]        2767\n5     4 [graduate]        1556\n6 NA(d)                      2"
  },
  {
    "objectID": "slides/06-getting-data-in.html#the-gss-panel-3",
    "href": "slides/06-getting-data-in.html#the-gss-panel-3",
    "title": "Reading in Data",
    "section": "The GSS panel",
    "text": "The GSS panel\n\nValues get pivoted, not labels, though.\n\n\ngss_panel |&gt; \n  select(sex, degree) |&gt; \n  group_by(sex, degree) |&gt; \n  tally() |&gt; \n  pivot_wider(names_from = sex, values_from = n)\n\n# A tibble: 6 × 3\n  degree                   `1`   `2`\n  &lt;dbl+lbl&gt;              &lt;int&gt; &lt;int&gt;\n1     0 [LT HIGH SCHOOL]   814  1036\n2     1 [HIGH SCHOOL]     3131  4143\n3     2 [JUNIOR COLLEGE]   440   721\n4     3 [bachelor]        1293  1474\n5     4 [graduate]         696   860\n6 NA(d)                     NA     2"
  },
  {
    "objectID": "slides/06-getting-data-in.html#the-gss-panel-4",
    "href": "slides/06-getting-data-in.html#the-gss-panel-4",
    "title": "Reading in Data",
    "section": "The GSS panel",
    "text": "The GSS panel\n\nOption 1: Just drop all the labels.\n\n\ngss_panel |&gt; \n  zap_missing() |&gt; \n  zap_labels()\n\n# A tibble: 14,610 × 2,757\n   firstyear firstid  year    id  vpsu vstrat adults ballot dateintv famgen\n       &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;\n 1      2006       9  2006     9     2   1957      1      3      709      1\n 2      2006       9  2008  3001    NA     NA      2      3      503      1\n 3      2006       9  2010  6001    NA     NA      2      3      508      1\n 4      2006      10  2010  6002    NA     NA      1      1      408      1\n 5      2006      10  2006    10     2   1957      2      1      630      2\n 6      2006      10  2008  3002    NA     NA      2      1      426      2\n 7      2006      11  2008  3003    NA     NA      2      3      718      4\n 8      2006      11  2010  6003    NA     NA     NA      3      518      2\n 9      2006      11  2006    11     2   1957      2      3      630      4\n10      2006      12  2010  6004    NA     NA      4      1      324      2\n# ℹ 14,600 more rows\n# ℹ 2,747 more variables: form &lt;dbl&gt;, formwt &lt;dbl&gt;, gender1 &lt;dbl&gt;,\n#   hompop &lt;dbl&gt;, intage &lt;dbl&gt;, intid &lt;dbl&gt;, intyrs &lt;dbl&gt;, mode &lt;dbl&gt;,\n#   oversamp &lt;dbl&gt;, phase &lt;dbl&gt;, race &lt;dbl&gt;, reg16 &lt;dbl&gt;, region &lt;dbl&gt;,\n#   relate1 &lt;dbl&gt;, relhh1 &lt;dbl&gt;, relhhd1 &lt;dbl&gt;, respnum &lt;dbl&gt;, rvisitor &lt;dbl&gt;,\n#   sampcode &lt;dbl&gt;, sample &lt;dbl&gt;, sex &lt;dbl&gt;, size &lt;dbl&gt;, spaneng &lt;dbl&gt;,\n#   srcbelt &lt;dbl&gt;, version &lt;dbl&gt;, visitors &lt;dbl&gt;, wtss &lt;dbl&gt;, wtssall &lt;dbl&gt;, …"
  },
  {
    "objectID": "slides/06-getting-data-in.html#the-gss-panel-5",
    "href": "slides/06-getting-data-in.html#the-gss-panel-5",
    "title": "Reading in Data",
    "section": "The GSS panel",
    "text": "The GSS panel\n\nOption 2: Convert the labels\nLet’s focus on a few measures of interest, and do some recoding.\n\n\n\n## Categorical vars\ncat_vars &lt;- c(\"race\", \"sex\", \"degree\", \"relig\", \"income\", \"polviews\", \"fefam\")\n\n## Integer vars\nint_vars &lt;- c(\"year\", \"id\", \"ballot\", \"age\", \"tvhours\")\n\n\n## Survey design\nwt_vars &lt;- c(\"vpsu\",\n             \"vstrat\",\n             \"oversamp\",\n             \"formwt\",              # weight to deal with experimental randomization\n             \"wtssall\",             # weight variable\n             \"sampcode\",            # sampling error code\n             \"sample\")              # sampling frame and method\n\n\nmy_gss_vars &lt;- c(int_vars, cat_vars, wt_vars)"
  },
  {
    "objectID": "slides/06-getting-data-in.html#cut-down-the-dataset",
    "href": "slides/06-getting-data-in.html#cut-down-the-dataset",
    "title": "Reading in Data",
    "section": "Cut down the dataset",
    "text": "Cut down the dataset\n\ngss_sub &lt;- gss_panel |&gt; \n  select(all_of(my_gss_vars))\n\ngss_sub\n\n# A tibble: 14,610 × 19\n    year    id ballot       age      tvhours     race    sex     degree  relig  \n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl+lbl&gt;    &lt;dbl+lb&gt; &lt;dbl+lbl&gt;   &lt;dbl+l&gt; &lt;dbl+l&gt; &lt;dbl+l&gt; &lt;dbl+l&gt;\n 1  2006     9 3 [BALLOT C] 23       NA(a) [iap] 2 [bla… 2 [fem… 3 [bac… 4 [non…\n 2  2008  3001 3 [BALLOT C] 25       NA(i)       3 [oth… 2 [fem… 3 [bac… 4 [non…\n 3  2010  6001 3 [BALLOT C] 27       NA(i)       2 [bla… 2 [fem… 3 [bac… 4 [non…\n 4  2010  6002 1 [BALLOT A] 36           3       1 [whi… 2 [fem… 4 [gra… 4 [non…\n 5  2006    10 1 [BALLOT A] 32           3       3 [oth… 2 [fem… 4 [gra… 4 [non…\n 6  2008  3002 1 [BALLOT A] 34           3       3 [oth… 2 [fem… 4 [gra… 4 [non…\n 7  2008  3003 3 [BALLOT C] 83       NA(i)       2 [bla… 2 [fem… 0 [LT … 1 [pro…\n 8  2010  6003 3 [BALLOT C] 85       NA(i)       2 [bla… 2 [fem… 0 [LT … 1 [pro…\n 9  2006    11 3 [BALLOT C] 81       NA(a) [iap] 2 [bla… 2 [fem… 0 [LT … 1 [pro…\n10  2010  6004 1 [BALLOT A] 51          10       3 [oth… 1 [mal… 1 [HIG… 2 [cat…\n# ℹ 14,600 more rows\n# ℹ 10 more variables: income &lt;dbl+lbl&gt;, polviews &lt;dbl+lbl&gt;, fefam &lt;dbl+lbl&gt;,\n#   vpsu &lt;dbl+lbl&gt;, vstrat &lt;dbl+lbl&gt;, oversamp &lt;dbl&gt;, formwt &lt;dbl&gt;,\n#   wtssall &lt;dbl+lbl&gt;, sampcode &lt;dbl+lbl&gt;, sample &lt;dbl+lbl&gt;"
  },
  {
    "objectID": "slides/06-getting-data-in.html#the-gss-panel-recoding",
    "href": "slides/06-getting-data-in.html#the-gss-panel-recoding",
    "title": "Reading in Data",
    "section": "The GSS Panel: Recoding",
    "text": "The GSS Panel: Recoding\n\ngss_sub |&gt; \n  mutate(across(everything(), zap_missing)) |&gt; \n  mutate(across(all_of(wt_vars), as.numeric)) |&gt; \n  mutate(across(all_of(int_vars), as.integer)) |&gt; \n  mutate(across(all_of(cat_vars), as_factor)) |&gt;\n  mutate(across(all_of(cat_vars), fct_relabel, tolower)) |&gt; \n  mutate(across(all_of(cat_vars), fct_relabel, tools::toTitleCase)) |&gt; \n  mutate(income = str_replace(income, \" - \", \"-\")) \n\n# A tibble: 14,610 × 19\n    year    id ballot   age tvhours race  sex    degree    relig income polviews\n   &lt;int&gt; &lt;int&gt;  &lt;int&gt; &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;     &lt;fct&gt; &lt;chr&gt;  &lt;fct&gt;   \n 1  2006     9      3    23      NA Black Female Bachelor  None  $2500… Conserv…\n 2  2008  3001      3    25      NA Other Female Bachelor  None  $2500… Extreme…\n 3  2010  6001      3    27      NA Black Female Bachelor  None  $2500… Extreme…\n 4  2010  6002      1    36       3 White Female Graduate  None  $2500… Liberal \n 5  2006    10      1    32       3 Other Female Graduate  None  &lt;NA&gt;   Slightl…\n 6  2008  3002      1    34       3 Other Female Graduate  None  $2500… Moderate\n 7  2008  3003      3    83      NA Black Female Lt High … Prot… $2000… Liberal \n 8  2010  6003      3    85      NA Black Female Lt High … Prot… &lt;NA&gt;   Moderate\n 9  2006    11      3    81      NA Black Female Lt High … Prot… &lt;NA&gt;   Moderate\n10  2010  6004      1    51      10 Other Male   High Sch… Cath… Lt $1… Liberal \n# ℹ 14,600 more rows\n# ℹ 8 more variables: fefam &lt;fct&gt;, vpsu &lt;dbl&gt;, vstrat &lt;dbl&gt;, oversamp &lt;dbl&gt;,\n#   formwt &lt;dbl&gt;, wtssall &lt;dbl&gt;, sampcode &lt;dbl&gt;, sample &lt;dbl&gt;"
  },
  {
    "objectID": "slides/06-getting-data-in.html#how-wed-actually-write-this",
    "href": "slides/06-getting-data-in.html#how-wed-actually-write-this",
    "title": "Reading in Data",
    "section": "How we’d actually write this",
    "text": "How we’d actually write this\n\ngss_sub &lt;- gss_sub |&gt; \n  mutate(across(everything(), zap_missing), \n         across(all_of(wt_vars), as.numeric), \n         across(all_of(int_vars), as.integer), \n         across(all_of(cat_vars), as_factor),\n         across(all_of(cat_vars), fct_relabel, tolower), \n         across(all_of(cat_vars), fct_relabel, tools::toTitleCase), \n         income = str_replace(income, \" - \", \"-\"))"
  },
  {
    "objectID": "slides/06-getting-data-in.html#the-gss-panel-more-recoding",
    "href": "slides/06-getting-data-in.html#the-gss-panel-more-recoding",
    "title": "Reading in Data",
    "section": "The GSS panel: more recoding",
    "text": "The GSS panel: more recoding\n\nAge quintiles: find the cutpoints\n\n\n# seq can make all kinds of sequences\nseq(from = 0, to = 1, by = 0.2)\n\n[1] 0.0 0.2 0.4 0.6 0.8 1.0\n\nage_quintiles &lt;- quantile(as.numeric(gss_panel$age), \n                      probs = seq(0, 1, 0.2), \n                      na.rm = TRUE)\n\n## These are the quintile cutpoints\nage_quintiles\n\n  0%  20%  40%  60%  80% 100% \n  18   33   43   53   65   89"
  },
  {
    "objectID": "slides/06-getting-data-in.html#the-gss-panel-more-recoding-1",
    "href": "slides/06-getting-data-in.html#the-gss-panel-more-recoding-1",
    "title": "Reading in Data",
    "section": "The GSS panel: more recoding",
    "text": "The GSS panel: more recoding\n\nAge quintiles: create the quintile variable\n\n\n## Apply the cut\ngss_sub |&gt; \n  mutate(agequint = cut(x = age, \n                          breaks = unique(age_quintiles), \n                          include.lowest = TRUE)) |&gt; \n  pull(agequint) |&gt; # grab a column and make it an ordinary vector\n  table()\n\n\n[18,33] (33,43] (43,53] (53,65] (65,89] \n   3157    2680    2851    3057    2720 \n\n\n\nWe’ll need to clean up those labels."
  },
  {
    "objectID": "slides/06-getting-data-in.html#the-gss-panel-more-recoding-2",
    "href": "slides/06-getting-data-in.html#the-gss-panel-more-recoding-2",
    "title": "Reading in Data",
    "section": "The GSS panel: more recoding",
    "text": "The GSS panel: more recoding\n\nI told you that regexp stuff would pay off.\n\n\nconvert_agegrp &lt;- function(x){\n    x &lt;- stringr::str_remove(x, \"\\\\(\")  # Remove open paren\n    x &lt;- stringr::str_remove(x, \"\\\\[\")  # Remove open bracket\n    x &lt;- stringr::str_remove(x, \"\\\\]\")  # Remove close bracket\n    x &lt;- stringr::str_replace(x, \",\", \"-\") # Replace comma with dash\n    x &lt;- stringr::str_replace(x, \"-89\", \"+\") # Replace -89 with + \n    regex &lt;- \"^(.*$)\" # Matches everything in string to end of line\n    x &lt;- stringr::str_replace(x, regex, \"Age \\\\1\") # Preface string with \"Age\" \n    x\n}"
  },
  {
    "objectID": "slides/06-getting-data-in.html#the-gss-panel-more-recoding-3",
    "href": "slides/06-getting-data-in.html#the-gss-panel-more-recoding-3",
    "title": "Reading in Data",
    "section": "The GSS panel: more recoding",
    "text": "The GSS panel: more recoding\n\n\n\ngss_sub\n\n\n\n\n# A tibble: 14,610 × 19\n    year    id ballot   age tvhours race  sex    degree    relig income polviews\n   &lt;int&gt; &lt;int&gt;  &lt;int&gt; &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;     &lt;fct&gt; &lt;chr&gt;  &lt;fct&gt;   \n 1  2006     9      3    23      NA Black Female Bachelor  None  $2500… Conserv…\n 2  2008  3001      3    25      NA Other Female Bachelor  None  $2500… Extreme…\n 3  2010  6001      3    27      NA Black Female Bachelor  None  $2500… Extreme…\n 4  2010  6002      1    36       3 White Female Graduate  None  $2500… Liberal \n 5  2006    10      1    32       3 Other Female Graduate  None  &lt;NA&gt;   Slightl…\n 6  2008  3002      1    34       3 Other Female Graduate  None  $2500… Moderate\n 7  2008  3003      3    83      NA Black Female Lt High … Prot… $2000… Liberal \n 8  2010  6003      3    85      NA Black Female Lt High … Prot… &lt;NA&gt;   Moderate\n 9  2006    11      3    81      NA Black Female Lt High … Prot… &lt;NA&gt;   Moderate\n10  2010  6004      1    51      10 Other Male   High Sch… Cath… Lt $1… Liberal \n# ℹ 14,600 more rows\n# ℹ 8 more variables: fefam &lt;fct&gt;, vpsu &lt;dbl&gt;, vstrat &lt;dbl&gt;, oversamp &lt;dbl&gt;,\n#   formwt &lt;dbl&gt;, wtssall &lt;dbl&gt;, sampcode &lt;dbl&gt;, sample &lt;dbl&gt;"
  },
  {
    "objectID": "slides/06-getting-data-in.html#the-gss-panel-more-recoding-4",
    "href": "slides/06-getting-data-in.html#the-gss-panel-more-recoding-4",
    "title": "Reading in Data",
    "section": "The GSS panel: more recoding",
    "text": "The GSS panel: more recoding\n\n\n\ngss_sub |&gt;\n    mutate(agequint = cut(x = age,\n                          breaks = unique(age_quintiles),\n                          include.lowest = TRUE))\n\n\n\n\n# A tibble: 14,610 × 20\n    year    id ballot   age tvhours race  sex    degree    relig income polviews\n   &lt;int&gt; &lt;int&gt;  &lt;int&gt; &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;     &lt;fct&gt; &lt;chr&gt;  &lt;fct&gt;   \n 1  2006     9      3    23      NA Black Female Bachelor  None  $2500… Conserv…\n 2  2008  3001      3    25      NA Other Female Bachelor  None  $2500… Extreme…\n 3  2010  6001      3    27      NA Black Female Bachelor  None  $2500… Extreme…\n 4  2010  6002      1    36       3 White Female Graduate  None  $2500… Liberal \n 5  2006    10      1    32       3 Other Female Graduate  None  &lt;NA&gt;   Slightl…\n 6  2008  3002      1    34       3 Other Female Graduate  None  $2500… Moderate\n 7  2008  3003      3    83      NA Black Female Lt High … Prot… $2000… Liberal \n 8  2010  6003      3    85      NA Black Female Lt High … Prot… &lt;NA&gt;   Moderate\n 9  2006    11      3    81      NA Black Female Lt High … Prot… &lt;NA&gt;   Moderate\n10  2010  6004      1    51      10 Other Male   High Sch… Cath… Lt $1… Liberal \n# ℹ 14,600 more rows\n# ℹ 9 more variables: fefam &lt;fct&gt;, vpsu &lt;dbl&gt;, vstrat &lt;dbl&gt;, oversamp &lt;dbl&gt;,\n#   formwt &lt;dbl&gt;, wtssall &lt;dbl&gt;, sampcode &lt;dbl&gt;, sample &lt;dbl&gt;, agequint &lt;fct&gt;"
  },
  {
    "objectID": "slides/06-getting-data-in.html#the-gss-panel-more-recoding-5",
    "href": "slides/06-getting-data-in.html#the-gss-panel-more-recoding-5",
    "title": "Reading in Data",
    "section": "The GSS panel: more recoding",
    "text": "The GSS panel: more recoding\n\n\n\ngss_sub |&gt;\n    mutate(agequint = cut(x = age,\n                          breaks = unique(age_quintiles),\n                          include.lowest = TRUE)) |&gt;\n    mutate(agequint = fct_relabel(agequint, convert_agegrp))\n\n\n\n\n# A tibble: 14,610 × 20\n    year    id ballot   age tvhours race  sex    degree    relig income polviews\n   &lt;int&gt; &lt;int&gt;  &lt;int&gt; &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;     &lt;fct&gt; &lt;chr&gt;  &lt;fct&gt;   \n 1  2006     9      3    23      NA Black Female Bachelor  None  $2500… Conserv…\n 2  2008  3001      3    25      NA Other Female Bachelor  None  $2500… Extreme…\n 3  2010  6001      3    27      NA Black Female Bachelor  None  $2500… Extreme…\n 4  2010  6002      1    36       3 White Female Graduate  None  $2500… Liberal \n 5  2006    10      1    32       3 Other Female Graduate  None  &lt;NA&gt;   Slightl…\n 6  2008  3002      1    34       3 Other Female Graduate  None  $2500… Moderate\n 7  2008  3003      3    83      NA Black Female Lt High … Prot… $2000… Liberal \n 8  2010  6003      3    85      NA Black Female Lt High … Prot… &lt;NA&gt;   Moderate\n 9  2006    11      3    81      NA Black Female Lt High … Prot… &lt;NA&gt;   Moderate\n10  2010  6004      1    51      10 Other Male   High Sch… Cath… Lt $1… Liberal \n# ℹ 14,600 more rows\n# ℹ 9 more variables: fefam &lt;fct&gt;, vpsu &lt;dbl&gt;, vstrat &lt;dbl&gt;, oversamp &lt;dbl&gt;,\n#   formwt &lt;dbl&gt;, wtssall &lt;dbl&gt;, sampcode &lt;dbl&gt;, sample &lt;dbl&gt;, agequint &lt;fct&gt;"
  },
  {
    "objectID": "slides/06-getting-data-in.html#the-gss-panel-more-recoding-6",
    "href": "slides/06-getting-data-in.html#the-gss-panel-more-recoding-6",
    "title": "Reading in Data",
    "section": "The GSS panel: more recoding",
    "text": "The GSS panel: more recoding\n\n\n\ngss_sub |&gt;\n    mutate(agequint = cut(x = age,\n                          breaks = unique(age_quintiles),\n                          include.lowest = TRUE)) |&gt;\n    mutate(agequint = fct_relabel(agequint, convert_agegrp)) |&gt;\n    mutate(year_f = droplevels(factor(year)))\n\n\n\n\n# A tibble: 14,610 × 21\n    year    id ballot   age tvhours race  sex    degree    relig income polviews\n   &lt;int&gt; &lt;int&gt;  &lt;int&gt; &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;     &lt;fct&gt; &lt;chr&gt;  &lt;fct&gt;   \n 1  2006     9      3    23      NA Black Female Bachelor  None  $2500… Conserv…\n 2  2008  3001      3    25      NA Other Female Bachelor  None  $2500… Extreme…\n 3  2010  6001      3    27      NA Black Female Bachelor  None  $2500… Extreme…\n 4  2010  6002      1    36       3 White Female Graduate  None  $2500… Liberal \n 5  2006    10      1    32       3 Other Female Graduate  None  &lt;NA&gt;   Slightl…\n 6  2008  3002      1    34       3 Other Female Graduate  None  $2500… Moderate\n 7  2008  3003      3    83      NA Black Female Lt High … Prot… $2000… Liberal \n 8  2010  6003      3    85      NA Black Female Lt High … Prot… &lt;NA&gt;   Moderate\n 9  2006    11      3    81      NA Black Female Lt High … Prot… &lt;NA&gt;   Moderate\n10  2010  6004      1    51      10 Other Male   High Sch… Cath… Lt $1… Liberal \n# ℹ 14,600 more rows\n# ℹ 10 more variables: fefam &lt;fct&gt;, vpsu &lt;dbl&gt;, vstrat &lt;dbl&gt;, oversamp &lt;dbl&gt;,\n#   formwt &lt;dbl&gt;, wtssall &lt;dbl&gt;, sampcode &lt;dbl&gt;, sample &lt;dbl&gt;, agequint &lt;fct&gt;,\n#   year_f &lt;fct&gt;"
  },
  {
    "objectID": "slides/06-getting-data-in.html#the-gss-panel-more-recoding-7",
    "href": "slides/06-getting-data-in.html#the-gss-panel-more-recoding-7",
    "title": "Reading in Data",
    "section": "The GSS panel: more recoding",
    "text": "The GSS panel: more recoding\n\n\n\ngss_sub |&gt;\n    mutate(agequint = cut(x = age,\n                          breaks = unique(age_quintiles),\n                          include.lowest = TRUE)) |&gt;\n    mutate(agequint = fct_relabel(agequint, convert_agegrp)) |&gt;\n    mutate(year_f = droplevels(factor(year))) |&gt;\n    mutate(young = ifelse(age &lt; 26, \"Yes\", \"No\"))\n\n\n\n\n# A tibble: 14,610 × 22\n    year    id ballot   age tvhours race  sex    degree    relig income polviews\n   &lt;int&gt; &lt;int&gt;  &lt;int&gt; &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;     &lt;fct&gt; &lt;chr&gt;  &lt;fct&gt;   \n 1  2006     9      3    23      NA Black Female Bachelor  None  $2500… Conserv…\n 2  2008  3001      3    25      NA Other Female Bachelor  None  $2500… Extreme…\n 3  2010  6001      3    27      NA Black Female Bachelor  None  $2500… Extreme…\n 4  2010  6002      1    36       3 White Female Graduate  None  $2500… Liberal \n 5  2006    10      1    32       3 Other Female Graduate  None  &lt;NA&gt;   Slightl…\n 6  2008  3002      1    34       3 Other Female Graduate  None  $2500… Moderate\n 7  2008  3003      3    83      NA Black Female Lt High … Prot… $2000… Liberal \n 8  2010  6003      3    85      NA Black Female Lt High … Prot… &lt;NA&gt;   Moderate\n 9  2006    11      3    81      NA Black Female Lt High … Prot… &lt;NA&gt;   Moderate\n10  2010  6004      1    51      10 Other Male   High Sch… Cath… Lt $1… Liberal \n# ℹ 14,600 more rows\n# ℹ 11 more variables: fefam &lt;fct&gt;, vpsu &lt;dbl&gt;, vstrat &lt;dbl&gt;, oversamp &lt;dbl&gt;,\n#   formwt &lt;dbl&gt;, wtssall &lt;dbl&gt;, sampcode &lt;dbl&gt;, sample &lt;dbl&gt;, agequint &lt;fct&gt;,\n#   year_f &lt;fct&gt;, young &lt;chr&gt;"
  },
  {
    "objectID": "slides/06-getting-data-in.html#the-gss-panel-more-recoding-8",
    "href": "slides/06-getting-data-in.html#the-gss-panel-more-recoding-8",
    "title": "Reading in Data",
    "section": "The GSS panel: more recoding",
    "text": "The GSS panel: more recoding\n\n\n\ngss_sub |&gt;\n    mutate(agequint = cut(x = age,\n                          breaks = unique(age_quintiles),\n                          include.lowest = TRUE)) |&gt;\n    mutate(agequint = fct_relabel(agequint, convert_agegrp)) |&gt;\n    mutate(year_f = droplevels(factor(year))) |&gt;\n    mutate(young = ifelse(age &lt; 26, \"Yes\", \"No\")) |&gt;\n    mutate(fefam_d = fct_recode(fefam,\n                                Agree = \"Strongly Agree\",\n                                Disagree = \"Strongly Disagree\"))\n\n\n\n\n# A tibble: 14,610 × 23\n    year    id ballot   age tvhours race  sex    degree    relig income polviews\n   &lt;int&gt; &lt;int&gt;  &lt;int&gt; &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;     &lt;fct&gt; &lt;chr&gt;  &lt;fct&gt;   \n 1  2006     9      3    23      NA Black Female Bachelor  None  $2500… Conserv…\n 2  2008  3001      3    25      NA Other Female Bachelor  None  $2500… Extreme…\n 3  2010  6001      3    27      NA Black Female Bachelor  None  $2500… Extreme…\n 4  2010  6002      1    36       3 White Female Graduate  None  $2500… Liberal \n 5  2006    10      1    32       3 Other Female Graduate  None  &lt;NA&gt;   Slightl…\n 6  2008  3002      1    34       3 Other Female Graduate  None  $2500… Moderate\n 7  2008  3003      3    83      NA Black Female Lt High … Prot… $2000… Liberal \n 8  2010  6003      3    85      NA Black Female Lt High … Prot… &lt;NA&gt;   Moderate\n 9  2006    11      3    81      NA Black Female Lt High … Prot… &lt;NA&gt;   Moderate\n10  2010  6004      1    51      10 Other Male   High Sch… Cath… Lt $1… Liberal \n# ℹ 14,600 more rows\n# ℹ 12 more variables: fefam &lt;fct&gt;, vpsu &lt;dbl&gt;, vstrat &lt;dbl&gt;, oversamp &lt;dbl&gt;,\n#   formwt &lt;dbl&gt;, wtssall &lt;dbl&gt;, sampcode &lt;dbl&gt;, sample &lt;dbl&gt;, agequint &lt;fct&gt;,\n#   year_f &lt;fct&gt;, young &lt;chr&gt;, fefam_d &lt;fct&gt;"
  },
  {
    "objectID": "slides/06-getting-data-in.html#the-gss-panel-more-recoding-9",
    "href": "slides/06-getting-data-in.html#the-gss-panel-more-recoding-9",
    "title": "Reading in Data",
    "section": "The GSS panel: more recoding",
    "text": "The GSS panel: more recoding\n\n\n\ngss_sub |&gt;\n    mutate(agequint = cut(x = age,\n                          breaks = unique(age_quintiles),\n                          include.lowest = TRUE)) |&gt;\n    mutate(agequint = fct_relabel(agequint, convert_agegrp)) |&gt;\n    mutate(year_f = droplevels(factor(year))) |&gt;\n    mutate(young = ifelse(age &lt; 26, \"Yes\", \"No\")) |&gt;\n    mutate(fefam_d = fct_recode(fefam,\n                                Agree = \"Strongly Agree\",\n                                Disagree = \"Strongly Disagree\")) |&gt;\n    mutate(degree = factor(degree,\n                           levels = levels(gss_sub$degree),  \n                           ordered = TRUE))  \n\n\n\n\n# A tibble: 14,610 × 23\n    year    id ballot   age tvhours race  sex    degree    relig income polviews\n   &lt;int&gt; &lt;int&gt;  &lt;int&gt; &lt;int&gt;   &lt;int&gt; &lt;fct&gt; &lt;fct&gt;  &lt;ord&gt;     &lt;fct&gt; &lt;chr&gt;  &lt;fct&gt;   \n 1  2006     9      3    23      NA Black Female Bachelor  None  $2500… Conserv…\n 2  2008  3001      3    25      NA Other Female Bachelor  None  $2500… Extreme…\n 3  2010  6001      3    27      NA Black Female Bachelor  None  $2500… Extreme…\n 4  2010  6002      1    36       3 White Female Graduate  None  $2500… Liberal \n 5  2006    10      1    32       3 Other Female Graduate  None  &lt;NA&gt;   Slightl…\n 6  2008  3002      1    34       3 Other Female Graduate  None  $2500… Moderate\n 7  2008  3003      3    83      NA Black Female Lt High … Prot… $2000… Liberal \n 8  2010  6003      3    85      NA Black Female Lt High … Prot… &lt;NA&gt;   Moderate\n 9  2006    11      3    81      NA Black Female Lt High … Prot… &lt;NA&gt;   Moderate\n10  2010  6004      1    51      10 Other Male   High Sch… Cath… Lt $1… Liberal \n# ℹ 14,600 more rows\n# ℹ 12 more variables: fefam &lt;fct&gt;, vpsu &lt;dbl&gt;, vstrat &lt;dbl&gt;, oversamp &lt;dbl&gt;,\n#   formwt &lt;dbl&gt;, wtssall &lt;dbl&gt;, sampcode &lt;dbl&gt;, sample &lt;dbl&gt;, agequint &lt;fct&gt;,\n#   year_f &lt;fct&gt;, young &lt;chr&gt;, fefam_d &lt;fct&gt;"
  },
  {
    "objectID": "slides/06-getting-data-in.html#how-wed-actually-write-this-1",
    "href": "slides/06-getting-data-in.html#how-wed-actually-write-this-1",
    "title": "Reading in Data",
    "section": "How we’d actually write this",
    "text": "How we’d actually write this\n\n\ngss_sub &lt;- gss_sub |&gt;\n      mutate(agequint = cut(x = age, \n                            breaks = unique(age_quintiles), \n                            include.lowest = TRUE), \n              agequint = fct_relabel(agequint, convert_agegrp), \n              year_f = droplevels(factor(year)),#&lt;&lt; \n              young = ifelse(age &lt; 26, \"Yes\", \"No\"), \n              fefam_d = fct_recode(fefam,\n                                  Agree = \"Strongly Agree\",\n                                  Disagree = \"Strongly Disagree\"),\n              degree = factor(degree, \n                             levels = levels(gss_sub$degree), \n                             ordered = TRUE))"
  },
  {
    "objectID": "slides/06-getting-data-in.html#how-wed-actually-write-this-2",
    "href": "slides/06-getting-data-in.html#how-wed-actually-write-this-2",
    "title": "Reading in Data",
    "section": "How we’d actually write this",
    "text": "How we’d actually write this\n\n\ngss_sub &lt;- gss_sub |&gt;\n    mutate(agequint = cut(x = age, \n                          breaks = unique(age_quintiles), \n                          include.lowest = TRUE), \n            agequint = fct_relabel(agequint, convert_agegrp), \n            year_f = factor(year),  \n            young = ifelse(age &lt; 26, \"Yes\", \"No\"),\n            fefam_d = fct_recode(fefam,\n                                Agree = \"Strongly Agree\",\n                                Disagree = \"Strongly Disagree\"),\n            degree = factor(degree, \n                           levels = levels(gss_sub$degree), \n                           ordered = TRUE))"
  },
  {
    "objectID": "slides/06-getting-data-in.html#how-wed-actually-write-this-3",
    "href": "slides/06-getting-data-in.html#how-wed-actually-write-this-3",
    "title": "Reading in Data",
    "section": "How we’d actually write this",
    "text": "How we’d actually write this\n\n\ngss_sub &lt;- gss_sub |&gt;\n    mutate(agequint = cut(x = age, \n                          breaks = unique(age_quintiles), \n                          include.lowest = TRUE), \n            agequint = fct_relabel(agequint, convert_agegrp), \n            year_f = droplevels(factor(year)),  \n            young = ifelse(age &lt; 26, \"Yes\", \"No\"), \n            fefam_d = fct_recode(fefam,\n                                Agree = \"Strongly Agree\",\n                                Disagree = \"Strongly Disagree\"),\n            degree = factor(degree, \n                           levels = levels(gss_sub$degree), \n                           ordered = TRUE))"
  },
  {
    "objectID": "slides/06-getting-data-in.html#gss-panel",
    "href": "slides/06-getting-data-in.html#gss-panel",
    "title": "Reading in Data",
    "section": "GSS Panel",
    "text": "GSS Panel\n\ngss_sub |&gt; \n  select(sex, year, year_f, age, young, fefam, fefam_d) |&gt; \n  sample_n(15)\n\n# A tibble: 15 × 7\n   sex     year year_f   age young fefam             fefam_d \n   &lt;fct&gt;  &lt;int&gt; &lt;fct&gt;  &lt;int&gt; &lt;chr&gt; &lt;fct&gt;             &lt;fct&gt;   \n 1 Female  2008 2008      73 No    Disagree          Disagree\n 2 Female  2012 2012      79 No    Strongly Agree    Agree   \n 3 Female  2014 2014      68 No    Strongly Disagree Disagree\n 4 Female  2012 2012      45 No    Disagree          Disagree\n 5 Female  2010 2010      43 No    Agree             Agree   \n 6 Female  2010 2010      63 No    Agree             Agree   \n 7 Male    2012 2012      54 No    Agree             Agree   \n 8 Male    2008 2008      62 No    Disagree          Disagree\n 9 Female  2006 2006      34 No    Strongly Disagree Disagree\n10 Female  2010 2010      26 No    Disagree          Disagree\n11 Female  2008 2008      61 No    &lt;NA&gt;              &lt;NA&gt;    \n12 Male    2014 2014      49 No    Disagree          Disagree\n13 Male    2010 2010      43 No    Disagree          Disagree\n14 Male    2010 2010      35 No    Agree             Agree   \n15 Female  2006 2006      40 No    Agree             Agree"
  },
  {
    "objectID": "slides/06-getting-data-in.html#gss-panel-1",
    "href": "slides/06-getting-data-in.html#gss-panel-1",
    "title": "Reading in Data",
    "section": "GSS Panel",
    "text": "GSS Panel\n\ngss_sub |&gt; \n  select(sex, degree) |&gt; \n  group_by(sex, degree) |&gt; \n  tally() |&gt; \n  pivot_wider(names_from = sex, values_from = n)\n\n# A tibble: 6 × 3\n  degree          Male Female\n  &lt;ord&gt;          &lt;int&gt;  &lt;int&gt;\n1 Lt High School   814   1036\n2 High School     3131   4143\n3 Junior College   440    721\n4 Bachelor        1293   1474\n5 Graduate         696    860\n6 &lt;NA&gt;              NA      2"
  },
  {
    "objectID": "slides/06-getting-data-in.html#more-on-factors",
    "href": "slides/06-getting-data-in.html#more-on-factors",
    "title": "Reading in Data",
    "section": "More on factors",
    "text": "More on factors\n\nWe’ve already seen fct_relabel() and fct_recode() from forcats.\nThere are numerous other convenience functions for factors."
  },
  {
    "objectID": "slides/06-getting-data-in.html#more-on-factors-1",
    "href": "slides/06-getting-data-in.html#more-on-factors-1",
    "title": "Reading in Data",
    "section": "More on factors",
    "text": "More on factors\n\ngss_sub |&gt; \n  count(degree)\n\n# A tibble: 6 × 2\n  degree             n\n  &lt;ord&gt;          &lt;int&gt;\n1 Lt High School  1850\n2 High School     7274\n3 Junior College  1161\n4 Bachelor        2767\n5 Graduate        1556\n6 &lt;NA&gt;               2\n\n\n\nlevels(gss_sub$degree)\n\n[1] \"Lt High School\" \"High School\"    \"Junior College\" \"Bachelor\"      \n[5] \"Graduate\""
  },
  {
    "objectID": "slides/06-getting-data-in.html#more-on-factors-2",
    "href": "slides/06-getting-data-in.html#more-on-factors-2",
    "title": "Reading in Data",
    "section": "More on factors",
    "text": "More on factors\n\nMake the NA values an explicit level\n\n\ngss_sub |&gt; \n  mutate(degree_na = fct_explicit_na(degree)) |&gt; \n  count(degree_na)\n\n# A tibble: 6 × 2\n  degree_na          n\n  &lt;ord&gt;          &lt;int&gt;\n1 Lt High School  1850\n2 High School     7274\n3 Junior College  1161\n4 Bachelor        2767\n5 Graduate        1556\n6 (Missing)          2"
  },
  {
    "objectID": "slides/06-getting-data-in.html#more-on-factors-3",
    "href": "slides/06-getting-data-in.html#more-on-factors-3",
    "title": "Reading in Data",
    "section": "More on factors",
    "text": "More on factors\n\nRelevel by frequency\n\n\ngss_sub |&gt; \n  mutate(degree_freq = fct_infreq(degree)) |&gt; \n  count(degree_freq) \n\n# A tibble: 6 × 2\n  degree_freq        n\n  &lt;ord&gt;          &lt;int&gt;\n1 High School     7274\n2 Bachelor        2767\n3 Lt High School  1850\n4 Graduate        1556\n5 Junior College  1161\n6 &lt;NA&gt;               2"
  },
  {
    "objectID": "slides/06-getting-data-in.html#more-on-factors-4",
    "href": "slides/06-getting-data-in.html#more-on-factors-4",
    "title": "Reading in Data",
    "section": "More on factors",
    "text": "More on factors\n\nRelevel manually\n\n\nis.ordered(gss_sub$sex)\n\n[1] FALSE\n\nlevels(gss_sub$sex)\n\n[1] \"Male\"   \"Female\""
  },
  {
    "objectID": "slides/06-getting-data-in.html#more-on-factors-5",
    "href": "slides/06-getting-data-in.html#more-on-factors-5",
    "title": "Reading in Data",
    "section": "More on factors",
    "text": "More on factors\n\nRelevel manually\n\n\nsummary(lm(age ~ sex, data = gss_sub))\n\n\nCall:\nlm(formula = age ~ sex, data = gss_sub)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-31.431 -13.972  -0.431  12.569  40.028 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  48.9720     0.2149 227.846   &lt;2e-16 ***\nsexFemale     0.4594     0.2864   1.604    0.109    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 17.08 on 14463 degrees of freedom\n  (145 observations deleted due to missingness)\nMultiple R-squared:  0.0001779, Adjusted R-squared:  0.0001088 \nF-statistic: 2.573 on 1 and 14463 DF,  p-value: 0.1087"
  },
  {
    "objectID": "slides/06-getting-data-in.html#more-on-factors-6",
    "href": "slides/06-getting-data-in.html#more-on-factors-6",
    "title": "Reading in Data",
    "section": "More on factors",
    "text": "More on factors\n\nRelevel manually\n\n\ngss_sub &lt;- gss_sub |&gt; \n  mutate(sex = fct_relevel(sex, \"Female\"))\n\nlevels(gss_sub$sex)\n\n[1] \"Female\" \"Male\""
  },
  {
    "objectID": "slides/06-getting-data-in.html#more-on-factors-7",
    "href": "slides/06-getting-data-in.html#more-on-factors-7",
    "title": "Reading in Data",
    "section": "More on factors",
    "text": "More on factors\n\nRelevel manually\n\n\nsummary(lm(age ~ sex, data = gss_sub))\n\n\nCall:\nlm(formula = age ~ sex, data = gss_sub)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-31.431 -13.972  -0.431  12.569  40.028 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  49.4313     0.1892 261.233   &lt;2e-16 ***\nsexMale      -0.4594     0.2864  -1.604    0.109    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 17.08 on 14463 degrees of freedom\n  (145 observations deleted due to missingness)\nMultiple R-squared:  0.0001779, Adjusted R-squared:  0.0001088 \nF-statistic: 2.573 on 1 and 14463 DF,  p-value: 0.1087"
  },
  {
    "objectID": "slides/06-getting-data-in.html#more-on-factors-8",
    "href": "slides/06-getting-data-in.html#more-on-factors-8",
    "title": "Reading in Data",
    "section": "More on factors",
    "text": "More on factors\n\nInteract or cross factors\n\n\ngss_sub &lt;- gss_sub |&gt; \n  mutate(degree_by_race = fct_cross(race, degree))\n\ngss_sub |&gt; \n  count(degree_by_race)\n\n# A tibble: 16 × 2\n   degree_by_race           n\n   &lt;fct&gt;                &lt;int&gt;\n 1 White:Lt High School  1188\n 2 Black:Lt High School   379\n 3 Other:Lt High School   283\n 4 White:High School     5548\n 5 Black:High School     1180\n 6 Other:High School      546\n 7 White:Junior College   885\n 8 Black:Junior College   206\n 9 Other:Junior College    70\n10 White:Bachelor        2334\n11 Black:Bachelor         233\n12 Other:Bachelor         200\n13 White:Graduate        1293\n14 Black:Graduate         116\n15 Other:Graduate         147\n16 &lt;NA&gt;                     2"
  },
  {
    "objectID": "slides/06-getting-data-in.html#more-on-factors-9",
    "href": "slides/06-getting-data-in.html#more-on-factors-9",
    "title": "Reading in Data",
    "section": "More on factors",
    "text": "More on factors\n\nRelevel manually by lumping … the least frequent n\n\n\ngss_sub |&gt; \n  mutate(degree_n = fct_lump_n(degree, n = 3)) |&gt; \n  count(degree_n)\n\n# A tibble: 5 × 2\n  degree_n           n\n  &lt;ord&gt;          &lt;int&gt;\n1 Lt High School  1850\n2 High School     7274\n3 Bachelor        2767\n4 Other           2717\n5 &lt;NA&gt;               2"
  },
  {
    "objectID": "slides/06-getting-data-in.html#more-on-factors-10",
    "href": "slides/06-getting-data-in.html#more-on-factors-10",
    "title": "Reading in Data",
    "section": "More on factors",
    "text": "More on factors\nRelevel manually by lumping …to other, manually\n\ngss_sub |&gt; \n  mutate(degree_o = fct_other(degree, \n                              keep = c(\"Lt High School\", \n                                       \"High School\"))) |&gt; \n  count(degree_o)\n\n# A tibble: 4 × 2\n  degree_o           n\n  &lt;ord&gt;          &lt;int&gt;\n1 Lt High School  1850\n2 High School     7274\n3 Other           5484\n4 &lt;NA&gt;               2"
  }
]